<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Types on code.openark.org</title>
    <link>/blog/tag/data-types/</link>
    <description>Recent content in Data Types on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 24 Jan 2013 10:08:40 +0000</lastBuildDate>
    <atom:link href="/blog/tag/data-types/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Re: MySQL 5.1 vs. MySQL 5.5: Floats, Doubles, and Scientific Notation</title>
      <link>/blog/mysql/re-mysql-5-1-vs-mysql-5-5-floats-doubles-and-scientific-notation/</link>
      <pubDate>Thu, 24 Jan 2013 10:08:40 +0000</pubDate>
      
      <guid>/blog/mysql/re-mysql-5-1-vs-mysql-5-5-floats-doubles-and-scientific-notation/</guid>
      <description>&lt;p&gt;Reading Sheeri&#39;s &lt;a href=&#34;http://blog.mozilla.org/it/2013/01/17/mysql-5-1-vs-mysql-5-5-floats-doubles-and-scientific-notation/&#34;&gt;MySQL 5.1 vs. MySQL 5.5: Floats, Doubles, and Scientific Notation&lt;/a&gt;, I was baffled at this change of floating point number notation.&lt;/p&gt;
&lt;p&gt;However, I was also concerned about the final action taken: using &lt;strong&gt;&#34;--ignore-columns&#34;&lt;/strong&gt; to avoid comparing the &lt;strong&gt;FLOAT&lt;/strong&gt;/&lt;strong&gt;DOUBLE&lt;/strong&gt; types.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.percona.com/doc/percona-toolkit/2.0/pt-table-checksum.html#cmdoption-pt-table-checksum--float-precision&#34;&gt;--float-precision&lt;/a&gt; option for &lt;em&gt;pt-table-checksum&lt;/em&gt; currently only uses &lt;strong&gt;ROUND()&lt;/strong&gt; so as to disregard minor rounding issues. But it can very easily extend to handle the difference in floating point notation. Consider again the problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; create table tf(f float);
Query OK, 0 rows affected (0.11 sec)

mysql&amp;gt; insert into tf values(0.0000958084);
Query OK, 1 row affected (0.04 sec)

mysql-&lt;strong&gt;5.1&lt;/strong&gt;&amp;gt; select * from tf;
+-------------+
| f           |
+-------------+
| 9.58084e-05 |
+-------------+

mysql-&lt;strong&gt;5.5&lt;/strong&gt;&amp;gt; select * from tf;
+--------------+
| f            |
+--------------+
| 0.0000958084 |
+--------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can we normalize the notation?&lt;/p&gt;
&lt;p&gt;Easily: &lt;strong&gt;CAST&lt;/strong&gt; it as &lt;strong&gt;DECIMAL&lt;/strong&gt;. Consider:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql-&lt;strong&gt;5.1&lt;/strong&gt;&amp;gt; SELECT f,ROUND(IF(f BETWEEN -1 AND 1, &lt;strong&gt;CAST(f AS DECIMAL(65,30))&lt;/strong&gt;, f), 10) as fn from tf;
+-------------+--------------+
| f           | fn           |
+-------------+--------------+
| 9.58084e-05 | 0.0000958084 |
+-------------+--------------+

mysql-&lt;strong&gt;5.5&lt;/strong&gt;&amp;gt; SELECT f,ROUND(IF(f BETWEEN -1 AND 1, &lt;strong&gt;CAST(f AS DECIMAL(65,30))&lt;/strong&gt;, f), 10) as fn from tf;
+--------------+--------------+
| f            | fn           |
+--------------+--------------+
| 0.0000958084 | 0.0000958084 |
+--------------+--------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The normalization works well in both cases; also, taking care to only normalize values in the range &lt;strong&gt;[-1, 1]&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The change in &lt;em&gt;pt-table-checksum&lt;/em&gt;? One line of code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;         elsif ( $float_precision &amp;amp;&amp;amp; $type =~ m/float|double/ ) {
            $result = &#34;ROUND($result, $float_precision)&#34;;
         }&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Turns to&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;         elsif ( $float_precision &amp;amp;&amp;amp; $type =~ m/float|double/ ) {
            $result = &#34;ROUND(IF($result BETWEEN -1 AND 1, CAST($result AS DECIMAL(65,30)), $result), $float_precision)&#34;;
         }&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve just submitted a blueprint, but I would think changing one line of code shouldn&#39;t wait till next release of Percona Toolkit: one can edit in-place their &lt;strong&gt;/usr/bin/pt-table-checksum&lt;/strong&gt; and proceed to validate their database integrity.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CHAR and spaces</title>
      <link>/blog/mysql/char-and-spaces/</link>
      <pubDate>Tue, 12 Jun 2012 07:28:08 +0000</pubDate>
      
      <guid>/blog/mysql/char-and-spaces/</guid>
      <description>&lt;p&gt;I know about it, I knew about it all along, but... it&#39;s so easy to fall for it; there&#39;s just so much absurdity!&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;CHAR&lt;/strong&gt; type has a known number of characters. For example, the column:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CountryCode CHAR(3) CHARSET ascii NOT NULL&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;- is known to have exactly three characters. These could be &lt;strong&gt;&#39;USA&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;FRA&#39;&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;p&gt;What happens with spaces? A SQL &lt;strong&gt;CHAR&lt;/strong&gt; type ignores any trailing spaces; thus, the code &lt;strong&gt;&#39;GB &#39;&lt;/strong&gt; (the characters &lt;strong&gt;&#39;G&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;B&#39;&lt;/strong&gt;, and the space &lt;strong&gt;&#39; &#39;&lt;/strong&gt;) is interpreted as &lt;strong&gt;&#39;GB&#39;&lt;/strong&gt;. Trailing spaces are not regarded as part of the text. Want to see some absurdity?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE `c_test` (
  `c` char(1) DEFAULT NULL
);
INSERT INTO c_test VALUES (&#39;a&#39;);
INSERT INTO c_test VALUES (&#39;b&#39;);
INSERT INTO c_test VALUES (&#39; &#39;);

SELECT c, LENGTH(c), c = &#39;a&#39;, c = &#39;b&#39;, c = &#39; &#39;, LENGTH(&#39; &#39;) FROM c_test;
+------+-----------+---------+---------+---------+-------------+
| c    | LENGTH(c) | c = &#39;a&#39; | c = &#39;b&#39; | c = &#39; &#39; | LENGTH(&#39; &#39;) |
+------+-----------+---------+---------+---------+-------------+
| a    |         1 |       1 |       0 |       0 |           1 |
| b    |         1 |       0 |       1 |       0 |           1 |
|      |         0 |       0 |       0 |       1 |           1 |
+------+-----------+---------+---------+---------+-------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!--more--&gt;Note that &lt;strong&gt;LENGTH(c)&lt;/strong&gt; is zero on third row, but nevertheless it equals the space character (&lt;strong&gt;c = &#39; &#39;&lt;/strong&gt;). Although, the length of the space character is... &lt;strong&gt;1&lt;/strong&gt; (and this is because the constant &lt;strong&gt;&#39; &#39;&lt;/strong&gt; is interpreted as &lt;strong&gt;VARCHAR)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To emphasize the absurdity, now take a closer look:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT c, LENGTH(c), c = &#39; &#39;, LENGTH(&#39; &#39;), c = &#39;&#39;, LENGTH(&#39;&#39;) FROM c_test;
+------+-----------+---------+-------------+--------+------------+
| c    | LENGTH(c) | c = &#39; &#39; | LENGTH(&#39; &#39;) | c = &#39;&#39; | LENGTH(&#39;&#39;) |
+------+-----------+---------+-------------+--------+------------+
| a    |         1 |       0 |           1 |      0 |          0 |
| b    |         1 |       0 |           1 |      0 |          0 |
|      |         0 |       1 |           1 |      1 |          0 |
+------+-----------+---------+-------------+--------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I add a comparison with the empty string &lt;strong&gt;&#39;&#39;&lt;/strong&gt;, and it turns out the space character equals both a space character and the empty string, though their lengths do not agree.&lt;/p&gt;
&lt;p&gt;Now, I usually don&#39;t bother with &lt;strong&gt;CHAR&lt;/strong&gt; types, and prefer the &lt;strong&gt;VARCHAR&lt;/strong&gt; or &lt;strong&gt;TEXT&lt;/strong&gt; types, but every once in a while I do use it. Most recently, in a stored routine code in &lt;a href=&#34;http://code.google.com/p/common-schema&#34;&gt;common_schema&lt;/a&gt;, I iterate &amp;amp; parse some text. I iterated the text char by char, and declared a local&lt;strong&gt; CHAR(1)&lt;/strong&gt; variable to assign iterated value to. It sure bit me when I got to a space character which insisted it was the empty text (indicating end of iteration).&lt;/p&gt;
&lt;p&gt;Of course the immediate and correct solution was to change the local variable&#39;s type to &lt;strong&gt;VARCHAR(1)&lt;/strong&gt; instead. But the time it consumed to find the problem... Be warned and be aware!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>23:59:59 is not the end of the day. No, really!</title>
      <link>/blog/mysql/235959-is-not-the-end-of-the-day-no-really/</link>
      <pubDate>Wed, 27 Jul 2011 20:16:00 +0000</pubDate>
      
      <guid>/blog/mysql/235959-is-not-the-end-of-the-day-no-really/</guid>
      <description>&lt;p&gt;How would you check whether some &lt;strong&gt;TIMESTAMP&lt;/strong&gt; column falls within a given day, say &lt;strong&gt;July 26th, 2011&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;This is a question I tend to ask students, and usually I get the same range of answers. Some are wrong; some cannot utilize an index, some are correct, and some are &lt;em&gt;temporarily correct&lt;/em&gt;. I wish to take a closer look at the last. Such an answer looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM some_table WHERE timstamp_column BETWEEN &#39;2011-07-26 00:00:00&#39; AND &#39;2011-07-26 23:59:59&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yikes! I get my allergies when I see this one.&lt;/p&gt;
&lt;p&gt;Technically this seems correct. And it seems to work so far for people. There are two things that disturb me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&#39;23:59:59&#39;&lt;/strong&gt; refers to the beginning of the last second of the day. This means a full second is missing in concept. No one would write such a code on a C, Java or PHP application: that would be a newbie&#39;s mistake. But people feel at ease doing it with SQL&lt;/li&gt;
&lt;p&gt;Of course, this works when timestamps are in a one second resolution. Which leads me to:&lt;/p&gt;
&lt;li&gt;One second resolution is a temporary issue. Already &lt;a href=&#34;http://kb.askmonty.org/en/what-is-mariadb-53&#34;&gt;MariaDB 5.3&lt;/a&gt; presents with microsecond support for NOW() and TIMESTAMP, TIME and DATETIME columns. Sometime in the not-so-far future the standard MySQL distribution will have that, too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!--more--&gt;Soon people will start losing data, reporting wrong numbers, perform incorrect aggregations. My advise:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;grep -iR &#34;23:59:59&#34; /path/to/application/code/*&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And get rid of it. A good alternative would be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM some_table WHERE timstamp_column &amp;gt;= DATE(&#39;2011-07-26&#39;) AND timestamp_column &amp;lt; (DATE(&#39;2011-07-26&#39;) + INTERVAL 1 DAY)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Why use all this INTERVAL stuff? Think &lt;strong&gt;28/29/30/31&lt;/strong&gt; days in month and get the answer)&lt;/p&gt;
&lt;p&gt;And do not use &lt;strong&gt;LIKE &#39;2011-07-26 %&#39;&lt;/strong&gt;. Read &lt;a href=&#34;http://code.openark.org/blog/mysql/beware-of-implicit-casting&#34;&gt;this&lt;/a&gt; if you&#39;re not sure why.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Announcing common_schema: common views &amp; routines for MySQL</title>
      <link>/blog/mysql/announcing-common_schema-common-views-routines-for-mysql/</link>
      <pubDate>Wed, 13 Jul 2011 06:25:24 +0000</pubDate>
      
      <guid>/blog/mysql/announcing-common_schema-common-views-routines-for-mysql/</guid>
      <description>&lt;p&gt;Today I have released &lt;a title=&#34;common_schema&#34; href=&#34;http://code.openark.org/forge/common_schema&#34;&gt;common_schema&lt;/a&gt;, a utility schema for MySQL which includes many views and functions, and is aimed to be installed on any MySQL server.&lt;/p&gt;
&lt;h4&gt;What does it do?&lt;/h4&gt;
&lt;p&gt;There are views answering for all sorts of useful information: stuff related to schema analysis, data dimensions, monitoring, processes &amp;amp; transactions, security, internals... There are basic functions answering for common needs.&lt;/p&gt;
&lt;p&gt;Some of the views/routines simply formalize those queries we tend to write over and over again. Others take the place of external tools, answering complex questions via SQL and metadata. Still others help out with SQL generation.&lt;/p&gt;
&lt;p&gt;Here are a few highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Did you know you can work out &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/global_status_diff_nonzero.html&#34;&gt;simple monitoring&lt;/a&gt; of your server with a &lt;em&gt;query&lt;/em&gt;?  There&#39;s a view to do that for you.&lt;/li&gt;
&lt;li&gt;How about showing just &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/processlist_top.html&#34;&gt;the good parts of the processlist&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Does your schema have &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/redundant_keys.html&#34;&gt;redundant keys&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Or InnoDB tables with &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/no_pk_innodb_tables.html&#34;&gt;no PRIMARY KEY&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Is AUTO_INCREMENT &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/auto_increment_columns.html&#34;&gt;running out of space&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Can I get the SQL statements to &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/sql_foreign_keys.html&#34;&gt;generate my FOREIGN KEYs&lt;/a&gt;? To drop them?&lt;/li&gt;
&lt;li&gt;And can we finally get &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/sql_show_grants.html&#34;&gt;SHOW GRANTS for all accounts&lt;/a&gt;, and as an &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/sql_grants.html&#34;&gt;SQL query&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Ever needed a &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/general_functions.html#crc64&#34;&gt;64 bit CRC function&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;And aren&#39;t you tired of writing the cumbersome SUBSTRING_INDEX(SUBSTRING_INDEX(str, &#39;,&#39;, 3), &#39;,&#39;, -1)? &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/string_functions.html#split_token&#34;&gt;There&#39;s an alternative&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&#39;s more. Take a look at the &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/introduction.html&#34;&gt;common_schema documentation&lt;/a&gt; for full listing. And it&#39;s evolving: I&#39;ve got quite a few ideas already for future components.&lt;/p&gt;
&lt;p&gt;Some of these views rely on heavyweight INFORMATION_SCHEMA tables. You should be aware of the impact and &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/risks.html&#34;&gt;risks&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;What do I need to install?&lt;/h4&gt;
&lt;p&gt;There&#39;s no script or executable file. It&#39;s just a schema. The distribution in an SQL file which generates &lt;em&gt;common_schema&lt;/em&gt;. Much like a dump file.&lt;/p&gt;
&lt;h4&gt;&lt;!--more--&gt;What are the system requirements?&lt;/h4&gt;
&lt;p&gt;It&#39;s just between you and your MySQL. There are currently three distribution files, dedicated for different versions of MySQL (and allowing for increased functionality):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;common_schema_mysql_51&lt;/strong&gt;: fits all MySQL &amp;gt;= 5.1 distributions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;common_schema_innodb_plugin&lt;/strong&gt;: fits MySQL &amp;gt;= 5.1, with InnoDB plugin + INFORMATION_SCHEMA tables enabled&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;common_schema_percona_server&lt;/strong&gt;: fits Percona Server &amp;gt;= 5.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to the &lt;a rel=&#34;nofollow&#34; href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/download.html&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h4&gt;What are the terms of use?&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; is released under the &lt;a href=&#34;http://www.opensource.org/licenses/bsd-license.php&#34;&gt;BSD license&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Where can I download it?&lt;/h4&gt;
&lt;p&gt;On the &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;common_schema project page&lt;/a&gt;. Enjoy it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TIMESTAMP vs. DATETIME, which should I be using?</title>
      <link>/blog/mysql/timestamp-vs-datetime-which-should-i-be-using/</link>
      <pubDate>Sun, 22 May 2011 06:11:47 +0000</pubDate>
      
      <guid>/blog/mysql/timestamp-vs-datetime-which-should-i-be-using/</guid>
      <description>&lt;p&gt;They both look the same, have roughly the same use. Nevertheless, they differ in many respects. I&#39;ll note the difference, and note a few pitfalls and peculiarities.&lt;/p&gt;
&lt;h4&gt;Range&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TIMESTAMP&lt;/strong&gt; starts with the &lt;a href=&#34;http://en.wikipedia.org/wiki/Unix_time&#34;&gt;epoch&lt;/a&gt;, &lt;strong&gt;&#39;1970-01-01 00:00:01&#39;&lt;/strong&gt; UTC and ends with &lt;strong&gt;&#39;2038-01-19 03:14:07&#39;&lt;/strong&gt; UTC. This is all very nice today, and may actually hold up till our retirement, but the younger readers may yet have to deal with the &lt;strong&gt;Bug2K+38&lt;/strong&gt;™, certain to arrive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DATETIME&lt;/strong&gt; starts with &lt;strong&gt;&#39;1000-01-01 00:00:00&#39;&lt;/strong&gt; and lasts up to &lt;strong&gt;&#39;9999-12-31 23:59:59&#39;&lt;/strong&gt;. More on that later.&lt;/p&gt;
&lt;p&gt;In respect of range, your current event logs may well use a &lt;strong&gt;TIMESTAMP&lt;/strong&gt; value, while your grandfather&#39;s and granddaughter&#39;s birth dates may require &lt;strong&gt;DATETIME&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In general I would suggest that anything that relates to &lt;em&gt;now&lt;/em&gt;, can be a &lt;strong&gt;TIMESTAMP&lt;/strong&gt;. A new entry is added? It is added &lt;em&gt;now&lt;/em&gt;. It can be represented by a &lt;strong&gt;TIMESTAMP&lt;/strong&gt;. Anything has an expiry time of a few minutes, perhaps a few days or a month? You&#39;ll be safe using it up till late &lt;strong&gt;2037&lt;/strong&gt;. Anything else had better use a &lt;strong&gt;DATETIME&lt;/strong&gt;. In particular, dates relating to issues such as birth, insurance, the market etc. fall into this category.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;History&lt;/em&gt;, however, does not even hold up with &lt;strong&gt;DATETIME&lt;/strong&gt;. Rome fell long before &lt;strong&gt;MIN(DATETIME)&lt;/strong&gt;. You will have to manage your own. Not even &lt;strong&gt;YEAR&lt;/strong&gt; will help you out.&lt;/p&gt;
&lt;h4&gt;Storage&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TIMESTAMP&lt;/strong&gt; makes for &lt;strong&gt;4&lt;/strong&gt; bytes. &lt;strong&gt;DATETIME&lt;/strong&gt; makes for &lt;strong&gt;8&lt;/strong&gt; bytes. Now that we have this behind us, let&#39;s see why.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Internal representation&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;TIMESTAMP&lt;/strong&gt; is merely the number of elapsed seconds since the &lt;em&gt;epoch&lt;/em&gt;. It is a number. Not only is this a number, it is an incrementing number, and without gaps. Ever ascending. It actually equals the &lt;strong&gt;UNIX_TIMESTAMP()&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;DATETIME&lt;/strong&gt; is more of an oddity. From the manual:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DATETIME&lt;/code&gt;: Eight bytes:
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;A four-byte integer packed as               &lt;code&gt;YYYY&lt;/code&gt;×10000 +               &lt;code&gt;MM&lt;/code&gt;×100 +               &lt;code&gt;DD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A four-byte integer packed as               &lt;code&gt;HH&lt;/code&gt;×10000 +               &lt;code&gt;MM&lt;/code&gt;×100 +               &lt;code&gt;SS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Huh?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s nothing sequential about a &lt;strong&gt;DATETIME&lt;/strong&gt;. The value which follows &lt;strong&gt;20110307095159&lt;/strong&gt; is &lt;strong&gt;20110307095200&lt;/strong&gt;. It&#39;s like the string representation without any delimiters. See the following (ignore the fraction, it&#39;s not really there):&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mysql-5.1.51&amp;gt; SELECT NOW()+0;
+-----------------------+
| NOW()+0               |
+-----------------------+
| 20110307095238.000000 |
+-----------------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The implication of this internal representation is that conversions must be made back and forth. When you want to add &lt;strong&gt;5&lt;/strong&gt; seconds to a &lt;strong&gt;DATETIME&lt;/strong&gt;, MySQL cannot simply add &lt;strong&gt;5&lt;/strong&gt; to some number, but must make for a more complicated calculation.&lt;/p&gt;
&lt;h4&gt;Peculiarities&lt;/h4&gt;
&lt;p&gt;Now here&#39;s a question: why does &lt;strong&gt;DATETIME&lt;/strong&gt; start with &lt;strong&gt;&#39;1000-01-01 00:00:00&#39;&lt;/strong&gt;? Can you provide with a convincing argument? The only argument I can find is hardly convincing.&lt;/p&gt;
&lt;p&gt;Did you ever need to type in a password with your phone? Say, for your Credit Card company, or your Bank? Did you get recorded instructions saying &#34;&lt;em&gt;You must type six digits. You must not repeat the same digits three successive times&lt;/em&gt;&#34;? That&#39;s somewhat nice, and probably a good advice. Did you ever get told &#34;&lt;em&gt;The first digit must not be &lt;strong&gt;0&lt;/strong&gt;&lt;/em&gt;&#34;? That&#39;s just &lt;em&gt;stupid&lt;/em&gt;. This means we&#39;re giving up on &lt;strong&gt;100,000&lt;/strong&gt; valid passwords, thereby reducing our search space by &lt;strong&gt;10%&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;I suspect in both cases the reasoning is the same: if you start with a &lt;strong&gt;0&lt;/strong&gt;, and we represent it as a number, it won&#39;t make up for the same number of digits we intended it to.&lt;/p&gt;
&lt;p&gt;In the case of your Credit Card company, there is no excuse. What&#39;s the problem with padding with zeros till you make those six digits?&lt;/p&gt;
&lt;p&gt;In the case of MySQL&#39;s &lt;strong&gt;DATETIME&lt;/strong&gt;, I can see a weak reasoning. Read &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/datetime.html&#34;&gt;this page on the docs&lt;/a&gt; to find out that a &lt;strong&gt;DATETIME&lt;/strong&gt; can be represented in many forms, and can be automatically deduced from a string in many formats. Both strings &lt;strong&gt;&#39;110307095100&#39;&lt;/strong&gt; and &lt;strong&gt;&#39;20110307095100&#39;&lt;/strong&gt; make for the same &lt;strong&gt;DATETIME&lt;/strong&gt; value. It is based on the number of characters in your text, that the parsing decides how to act.&lt;/p&gt;
&lt;p&gt;The fact the first year is &lt;strong&gt;1000&lt;/strong&gt; makes the number of digits predictable.&lt;/p&gt;
&lt;h4&gt;My thoughts?&lt;/h4&gt;
&lt;p&gt;I don&#39;t see why I should care about automatically converting texts of different formats to a &lt;strong&gt;DATETIME&lt;/strong&gt;. As a programmer, I&#39;m perfectly content with strict typing. I don&#39;t mind passing around only texts of the form &lt;strong&gt;&#39;YYYY-MM-DD HH:MM:SS&#39;&lt;/strong&gt; (or, better yet, passing date objects and letting my connector do the translation). Moreover, I prefer it that way! It makes me feel safer, that I haven&#39;t passed a wrong text by mistake, to be silently accepted.&lt;/p&gt;
&lt;p&gt;For this reason I don&#39;t like the idea of losing the ability to use &lt;strong&gt;DATETIME&lt;/strong&gt; on &lt;strong&gt;1,000&lt;/strong&gt; lost years. As far as I can tell, this is a MySQL specific issue; there is no &lt;strong&gt;ANSI SQL&lt;/strong&gt; for &lt;strong&gt;DATETIME&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;UPDATE&lt;/strong&gt;:  Sheeri &lt;a href=&#34;http://palominodb.com/blog/2011/05/23/datetime-vs-timestamp&#34;&gt;notes&lt;/a&gt; the biggest difference: &lt;strong&gt;DATETIME&lt;/strong&gt; does not support time zones. A good discussion is also available on &lt;a href=&#34;http://bit.ly/oursql046&#34;&gt;OurSQL&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implicit casting you don&#39;t want to see around</title>
      <link>/blog/mysql/implicit-casting-you-dont-want-to-see-around/</link>
      <pubDate>Wed, 07 Jul 2010 10:53:37 +0000</pubDate>
      
      <guid>/blog/mysql/implicit-casting-you-dont-want-to-see-around/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://code.openark.org/blog/mysql/beware-of-implicit-casting&#34;&gt;Beware of implicit casting&lt;/a&gt;, I have outlined the dangers of implicit casting. Here&#39;s a few more real-world examples I have tackled:&lt;/p&gt;
&lt;h4&gt;Number-String comparisons&lt;/h4&gt;
&lt;p&gt;Much like in programming languages, implicit casting is made to numbers when at least one of the arguments is a number. Thus:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
mysql&amp;gt; SELECT 3 = &#39;3.0&#39;;
+-----------+
| 3 = &#39;3.0&#39; |
+-----------+
|         1 |
+-----------+
1 row in set (0.00 sec)
mysql&amp;gt; SELECT &#39;3&#39; = &#39;3.0&#39;;
+-------------+
| &#39;3&#39; = &#39;3.0&#39; |
+-------------+
|           0 |
+-------------+
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;The second query consists of pure strings comparison. It has no way to determine that number comparison should be made.&lt;/p&gt;
&lt;h4&gt;Direct DATE arithmetics&lt;/h4&gt;
&lt;p&gt;The first query &lt;em&gt;seems&lt;/em&gt; to work, but is completely incorrect. The second explains why. The third is a total mess.&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
mysql&amp;gt; SELECT DATE(&#39;2010-01-01&#39;)+3;
+----------------------+
| DATE(&#39;2010-01-01&#39;)+3 |
+----------------------+
|             20100104 |
+----------------------+
1 row in set (0.00 sec)
mysql&amp;gt; SELECT DATE(&#39;2010-01-01&#39;)-3;
+----------------------+
| DATE(&#39;2010-01-01&#39;)-3 |
+----------------------+
|             20100098 |
+----------------------+
1 row in set (0.00 sec)
mysql&amp;gt; SELECT &#39;2010-01-01&#39; - 3;
+------------------+
| &#39;2010-01-01&#39; - 3 |
+------------------+
|             2007 |
+------------------+
1 row in set, 1 warning (0.00 sec)
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4&gt;Number-String comparisons, big integers&lt;/h4&gt;
&lt;p&gt;Look at the following crazy comparisons:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
mysql&amp;gt; SELECT 1234 = &#39;1234&#39;;
+---------------+
| 1234 = &#39;1234&#39; |
+---------------+
|             1 |
+---------------+
mysql&amp;gt; SELECT 123456789012345678 = &#39;123456789012345678&#39;;
+-------------------------------------------+
| 123456789012345678 = &#39;123456789012345678&#39; |
+-------------------------------------------+
|                                         0 |
+-------------------------------------------+
mysql&amp;gt; SELECT 123456789012345678 = &#39;123456789012345677&#39;;
+-------------------------------------------+
| 123456789012345678 = &#39;123456789012345677&#39; |
+-------------------------------------------+
|                                         1 |
+-------------------------------------------+
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;The amazing result of the last two comparisons may strike as odd. Actually, it may strike as a bug, and indeed when a customer approached me with this behavior I was at loss for words. But this is &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/type-conversion.html&#34;&gt;documented&lt;/a&gt;. The manual describes the cases for casting, then states: &#34;... In all other cases, the arguments are compared &lt;em&gt;as             floating-point (real) numbers&lt;/em&gt;. ...&#34;&lt;/p&gt;
&lt;h4&gt;Lessons learned:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Be careful when comparing strings with floating point values. Matching depends on how both are represented.&lt;/li&gt;
&lt;li&gt;Avoid converting temporal types to strings when doing date manipulation.&lt;/li&gt;
&lt;li&gt;Avoid direct math on temporal types.&lt;/li&gt;
&lt;li&gt;Avoid casting &lt;strong&gt;BIGINT&lt;/strong&gt;s represented by strings. Casting will turn out to use &lt;strong&gt;FLOAT&lt;/strong&gt;s and may be incorrect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the proper data types for your data&#39;s representation. When dealing with numbers, use numbers. When dealing with temporal values, use temporal types.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Choosing MySQL boolean data types</title>
      <link>/blog/mysql/choosing-mysql-boolean-data-types/</link>
      <pubDate>Thu, 03 Jun 2010 07:24:11 +0000</pubDate>
      
      <guid>/blog/mysql/choosing-mysql-boolean-data-types/</guid>
      <description>&lt;p&gt;How do you implement &lt;strong&gt;True&lt;/strong&gt;/&lt;strong&gt;False&lt;/strong&gt; columns?&lt;/p&gt;
&lt;p&gt;There are many ways to do it, each with its own pros and cons.&lt;/p&gt;
&lt;h4&gt;ENUM&lt;/h4&gt;
&lt;p&gt;Create you column as &lt;strong&gt;ENUM(&#39;F&#39;, &#39;T&#39;)&lt;/strong&gt;, or &lt;strong&gt;ENUM(&#39;N&#39;,&#39;Y&#39;)&lt;/strong&gt; or &lt;strong&gt;ENUM(&#39;0&#39;, &#39;1&#39;)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is the method used in the &lt;strong&gt;mysql&lt;/strong&gt; tables (e.g. &lt;strong&gt;mysql.user&lt;/strong&gt; privileges table). It&#39;s very simple and intuitive. It truly restricts the values to just two options, which serves well. It&#39;s compact (just one byte).&lt;/p&gt;
&lt;p&gt;A couple disadvantages to this method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enums are represented by numerical values (which is good) and start with &lt;strong&gt;1&lt;/strong&gt; instead of &lt;strong&gt;0&lt;/strong&gt;. This means &lt;strong&gt;&#39;F&#39;&lt;/strong&gt; is &lt;strong&gt;1&lt;/strong&gt;, and &lt;strong&gt;&#39;T&#39;&lt;/strong&gt; is &lt;strong&gt;2&lt;/strong&gt;, and they both translate to &lt;strong&gt;True&lt;/strong&gt; when directly used in a booleanic expression (e.g. &lt;strong&gt;IF(val, &#39;True&#39;, &#39;False&#39;)&lt;/strong&gt; always yields &lt;strong&gt;&#39;True&#39;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;There&#39;s no real convention. Is it &lt;strong&gt;&#39;Y&#39;/&#39;N&#39;&lt;/strong&gt;? &lt;strong&gt;&#39;T&#39;/&#39;F&#39;&lt;/strong&gt;? &lt;strong&gt;&#39;P&#39;/&#39;N&#39;&lt;/strong&gt;? &lt;strong&gt;&#39;1&#39;/&#39;0&#39;&lt;/strong&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;CHAR(1)&lt;/h4&gt;
&lt;p&gt;Simple again. Proposed values are, as before, &lt;strong&gt;&#39;F&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;T&#39;&lt;/strong&gt; etc. This time there&#39;s no way to limit the range of values. You cannot (in MySQL, unless using triggers) prevent an &#39;X&#39;.&lt;/p&gt;
&lt;p&gt;Watch out for the charset! If it&#39;s &lt;strong&gt;utf8&lt;/strong&gt; you pay with 3 bytes instead of just 1. And, again, &lt;strong&gt;&#39;T&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;F&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;Y&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;N&#39;&lt;/strong&gt; values all evaluate as &lt;strong&gt;True&lt;/strong&gt;. It is possible to use the zero-valued character, but it defeats the purpose of using &lt;strong&gt;CHAR&lt;/strong&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;CHAR(0)&lt;/h4&gt;
&lt;p&gt;Many are unaware that it&#39;s even valid to make this definition. What does it mean? Take a look at the following table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE `t1` (
 `bval` char(0) DEFAULT NULL
);
mysql&amp;gt; INSERT INTO t1 VALUES (&#39;&#39;);
mysql&amp;gt; INSERT INTO t1 VALUES (&#39;&#39;);
mysql&amp;gt; INSERT INTO t1 VALUES (NULL);

mysql&amp;gt; SELECT * FROM t1;
+------+
| bval |
+------+
|      |
|      |
| NULL |
+------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;NULLable columns cause for an additional storage per row. There&#39;s one bit per NULLable column which notes down whether the column&#39;s value is NULL or not. If you only have one NULLable column, you must pay for this bit with 1 byte. If you have two NULLable columns, you still only pay with 1 byte.&lt;/p&gt;
&lt;p&gt;Furthermore:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT bval IS NOT NULL FROM t1;
+------------------+
| bval IS NOT NULL |
+------------------+
|                1 |
|                1 |
|                0 |
+------------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So this plays somewhat nicely into booleanic expressions.&lt;/p&gt;
&lt;p&gt;However, this method is unintuitive and confusing. I personally don&#39;t use it.&lt;/p&gt;
&lt;h4&gt;TINYINT&lt;/h4&gt;
&lt;p&gt;With integer values, we can get down to &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;. With &lt;strong&gt;TINYINT&lt;/strong&gt;, we only pay with 1 byte of storage. As with &lt;strong&gt;CHAR(1)&lt;/strong&gt;, we cannot prevent anyone from INSERTing other values. But that doesn&#39;t really matter, if we&#39;re willing to accept that 0 evaluates as &lt;strong&gt;False&lt;/strong&gt;, and &lt;em&gt;all other values&lt;/em&gt; as &lt;strong&gt;True&lt;/strong&gt;. In this case, boolean expressions work very well with your column values.&lt;/p&gt;
&lt;h4&gt;BOOL/BOOLEAN&lt;/h4&gt;
&lt;p&gt;These are just synonyms to &lt;strong&gt;TINYINT&lt;/strong&gt;. I like to define my boolean values as such. Alas, when issuing a &lt;strong&gt;SHOW CREATE TABLE&lt;/strong&gt; the definition is just a normal &lt;strong&gt;TINYINT&lt;/strong&gt;. Still, it is clearer to look at if you&#39;re storing your table schema under your version control.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>But I DO want MySQL to say &#34;ERROR&#34;!</title>
      <link>/blog/mysql/but-i-do-want-mysql-to-say-error/</link>
      <pubDate>Fri, 12 Mar 2010 06:53:28 +0000</pubDate>
      
      <guid>/blog/mysql/but-i-do-want-mysql-to-say-error/</guid>
      <description>&lt;p&gt;MySQL is known for its willingness to accept invalid queries, data values. It can silently commit your transaction, truncate your data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; with a small &lt;strong&gt;group_concat_max_len&lt;/strong&gt; setting? Your result will be silently truncated (make sure to check the warnings though).&lt;/li&gt;
&lt;li&gt;Calling &lt;strong&gt;CREATE &lt;span style=&#34;text-decoration: line-through;&#34;&gt;TEMPORARY&lt;/span&gt; TABLE&lt;/strong&gt;? You get &lt;a href=&#34;http://www.joinfu.com/2010/03/a-follow-up-on-the-sql-puzzle/&#34;&gt;silent commit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Issuing a &lt;strong&gt;ROLLBACK&lt;/strong&gt; on non-transactional involved engines? Have a warning; no error.&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;LOCK IN SHARE MODE&lt;/strong&gt; on non transactional tables? Not a problem. Nothing reported.&lt;/li&gt;
&lt;li&gt;Adding a &lt;strong&gt;FOREIGN KEY&lt;/strong&gt; on a MyISAM table? Good for you; no action actually taken.&lt;/li&gt;
&lt;li&gt;Inserting &lt;strong&gt;300&lt;/strong&gt; to a &lt;strong&gt;TINYINT&lt;/strong&gt; column in a relaxed &lt;strong&gt;sql_mode&lt;/strong&gt;? Give me &lt;strong&gt;255&lt;/strong&gt;, I&#39;ll silently drop the remaining &lt;strong&gt;45&lt;/strong&gt;. I owe you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Warnings and errors&lt;/h4&gt;
&lt;p&gt;It would be nice to:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have an &lt;strong&gt;auto_propagate_warning_to_error&lt;/strong&gt; server variable (global/session/both) which, well, does what it says.&lt;/li&gt;
&lt;li&gt;Have an &lt;strong&gt;i_am_really_not_a_dummy&lt;/strong&gt; server variable which implies stricter checks for all the above and prevents you from doing with &lt;em&gt;anything&lt;/em&gt; that may be problematic (or rolls back your transactions on your invalid actions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connectors may be nice enough to propagate warnings to errors - that&#39;s good. But not enough: since data is already committed in MySQL.&lt;/p&gt;
&lt;p&gt;If I understand correctly, and maybe it&#39;s just a myth, it all relates to the times where MySQL had interest in a widespread adoption across the internet, in such way that it does not interfere too much with the users (hence leading to the common myth that &#34;MySQL just works out of the box and does not require me to configure or understand anything&#34;).&lt;/p&gt;
&lt;p&gt;MySQL is a database system, and is now widespread, and is used by serious companies and products. It is time to stop play nice to everyone and provide with strict integrity -- or, be nice to everyone, just allow me to specify what &#34;nice&#34; means for me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Useful temporal functions &amp; queries</title>
      <link>/blog/mysql/useful-temporal-functions-queries/</link>
      <pubDate>Tue, 08 Dec 2009 11:46:24 +0000</pubDate>
      
      <guid>/blog/mysql/useful-temporal-functions-queries/</guid>
      <description>&lt;p&gt;Here&#39;s a complication of some common and useful time &amp;amp; date calculations and equations. Some, though very simple, are often misunderstood, leading to inefficient or incorrect implementations.&lt;/p&gt;
&lt;p&gt;There are many ways to solve such problems. I&#39;ll present my favorites.&lt;/p&gt;
&lt;h4&gt;Querying for time difference&lt;/h4&gt;
&lt;p&gt;Given two timestamps: &lt;em&gt;ts1&lt;/em&gt; (older) and &lt;em&gt;ts2&lt;/em&gt; (newer), how much time has passed between them?&lt;/p&gt;
&lt;p&gt;One can use &lt;strong&gt;TIMEDIFF()&lt;/strong&gt; &amp;amp; &lt;strong&gt;DATEDIFF()&lt;/strong&gt;, or compare two &lt;strong&gt;UNIX_TIMESTAMP()&lt;/strong&gt; values. My personal favorite is to use &lt;strong&gt;TIMESTAMPDIFF()&lt;/strong&gt;. Reason being that I&#39;m usually interested in a specific metric, like the number of hours which have passed, or the number of days, disregarding the smaller minute/second resolution. Which allows one to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TIMESTAMPDIFF(HOUR, ts1, ts2)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Take, for example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TIMESTAMPDIFF(MONTH, &#39;2008-10-07 00:00:00&#39;, &#39;2009-12-06 00:00:00&#39;)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The function correctly identifies the number of days per month, and provides with &lt;strong&gt;13&lt;/strong&gt;, being the truncated number of full months.&lt;/p&gt;
&lt;h4&gt;Doing arithmetics&lt;/h4&gt;
&lt;p&gt;One can use &lt;strong&gt;TIMESTAMPADD()&lt;/strong&gt;, or &lt;strong&gt;DATE_SUB()&lt;/strong&gt;, but, again, when dealing with specific resolutions, I find &#34;&lt;strong&gt;+ INTERVAL&lt;/strong&gt;&#34; to be the most convenient:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT ts1 + INTERVAL 10 HOUR&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!--more--&gt;This allows me to only add by a specific unit: &lt;strong&gt;SECOND&lt;/strong&gt;, &lt;strong&gt;MINUTE&lt;/strong&gt;, &lt;strong&gt;HOUR&lt;/strong&gt;, &lt;strong&gt;DAY&lt;/strong&gt;, &lt;strong&gt;WEEK&lt;/strong&gt;, etc. Many times I find this is exactly what I want.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TIMESTAMP(&#39;2009-12-06 20:14:52&#39;) + INTERVAL 4 WEEK AS ts2;
+---------------------+
| ts2                 |
+---------------------+
| 2010-01-03 20:14:52 |
+---------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Checking if a timestamp is in a given date&lt;/h4&gt;
&lt;p&gt;This one is very popular, and most poorly treated.&lt;/p&gt;
&lt;p&gt;Say we have a &lt;strong&gt;sales&lt;/strong&gt; table, with some &lt;strong&gt;ts&lt;/strong&gt; column. We want to SELECT all sales on Dec 25th, 2008. I&#39;ve seen so many solutions, many in writing. Let&#39;s look at them:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wrong:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM sales WHERE ts BETWEEN &#39;2008-12-25&#39; AND &#39;2008-12-26&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why is this wrong? Because &lt;strong&gt;BETWEEN&lt;/strong&gt; is inclusive. A sale taking place on &#39;&lt;strong&gt;2008-12-26 00:00:00&lt;/strong&gt;&#39; will match our condition.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Correct but inefficient:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM sales WHERE DATE(ts) = DATE(&#39;2008-12-25&#39;)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why is this inefficient? Because a function is used over the &lt;strong&gt;ts&lt;/strong&gt; column. This disables use of any index we might have on &lt;strong&gt;ts&lt;/strong&gt;, leading to full table scan.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Correct but inefficient:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM sales WHERE ts LIKE &#39;2008-12-25 %&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why is this inefficient? Because a function is used over the &lt;strong&gt;ts&lt;/strong&gt; column. Can you see it? It&#39;s an implicit CAST function, which casts the TIMESTAMP value to a character value, so as to perform a string comparison.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Correct but ugh:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM sales WHERE ts BETWEEN &#39;2008-12-25 00:00:00&#39; AND &#39;2008-12-25 23:59:59&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why is it ugh? Because, well, ...Ugh!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Correct:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM sales WHERE ts &amp;gt;= DATE(&#39;2008-12-25&#39;) AND ts &amp;lt; DATE(&#39;2008-12-26&#39;)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This allows for indexing to be used properly. The &lt;strong&gt;DATE()&lt;/strong&gt; casting is not strictly required here, but is generally safer.&lt;/p&gt;
&lt;h4&gt;Truncating to last midnight&lt;/h4&gt;
&lt;p&gt;Surprisingly, this simple question sees a lot of incorrect solution attempts. The quickest, safest way to get &#34;last midnight&#34; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT DATE(ts)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or, if you like to be stricter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TIMESTAMP(DATE(ts))&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TIMESTAMP(DATE(&#39;2009-12-06 20:14:52&#39;)) AS midnight;
+---------------------+
| midnight            |
+---------------------+
| 2009-12-06 00:00:00 |
+---------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Truncating to last round hour&lt;/h4&gt;
&lt;p&gt;Similar to the above, but utilizes arithmetic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT DATE(ts) + INTERVAL HOUR(ts) HOUR&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT ts, DATE(ts) + INTERVAL HOUR(ts) HOUR FROM sales LIMIT 5;
+---------------------+-----------------------------------+
| ts                  | DATE(ts) + INTERVAL HOUR(ts) HOUR |
+---------------------+-----------------------------------+
| 2009-01-05 05:17:00 | 2009-01-05 05:00:00               |
| 2009-03-09 00:49:00 | 2009-03-09 00:00:00               |
| 2009-02-20 00:14:00 | 2009-02-20 00:00:00               |
| 2009-02-14 22:42:00 | 2009-02-14 22:00:00               |
| 2009-03-14 04:50:00 | 2009-03-14 04:00:00               |
+---------------------+-----------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Round to closest round hour&lt;/h4&gt;
&lt;p&gt;Taking the classic round() implementation, which states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;round(x) := int(x + 0.5)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;We write:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT DATE(ts + INTERVAL 30 MINUTE) + INTERVAL HOUR(ts + INTERVAL 30 MINUTE) HOUR&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT ts, DATE(ts + INTERVAL 30 MINUTE) + INTERVAL HOUR(ts + INTERVAL 30 MINUTE) HOUR AS rounded FROM sales ORDER BY HOUR(ts) DESC LIMIT 5;
+---------------------+---------------------+
| ts                  | rounded             |
+---------------------+---------------------+
| 2009-03-25 23:54:00 | 2009-03-26 00:00:00 |
| 2009-03-13 23:45:00 | 2009-03-14 00:00:00 |
| 2009-01-29 22:53:00 | 2009-01-29 23:00:00 |
| 2009-01-18 22:22:00 | 2009-01-18 22:00:00 |
| 2009-01-14 22:16:00 | 2009-01-14 22:00:00 |
+---------------------+---------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Count number of midnights between two timestamps, inclusive&lt;/h4&gt;
&lt;p&gt;Given two timestamps, &lt;em&gt;ts1&lt;/em&gt; and &lt;em&gt;ts2&lt;/em&gt;, what is the number of midnights between them?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TIMESTAMPDIFF(DAY, DATE(ts1), ts2) + IF(DATE(ts1) = ts1, 1, 0);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT ts, ts2, TIMESTAMPDIFF(DAY, DATE(ts), ts2) + IF(DATE(ts) = ts, 1, 0) AS number_of_midnights FROM sales LIMIT 10;
+---------------------+---------------------+---------------------+
| ts                  | ts2                 | number_of_midnights |
+---------------------+---------------------+---------------------+
| 2009-01-05 05:17:00 | 2009-01-05 19:17:00 |                   0 |
| 2009-03-09 00:49:00 | 2009-03-11 15:49:00 |                   2 |
| 2009-02-20 00:14:00 | 2009-02-23 02:14:00 |                   3 |
| 2009-02-14 22:42:00 | 2009-02-18 07:42:00 |                   4 |
| 2009-03-14 04:50:00 | 2009-03-17 16:50:00 |                   3 |
| 2009-02-16 04:01:00 | 2009-02-19 08:01:00 |                   3 |
| 2009-01-20 05:36:00 | 2009-01-21 08:36:00 |                   1 |
| 2009-02-07 15:57:00 | 2009-02-07 22:57:00 |                   0 |
| 2009-02-13 14:59:00 | 2009-02-15 22:59:00 |                   2 |
| 2009-01-11 03:02:00 | 2009-01-13 11:02:00 |                   2 |
+---------------------+---------------------+---------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Further notes&lt;/h4&gt;
&lt;p&gt;A full listing of temporal functions can be found on the &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html&#34;&gt;MySQL documentation&lt;/a&gt;. There&#39;s almost always more than one way to solve a problem. I&#39;ve seen (and done, in the past) many calculations done on the application side due to lack of familiarity with the available functions.&lt;/p&gt;
&lt;p&gt;Please share your own common solutions below!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Character sets: latin1 vs. ascii</title>
      <link>/blog/mysql/character-sets-latin1-vs-ascii/</link>
      <pubDate>Wed, 08 Jul 2009 09:39:02 +0000</pubDate>
      
      <guid>/blog/mysql/character-sets-latin1-vs-ascii/</guid>
      <description>&lt;p&gt;Unless specified otherwise, &lt;strong&gt;latin1&lt;/strong&gt; is the default character set in MySQL.&lt;/p&gt;
&lt;p&gt;What I usually find in schemes are columns which are either &lt;strong&gt;utf8&lt;/strong&gt; or &lt;strong&gt;latin1&lt;/strong&gt;. The &lt;strong&gt;utf8&lt;/strong&gt; columns being those which need to contain multilingual characters (user names, addresses, articles etc.), and &lt;strong&gt;latin1&lt;/strong&gt; column being all the rest (passwords, digests, email addresses, hard-coded values etc.)&lt;/p&gt;
&lt;p&gt;I find &lt;strong&gt;latin1&lt;/strong&gt; to be improper for such purposes and suggest that &lt;strong&gt;ascii&lt;/strong&gt; be used instead. The reason being that &lt;strong&gt;latin1&lt;/strong&gt; implies a European text (with swedish collation). It is unclear for an outsider, when finding a &lt;strong&gt;latin1&lt;/strong&gt; column, whether it should actually contain West European characters, or is it just being used for ascii text, utilizing the fact that a character in &lt;strong&gt;latin1&lt;/strong&gt; only requires 1 byte of storage.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Well, this is what the &lt;strong&gt;ascii&lt;/strong&gt; character set is for. When I see an &lt;strong&gt;ascii&lt;/strong&gt; column, I know for sure no West European characters are allowed; just the plain old a-zA-Z0-9 etc. It is clearer from the schema&#39;s definition what the stored values should be.&lt;/p&gt;
&lt;h4&gt;A note to MySQL&lt;/h4&gt;
&lt;p&gt;It&#39;s been long since the Swedish roots of the company have dictated defaults. New instances should default to either &lt;strong&gt;ascii&lt;/strong&gt; or  &lt;strong&gt;utf8&lt;/strong&gt; (the latter being the most common and space efficient unicode protocol): character sets that are locale-neutral. Really, how many people realize that when they &lt;strong&gt;ORDER BY&lt;/strong&gt; a text column, rows are sorted according to Swedish dictionary ordering?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The depth of an index: primer</title>
      <link>/blog/mysql/the-depth-of-an-index-primer/</link>
      <pubDate>Thu, 09 Apr 2009 05:55:08 +0000</pubDate>
      
      <guid>/blog/mysql/the-depth-of-an-index-primer/</guid>
      <description>&lt;p&gt;InnoDB and MyISAM use B+ and B trees for indexes (InnoDB also has internal hash index).&lt;/p&gt;
&lt;p&gt;In both these structures, the depth of the index is an important factor. When looking for an indexed row, a search is made on the index, from root to leaves.&lt;/p&gt;
&lt;p&gt;Assuming the index is not in memory, the depth of the index represents the minimal cost (in I/O operation) for an index based lookup. Of course, most of the time we expect large portions of the indexes to be cached in memory. Even so, the depth of the index is an important factor. The deeper the index is, the worse it performs: there are simply more lookups on index nodes.&lt;/p&gt;
&lt;p&gt;What affects the depth of an index?&lt;/p&gt;
&lt;p&gt;There are quite a few structural issues, but it boils down to two important factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The number of rows in the table: obviously, more rows leads to larger index, larger indexes grow in depth.&lt;/li&gt;
&lt;li&gt;The size of the indexed column(s). An index on an INT column can be expected to be shallower than an index on a CHAR(32) column (on a very small number of rows they may have the same depth, so we&#39;ll assume a large number of rows).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!--more--&gt;Of course, these two factors also affect the total size of the index, hence its disk usage, but I wish to concentrate on the index depth.&lt;/p&gt;
&lt;p&gt;Let&#39;s emphasize the second factor. It is best to index shorter columns, if that is possible. It is the reason behind using an index on a VARCHAR&#39;s prefix (e.g. KEY(email_address(16)). It is also a reason to use INT, instead of BIGINT columns for your primary key, when BIGINT is not required.&lt;/p&gt;
&lt;p&gt;The larger the indexed data type is (or the total size of data types for all columns in a combined index), the less values that can fit in an index node. The less values in a node, the more node splits occur; the more nodes are required to build the index. The less values in the node, the less &lt;em&gt;wide&lt;/em&gt; the index tree is. The less wide an index tree is, and the more nodes it has - the deeper it gets.&lt;/p&gt;
&lt;p&gt;So bigger data types lead to deeper trees. Deeper trees lead to more IO operations on lookup.&lt;/p&gt;
&lt;h4&gt;InnoDB&lt;/h4&gt;
&lt;p&gt;On InnoDB there&#39;s another issue: all tables are clustered by primary key. Any access to table data requires diving into, or traversing the primary key tree.&lt;/p&gt;
&lt;p&gt;On InnoDB, a secondary index (any index which is not the primary key) does not lead to table data. Instead, the &#34;data&#34; in the leaf nodes of a secondary index - are the primary key values.&lt;/p&gt;
&lt;p&gt;And so, when looking up a value on an InnoDB table using a secondary key, we first search the secondary key to retrieve the primary key value, then go to the primary key tree to retrieve the data.&lt;/p&gt;
&lt;p&gt;This means two index lookups, one of which is always the primary key.&lt;/p&gt;
&lt;p&gt;On InnoDB, it is therefore in particular important to keep the primary key small. Have small data types. Prefer an SMALLINT to INT, if possible. Prefer an INT to BIGINT, if possible. Prefer an integer value over some VARCHAR text.&lt;/p&gt;
&lt;p&gt;With long data types used in an InnoDB primary key, not only is the primary key index bloated (deep), but also every other index gets to be bloated, as the leaf values in all other indexes are those same long data types.&lt;/p&gt;
&lt;h4&gt;MyISAM&lt;/h4&gt;
&lt;p&gt;MyISAM does not use clustered trees, hence the primary key is just a regular unique key. All indexes are created equal and an index lookup only consists of a single index search. Therefore, two indexes do no affect one another, with the exception that they are competing on the same key cache.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL&#39;s character sets and collations demystified</title>
      <link>/blog/mysql/mysqls-character-sets-and-collations-demystified/</link>
      <pubDate>Mon, 08 Dec 2008 08:44:24 +0000</pubDate>
      
      <guid>/blog/mysql/mysqls-character-sets-and-collations-demystified/</guid>
      <description>&lt;p&gt;MySQL&#39;s character sets and collations are often considered as a mystery, and many users either completely disregard them and keep with the defaults, or set everything to UTF8.&lt;/p&gt;
&lt;p&gt;This post will attempt to shed some light on the mystery, and provide with some best practices for use with text columns with regard to character sets.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Character Sets&lt;/h4&gt;
&lt;p&gt;A thorough discussion of how the character sets have evolved through history is beyond the scope of this post. While the Unicode standard is gaining recognition, the &#34;older&#34; character sets are still around. Understanding the difference between Unicode and local character sets is crucial.&lt;/p&gt;
&lt;p&gt;Consider, for example, MySQL&#39;s &lt;strong&gt;&lt;code&gt;latin1&lt;/code&gt;&lt;/strong&gt; character set. In this character set there are 256 different characters, represented by one byte. The first 128 characters map to ASCII, the standard &#34;ABCabc012 dot comma&#34; set, of which most of this post is composed. The latter 128 characters in &lt;strong&gt;&lt;code&gt;latin1&lt;/code&gt;&lt;/strong&gt; are composed of West European specific characters, such as À, ë, õ, Ñ.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;&lt;code&gt;Name VARCHAR(60) CHARSET latin1&lt;/code&gt;&lt;/strong&gt; column can describe names with West European characters. But it cannot describe Russian or Hebrew names. To represent a name in Hebrew, you&#39;d need the &lt;strong&gt;&lt;code&gt;hebrew&lt;/code&gt;&lt;/strong&gt; charset (ISO 8859-8), in which the first 128 characters are, as always, mapped to ASCII, and the latter 128 characters describe the Hebrew alphabet and punctuation marks, such as ש,ל,מ,ה. The Cyrillic, Arabic and Turkish charsets follow in a similar manner.&lt;/p&gt;
&lt;p&gt;Assume now I&#39;m building a world wide web application, such as a popular social network. I would like to store the first names of my users, in every possible language. None of the above character sets support all languages. I therefore turn to &lt;a title=&#34;What is Unicode&#34; href=&#34;http://www.unicode.org/standard/WhatIsUnicode.html&#34;&gt;Unicode&lt;/a&gt;. In particular, MySQL supports &lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt;, a Unicode encoding scheme, which is commonly used due to its economic storage requirements.&lt;/p&gt;
&lt;p&gt;In Unicode there is a dedicated number for each letter in the known languages, in ancient languages, and some imaginary or otherwise non existing languages, such as Klingon (yes, I know there are people who actually speak Klingon), may yet find their way into the standard.&lt;/p&gt;
&lt;p&gt;UTF8 (or utf8), a Unicode encoding scheme, states the following: for ASCII characters, such as &#39;a&#39;, &#39;6&#39;, &#39;$&#39;, only one byte of storage is required. For Hebrew, Cyrillic or Turkish characters, 2 bytes are required. For Japanese, Chinese - more (MySQL supports up to 3 bytes per character). Again, the exact details of the implementation are beyond the scope of this post, and are well described &lt;a title=&#34;UTF-8 and Unicode FAQ&#34; href=&#34;http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8&#34;&gt;here&lt;/a&gt; and &lt;a title=&#34;Wikipedia - UTF-8&#34; href=&#34;http://en.wikipedia.org/wiki/UTF-8&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What&#39;s important to me is that I can define &lt;strong&gt;&lt;code&gt;Name VARCHAR(30) CHARSET utf8&lt;/code&gt;&lt;/strong&gt; for my columns, and Voila! Any name can be represented in my database.&lt;/p&gt;
&lt;h4&gt;So why not define everything as utf8 and get done with it?&lt;/h4&gt;
&lt;p&gt;Well, it just so happens that Unicode comes with a price. See, for example, the following column definition:&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;CountryCode CHAR(3) CHARSET utf8&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;We are asking for a column with 3 characters exactly. The required storage for this column will be such that any 3-letter name must fit in. This means (3 characters) times (3 bytes per character) = 9 bytes of storage. So &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt; together may be less than ideal.&lt;strong&gt;&lt;code&gt; VARCHAR&lt;/code&gt;&lt;/strong&gt; behaves better: it only requires as many bytes per character as described above. So the text &#34;abc&#34; will only require 3 bytes (plus &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;&#39;s leading 1 or 2 bytes).&lt;/p&gt;
&lt;h4&gt;Why don&#39;t we drop the &#39;CHAR&#39; altogether, then, and use only &#39;VARCHAR&#39;?&lt;/h4&gt;
&lt;p&gt;Because some values are simply better represented with &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt;: consider a &#34;password&#34; column, encoded with MD5. The &lt;strong&gt;&lt;code&gt;MD5()&lt;/code&gt;&lt;/strong&gt; function returns a 32 characters long text. It&#39;s always 32 characters, and, moreover, it&#39;s always in ASCII. The best data type and character set definition would be &lt;strong&gt;&lt;code&gt;password CHAR(32) CHARSET ascii&lt;/code&gt;&lt;/strong&gt;. We thus ensure exactly 32 bytes are allocated to this column. A &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; will acquire an additional byte or two, depending on its defined length, which will indicate the length of the text.&lt;/p&gt;
&lt;h4&gt;And why would I care about collations?&lt;/h4&gt;
&lt;p&gt;Collations deal with text comparison. We observed that the default character set in MySQL is &lt;strong&gt;&lt;code&gt;latin1&lt;/code&gt;&lt;/strong&gt;. The default collation is &lt;strong&gt;&lt;code&gt;latin1_swedish_ci&lt;/code&gt;&lt;/strong&gt;. In this collation the following holds true: &lt;strong&gt;&lt;code&gt;&#39;ABC&#39; = &#39;abc&#39;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Wait. What?&lt;/p&gt;
&lt;p&gt;Look at the &#34;ci&#34; in &lt;strong&gt;&lt;code&gt;latin1_swedish_ci&lt;/code&gt;&lt;/strong&gt;. It stands for &#34;case insensitive&#34;. Collations which end with &#34;cs&#34; or &#34;bin&#34; are case sensitive. The &lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt; character set comes with &lt;strong&gt;&lt;code&gt;utf8_general_ci&lt;/code&gt;&lt;/strong&gt; collation. This can make sense. Let&#39;s review our web application table (I&#39;m using plain text passwords here, bare with me for this example):&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE my_users (
  name VARCHAR(30) CHARSET utf8 COLLATE utf8_general_ci,
  plainPassword VARCHAR(16) CHARSET ASCII,
  UNIQUE KEY (name)
);
INSERT INTO my_users (name, password) VALUES (&#39;David&#39;, &#39;mypass&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It holds true that the name &#39;David&#39; equals &#39;david&#39;. If I were to &lt;strong&gt;&lt;code&gt;SELECT * FROM my_users WHERE name=&#39;david&#39;&lt;/code&gt;&lt;/strong&gt;, I would find the desired row. The unique key will also guarantee that no daVID user can be added.&lt;/p&gt;
&lt;p&gt;But David certainly wouldn&#39;t want users to login with the password &#39;MYPASS&#39;. So we refine our table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE my_users (
  name VARCHAR(30) CHARSET utf8 COLLATE utf8_general_ci,
  plainPassword VARCHAR(16) CHARSET ascii COLLATE ascii_bin,
  UNIQUE KEY (name)
);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;ascii_bin&lt;/code&gt;&lt;/strong&gt; collation is a case sensitive collation for &lt;strong&gt;&lt;code&gt;ascii&lt;/code&gt;&lt;/strong&gt;. The following will not find anything:&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;SELECT * FROM my_users WHERE name=&#39;david&#39; AND plainPassword=&#39;MYPASS&#39;;&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;Holding a plain text password in your database is not a best practice, but apparently it&#39;s common.&lt;/p&gt;
&lt;p&gt;Collations also deal with text ordering. For any two strings, the collation determines which is larger, or if they are equal. Probably the most common situation you see collations in action is when you &lt;strong&gt;ORDER BY&lt;/strong&gt; a text column.&lt;/p&gt;
&lt;h4&gt;Also keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When you check for length of strings, do you use the &lt;strong&gt;&lt;code&gt;LENGTH()&lt;/code&gt;&lt;/strong&gt; function, as in &lt;strong&gt;&lt;code&gt;SELECT LENGTH(Name) FROM City&lt;/code&gt;&lt;/strong&gt;? You probably wish to replace this with &lt;strong&gt;&lt;code&gt;CHAR_LENGTH()&lt;/code&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;code&gt;LENGTH()&lt;/code&gt;&lt;/strong&gt; returns the number of bytes required for the text storage. &lt;strong&gt;&lt;code&gt;CHAR_LENGTH()&lt;/code&gt;&lt;/strong&gt; returns the number of characters in the text, and is usually what you are looking for. It may hold true that for a string s, &lt;strong&gt;&lt;code&gt;LENGTH(s)=12&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;CHAR_LENGTH(s)=8&lt;/code&gt;&lt;/strong&gt;. Watch out for these glitches.&lt;/li&gt;
&lt;li&gt;You can converts texts between character sets with &lt;strong&gt;&lt;code&gt;CONVERT&lt;/code&gt;&lt;/strong&gt;. For example: &lt;strong&gt;&lt;code&gt;CONVERT(s USING utf8)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Stored routines should not be overlooked. If your stored routine accepts a text argument, or if your stored function returns one, make sure the character sets are properly defined. If not, then your utf8 text may be converted to latin1 during the call to your stored routine. This also applies to local parameters within the stored routines.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;&lt;code&gt;ALTER TABLE &lt;em&gt;&amp;lt;some table&amp;gt;&lt;/em&gt; CONVERT TO &lt;em&gt;&amp;lt;some charset&amp;gt;&lt;/em&gt;&lt;/code&gt;&lt;/strong&gt; will change the character set not only for the table itself, but also for all existing textual columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the following post: &lt;a title=&#34;Useful database analysis queries with INFORMATION_SCHEMA&#34; href=&#34;http://code.openark.org/blog/mysql/useful-database-analysis-queries-with-information_schema&#34;&gt;Useful database analysis queries with INFORMATION_SCHEMA&lt;/a&gt; for queries which diagnose your databases character sets.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common wrong Data Types compilation</title>
      <link>/blog/mysql/common-data-types-errors-compilation/</link>
      <pubDate>Tue, 18 Nov 2008 09:37:57 +0000</pubDate>
      
      <guid>/blog/mysql/common-data-types-errors-compilation/</guid>
      <description>&lt;p&gt;During my work with companies using MySQL, I have encountered many issues with regard to schema design, normalization and indexing. Of the most common errors are incorrect data types definition. Many times the database is designed by programmers or otherwise non-expert DBAs. Some companies do not have the time and cannot spare the effort of redesigning and refactoring their databases, and eventually face poor performance issues.&lt;/p&gt;
&lt;p&gt;Here&#39;s a compilation of &#34;the right and the wrong&#34; data types.&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;INT(1)&lt;/code&gt;&lt;/strong&gt; is not one byte long. &lt;strong&gt;&lt;code&gt;INT(10)&lt;/code&gt;&lt;/strong&gt; is no bigger than &lt;strong&gt;&lt;code&gt;INT(2)&lt;/code&gt;&lt;/strong&gt;. The number in parenthesis is misleading, and only describes the text alignment of the number, when displayed in an interactive shell. All mentioned types are the same INT, have the same storage capacity, and the same range. If you want a one-byte &lt;strong&gt;&lt;code&gt;INT&lt;/code&gt;&lt;/strong&gt;, use &lt;strong&gt;&lt;code&gt;TINYINT&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;An integer &lt;strong&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/strong&gt; is preferable, especially if you&#39;re using the InnoDB storage engine. If possible, avoid using &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; as &lt;strong&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/strong&gt;. In InnoDB, this will make the clustered index deeper, secondary indexes larger (sometimes much larger) and look ups slower.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; to represent timestamps. It may look like &lt;strong&gt;&lt;code&gt;&#39;2008-11-14 07:59:13&#39;&lt;/code&gt;&lt;/strong&gt; is a textual field, but in fact it&#39;s just an integer counting the seconds elapsed from 1970-01-01. That&#39;s 4 bytes vs. 19 if you&#39;re using &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/strong&gt; charset, or more if you&#39;re using &lt;strong&gt;&lt;code&gt;UTF8&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; to represent IPv4 addresses. This one is quite common. The IP 192.168.100.255 can be represented with &lt;strong&gt;&lt;code&gt;VARCHAR(15)&lt;/code&gt;&lt;/strong&gt;, true, but could be better represented with a 4-byte int. That&#39;s what IPv4 is: four bytes. Use the &lt;strong&gt;&lt;code&gt;INET_ATON()&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;INET_NTOA()&lt;/code&gt;&lt;/strong&gt; functions to translate between the INT value and textual value.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;This one should be obvious, but I&#39;ve seen it in reality, where the schema was auto generated by some naive generator: do not represent numbers as text. Yes, I have seen integer columns represented by &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;. Don&#39;t ask how the performance was.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MD5()&lt;/code&gt;&lt;/strong&gt; columns shouldn&#39;t be &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;. Use &lt;strong&gt;&lt;code&gt;CHAR(32)&lt;/code&gt;&lt;/strong&gt; instead. It&#39;s always 32 bytes long, so no need for &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;&#39;s additional byte overhead. If your tables or database are &lt;strong&gt;&lt;code&gt;UTF8&lt;/code&gt;&lt;/strong&gt; by default, make sure the MD5 column&#39;s charset is &lt;strong&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/strong&gt;, or it will consume 96 bytes instead of just 32. I also suggest the case-sensitive &lt;strong&gt;&lt;code&gt;ascii_bin&lt;/code&gt;&lt;/strong&gt; collation, but that&#39;s a more minor issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PASSWORD()&lt;/code&gt;&lt;/strong&gt; columns shouldn&#39;t be &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;, but &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt;. The length depends on whether you&#39;re using &lt;strong&gt;&lt;code&gt;old-passwords&lt;/code&gt;&lt;/strong&gt; variable (for some strange reason, this variable always appears in the MySQL sample configuration files - though you really don&#39;t want it unless it&#39;s for backward compatibility with older MySQL versions). As in the MD5 note, use &lt;strong&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/strong&gt; charset.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Better use &lt;strong&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt;&lt;/strong&gt; than &lt;strong&gt;&lt;code&gt;INT&lt;/code&gt;&lt;/strong&gt; to count seconds, as MySQL has many supportive functions for this data type.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;code&gt;TINYINT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;SMALLINT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;MEDIUMINT&lt;/code&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;code&gt;INT&lt;/code&gt;&lt;/strong&gt; when possible. Do you expect to have 4000000000 customers? No? Then a &#34;&lt;strong&gt;&lt;code&gt;id SMALLINT&lt;/code&gt;&lt;/strong&gt;&#34; may suffice as &lt;strong&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;code&gt;CHARACTER SET&lt;/code&gt;&lt;/strong&gt;s with care. More on this on future posts.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>