<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command Line on code.openark.org</title>
    <link>/blog/tag/command-line/</link>
    <description>Recent content in Command Line on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 17 Sep 2014 09:08:20 +0000</lastBuildDate>
    <atom:link href="/blog/tag/command-line/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>zookeepercli: lightweight, powerful, controlled command line client for ZooKeeper</title>
      <link>/blog/linux/zookeepercli-lightweight-powerful-controlled-command-line-client-for-zookeeper/</link>
      <pubDate>Wed, 17 Sep 2014 09:08:20 +0000</pubDate>
      
      <guid>/blog/linux/zookeepercli-lightweight-powerful-controlled-command-line-client-for-zookeeper/</guid>
      <description>&lt;p&gt;I&#39;m happy to announce the availability of &lt;a href=&#34;https://github.com/outbrain/zookeepercli&#34;&gt;&lt;strong&gt;zookeepercli&lt;/strong&gt;&lt;/a&gt;: a lightweight, simple, fast and controlled command line client for ZooKeeper.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;zookeepercli&lt;/strong&gt; allows for:&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;Basic CRUD-like operations: &lt;strong&gt;&lt;code&gt;create&lt;/code&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;code&gt;set&lt;/code&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;code&gt;get&lt;/code&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/strong&gt; (aka &lt;strong&gt;&lt;code&gt;children&lt;/code&gt;&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Extended operations: &lt;strong&gt;&lt;code&gt;lsr&lt;/code&gt;&lt;/strong&gt; (ls recursive),  &lt;strong&gt;&lt;code&gt;creater&lt;/code&gt;&lt;/strong&gt; (create recursively)&lt;/li&gt;
&lt;li&gt;Well formatted and controlled output: supporting either &lt;strong&gt;&lt;code&gt;txt&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;json&lt;/code&gt;&lt;/strong&gt; format&lt;/li&gt;
&lt;li&gt;Single, no-dependencies binary file, based on a native Go ZooKeeper library by &lt;a href=&#34;http://github.com/samuel/go-zookeeper&#34;&gt;github.com/samuel/go-zookeeper&lt;/a&gt; (&lt;a href=&#34;https://github.com/outbrain/zookeepercli/blob/master/go-zookeeper-LICENSE&#34;&gt;LICENSE&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was dissatisfied with existing command line access to ZooKeeper. Uncontrolled and noisy output as well as large footprint were among the reasons. &lt;strong&gt;zookeepercli&lt;/strong&gt; overcomes the above and provides with often required powers.&lt;/p&gt;
&lt;p&gt;Usage samples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;
$ zookeepercli --servers srv-1,srv-2,srv-3 -c create /demo_only &#34;path placeholder&#34;
$ zookeepercli --servers srv-1,srv-2,srv-3 -c create /demo_only/key1 &#34;value1&#34;
$ zookeepercli --servers srv-1,srv-2,srv-3 -c create /demo_only/key2 &#34;value2&#34;
$ zookeepercli --servers srv-1,srv-2,srv-3 -c create /demo_only/key3 &#34;value3&#34;

$ zookeepercli --servers srv-1,srv-2,srv-3 -c ls /demo_only
&lt;span style=&#34;color: #808000;&#34;&gt;key3
key2
key1
&lt;/span&gt;
&lt;span style=&#34;color: #ff6600;&#34;&gt;# Same as above, JSON format output:&lt;/span&gt;
$ zookeepercli --servers srv-1,srv-2,srv-3 --format=json -c ls /demo_only
&lt;span style=&#34;color: #808000;&#34;&gt;[&#34;key3&#34;,&#34;key2&#34;,&#34;key1&#34;]&lt;/span&gt;

$ zookeepercli --servers srv-1,srv-2,srv-3 -c delete /demo_only/key1
$ zookeepercli --servers srv-1,srv-2,srv-3 -c delete /demo_only/key2
$ zookeepercli --servers srv-1,srv-2,srv-3 -c delete /demo_only/key3
$ zookeepercli --servers srv-1,srv-2,srv-3 -c delete /demo_only

&lt;span style=&#34;color: #ff6600;&#34;&gt;# Create a path recursively (auto-generate parent directories if not exist):&lt;/span&gt;
$ zookeepercli --servers=srv-1,srv-2,srv-3 -c creater &#34;/demo_only/child/key1&#34; &#34;val1&#34;
$ zookeepercli --servers=srv-1,srv-2,srv-3 -c creater &#34;/demo_only/child/key2&#34; &#34;val2&#34;

$ zookeepercli --servers=srv-1,srv-2,srv-3 -c get &#34;/demo_only/child/key1&#34;
&lt;span style=&#34;color: #808000;&#34;&gt;val1&lt;/span&gt;

&lt;span style=&#34;color: #ff6600;&#34;&gt;# This path was auto generated due to recursive create:&lt;/span&gt;
$ zookeepercli --servers=srv-1,srv-2,srv-3 -c get &#34;/demo_only&#34;
&lt;span style=&#34;color: #808000;&#34;&gt;zookeepercli auto-generated&lt;/span&gt;

&lt;span style=&#34;color: #ff6600;&#34;&gt;# ls recursively a path and all sub children:&lt;/span&gt;
$ zookeepercli --servers=srv-1,srv-2,srv-3 -c lsr &#34;/demo_only&#34;
&lt;span style=&#34;color: #808000;&#34;&gt;child
child/key1
child/key2 &lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;zookeepercli&lt;/strong&gt; is released as open source by &lt;a href=&#34;https://github.com/outbrain&#34;&gt;Outbrain&lt;/a&gt; under the &lt;a href=&#34;https://github.com/outbrain/zookeepercli/blob/master/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quick links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/outbrain/zookeepercli&#34;&gt;Project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/outbrain/zookeepercli/releases&#34;&gt;Pre-built binaries&lt;/a&gt; for download&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/outbrain/zookeepercli/blob/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tool of the day: q</title>
      <link>/blog/mysql/tool-of-the-day-q/</link>
      <pubDate>Thu, 08 Aug 2013 11:26:02 +0000</pubDate>
      
      <guid>/blog/mysql/tool-of-the-day-q/</guid>
      <description>&lt;p&gt;If you work with command line and know your SQL, &lt;strong&gt;q&lt;/strong&gt; is a great tool to use:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/harelba/q&#34;&gt;&lt;strong&gt;q&lt;/strong&gt;&lt;/a&gt; allows you to query your text files or standard input with SQL. You can:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT c1, COUNT(*) FROM /home/shlomi/tmp/my_file.csv GROUP BY c1&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you can:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT all.c2 FROM /tmp/all_engines.txt AS all LEFT JOIN /tmp/innodb_engines.txt AS inno USING (c1, c2) WHERE inno.c3 IS NULL&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you can also combine with your favourite shell commands and tools:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;grep &#34;my_term&#34; /tmp/my_file.txt | q &#34;SELECT c4 FROM - JOIN /home/shlomi/static.txt USING (c1)&#34; | xargs touch&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some of &lt;strong&gt;q&lt;/strong&gt;&#39;s functionality (and indeed, SQL functionality) can be found in command line tools. You can use &lt;strong&gt;grep&lt;/strong&gt; for pseudo &lt;strong&gt;WHERE&lt;/strong&gt; filtering, or &lt;strong&gt;cut&lt;/strong&gt; for projecting, but you can only get so far with &lt;strong&gt;cat my_file.csv | sort | uniq -c | sort -n&lt;/strong&gt;. SQL is way more powerful for working with tabulated data, and so &lt;strong&gt;q&lt;/strong&gt; makes for a great addition into one&#39;s toolbox.&lt;/p&gt;
&lt;p&gt;The tool is authored by my colleague &lt;a href=&#34;https://github.com/harelba&#34;&gt;Harel Ben-Attia&lt;/a&gt;, and is in daily use over at our company (it is in fact installed on all production servers).&lt;/p&gt;
&lt;p&gt;It is of course free and open source (&lt;a href=&#34;https://github.com/harelba/q&#34;&gt;get it on GitHub&lt;/a&gt;, where you can also find documentation), and very easy to setup. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL command line vs. visual editors</title>
      <link>/blog/mysql/mysql-command-line-vs-visual-editors/</link>
      <pubDate>Mon, 30 Jan 2012 17:04:34 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-command-line-vs-visual-editors/</guid>
      <description>&lt;p&gt;Students in my training classes usually prefer to use some kind of visual editor for MySQL. Typically this would be the software they&#39;re using at work. Sometimes they just bring over their laptops with the software installed. Or they would use MySQL Workbench, which is what I usually have pre-installed on their desktops.&lt;/p&gt;
&lt;p&gt;I see MySQL Workbench, SQLyog, Toad for MySQL, or several more.&lt;/p&gt;
&lt;p&gt;I always humbly suggest they &lt;em&gt;close down their software and open up a command line&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It isn&#39;t fancy. It may not even be convenient (especially on Windows, in my opinion). And repeating your last command with a minor modification requires a lot of key stroking. Or you would copy+paste from some text editor. Most students will give it a shot, then go back to their favorite editor.&lt;/p&gt;
&lt;p&gt;Well, again and again I reach the same conclusion:&lt;/p&gt;
&lt;h4&gt;Visual editors are not as trustworthy as the command line.&lt;/h4&gt;
&lt;p&gt;Time and again students show me something on their editor. Behavior seems strange to me. Opening up a console shows a completely different picture.&lt;/p&gt;
&lt;p&gt;Things like:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual editor would open a new connection for every new query (oh, so the &lt;strong&gt;@user_defined_variable&lt;/strong&gt; I&#39;ve just assigned turns &lt;strong&gt;NULL&lt;/strong&gt;, or the &lt;strong&gt;TEMPORARY TABLE&lt;/strong&gt; disappears).&lt;/li&gt;
&lt;li&gt;The visual editor will only show &lt;strong&gt;1,000&lt;/strong&gt; results, via &lt;strong&gt;LIMIT 0,1000&lt;/strong&gt;. &#34;But the same query runs &lt;em&gt;so much faster&lt;/em&gt; on my machine!&#34;. Well, sure, a &lt;strong&gt;filesort&lt;/strong&gt; of &lt;strong&gt;1,000,000&lt;/strong&gt; rows that can satisfy the first &lt;strong&gt;1,000&lt;/strong&gt; will quit early!&lt;/li&gt;
&lt;li&gt;The visual editor shows table definition graphically. &#34;I didn&#39;t realize the index did(n&#39;t) cover this and that columns. I didn&#39;t realize it only covered first &lt;strong&gt;n&lt;/strong&gt; characters of my &lt;strong&gt;VARCHAR&lt;/strong&gt;.&#34;. That&#39;s because you can&#39;t beat &lt;strong&gt;SHOW CREATE TABLE&lt;/strong&gt;, the definite table structure description.&lt;/li&gt;
&lt;li&gt;The visual editor allows for export/import/copy/transfer of tables and rows with just one click! &#34;Why is it so complicated in the command line to purge &lt;strong&gt;1,000,000&lt;/strong&gt; rows from a table?&#34;. Ummm, did you realize the visual editor would typically use a naive approach of doing everything in one huge transaction?&lt;/li&gt;
&lt;li&gt;The visual editor is smart. But sometimes you don&#39;t want smart. You just &lt;a href=&#34;http://www.devart.com/blogs/dbforge/index.php/mind-data-modifications-via-data-editor-in-dbforge-studio-for-mysql.html&#34;&gt;assume simple&lt;/a&gt;. I personally take great precaution with &lt;em&gt;smart&lt;/em&gt; solutions. Luckily, with scripts you have so much greater control (i.e. command line options, &#34;dry-run&#34; mode, etc.) that I have greater confidence in them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I do like it when a visual editor plays it both &lt;em&gt;smart&lt;/em&gt; and &lt;em&gt;safe&lt;/em&gt;, in such way that before doing its smart work it actually presents you with &lt;em&gt;the query it&#39;s going to issue&lt;/em&gt;. Which is why I always considered MySQL Query Browser (now replaced by Workbench) to be the visual editor of choice in my classes.&lt;/p&gt;
&lt;p&gt;But, at the end of the day, I strongly believe: if you don&#39;t know how to do it with command line, you can&#39;t really know how it&#39;s done.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>