<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bugs on code.openark.org</title>
    <link>/blog/tag/bugs/</link>
    <description>Recent content in Bugs on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 08 Nov 2012 08:31:16 +0000</lastBuildDate>
    <atom:link href="/blog/tag/bugs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My take on privatized MySQL security bugs</title>
      <link>/blog/mysql/my-take-on-privatized-mysql-security-bugs/</link>
      <pubDate>Thu, 08 Nov 2012 08:31:16 +0000</pubDate>
      
      <guid>/blog/mysql/my-take-on-privatized-mysql-security-bugs/</guid>
      <description>&lt;p&gt;A couple weeks ago I submitted &lt;a href=&#34;http://bugs.mysql.com/bug.php?id=67315&#34;&gt;BugÂ #67315: Crashing server by stored function referencing user defined variable in query&lt;/a&gt;. If you press that link, you can&#39;t see the bug (though I can as I submitted it).&lt;/p&gt;
&lt;p&gt;This is due to Oracle&#39;s policy for security-related bugs. Tomas Ulin, Vice President MySQL Development at Oracle , was kind enough to discuss Oracle&#39;s policy with me, and these are the key points as I understand them:&lt;/p&gt;
&lt;p&gt;Oracle&#39;s basic approach is to protect its customers. By publicizing security-bugs, Oracle&#39;s customers are vulnerable to black hatters attacks. Therefore Oracle takes measures and privatizes security bugs (crashing bugs can be treated as security bugs since a crash is a form of Denial of Service).&lt;/p&gt;
&lt;p&gt;But what of a bug reported in a RC version, as was in my case? There is no strict policy there, according to Ulin. However with a version this close to GA, it is uncertain that a specific bug would be fixed in time. It may happen, then, that a bug would find itself well into GA releases, thereby exposing customers to attacks.&lt;/p&gt;
&lt;p&gt;Moreover, GA bugs that are already fixed may remain private, as customers will not necessarily haste to upgrade their working servers for every bug fix.&lt;/p&gt;
&lt;h4&gt;My take&lt;/h4&gt;
&lt;p&gt;Bug privatization has disadvantages, as well:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One could be left with the knowledge that there&#39;s some serious bug in one&#39;s server, but with no way to defend oneself, or take measures against hitting that bug&lt;/li&gt;
&lt;li&gt;Forks are left outside; and for maintainer could try and tackle that bug, thereby improving the product. But with private bugs, forks just have to sit and wait idly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&#39;t necessarily have to have a take on this, but I got curious: how do other organizations work? And very quickly, I got &lt;a href=&#34;https://fedoraproject.org/wiki/Security/Bugs#Embargoed_Security_Issues&#34;&gt;here&lt;/a&gt;. And although the domain reads &lt;em&gt;fedoraproject.org&lt;/em&gt;, this is also the RedHat Enterprise Linux way of doing it. A bug can be embargoed, even if it&#39;s upstream.&lt;/p&gt;
&lt;p&gt;RedHat/Fedora have a notion of embargo expiry time; but I don&#39;t know exactly how that works - I did some looking but could not determine that there is a fixed expiry time at the time of embargo.&lt;/p&gt;
&lt;p&gt;Comparing RedHat/Fedora&#39;s and Oracle&#39;s approaches, I&#39;m not sure there&#39;s that much of a difference. Perhaps Oracle is stricter. I did not make a thorough research, but the logic makes sense to me, which makes the policy reasonable in my view.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>