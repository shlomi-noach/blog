<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on code.openark.org</title>
    <link>/blog/tag/documentation/</link>
    <description>Recent content in Documentation on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 11 Jan 2012 09:01:54 +0000</lastBuildDate>
    <atom:link href="/blog/tag/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Documentation in SQL: CALL for help()</title>
      <link>/blog/mysql/documentation-in-sql-call-for-help/</link>
      <pubDate>Wed, 11 Jan 2012 09:01:54 +0000</pubDate>
      
      <guid>/blog/mysql/documentation-in-sql-call-for-help/</guid>
      <description>&lt;p&gt;Documentation is an important part of any project. On the projects I maintain I put a lot of effort on documentation, and, frankly, the majority of time spent on my projects is on documentation.&lt;/p&gt;
&lt;p&gt;The matter of keeping the documentation faithful is a topic of interest. I&#39;d like to outline a few documentation bundling possibilities, and the present the coming new documentation method for &lt;a href=&#34;http://code.google.com/p/common-schema/&#34; rel=&#34;nofollow&#34;&gt;common_schema&lt;/a&gt;. I&#39;ll talk about any bundling that is NOT &lt;em&gt;man pages&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;High level: web docs&lt;/h4&gt;
&lt;p&gt;This is the initial method of documentation I used for &lt;a title=&#34;openark kit&#34; href=&#34;../../forge/openark-kit&#34;&gt;openark kit&lt;/a&gt; and &lt;a title=&#34;mycheckpoint&#34; href=&#34;../../forge/mycheckpoint&#34;&gt;mycheckpoint&lt;/a&gt;. It&#39;s still valid for &lt;em&gt;mycheckpoint&lt;/em&gt;. Documentation is web-based. You need Internet access to read it. It&#39;s in HTML format.&lt;/p&gt;
&lt;p&gt;Well, not exactly HTML format: I wrote it in WordPress. Yes, it&#39;s HTML, but there&#39;s a lot of noise around (theme, menus, etc.) which is not strictly part of the documentation.&lt;/p&gt;
&lt;p&gt;While this is perhaps the easiest way to go, here&#39;s a few drawbacks:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&#39;re bound to some framework (WordPress in this case)&lt;/li&gt;
&lt;li&gt;Docs are split between MySQL database (my underlying WordPRess storage) &amp;amp; WordPress files (themes, style, header, footer etc.)&lt;/li&gt;
&lt;li&gt;Documentation is separate from your code - they&#39;re just not in the same place&lt;/li&gt;
&lt;li&gt;There is no version control over the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is a single source of documentation, which applies to whatever version is latest. It&#39;s impossible to maintain docs for multiple versions. You must manually synchronize your WordPress updates with code commits (or rather - code release!).&lt;/p&gt;
&lt;h4&gt;Mid level: version controlled HTML docs&lt;/h4&gt;
&lt;p&gt;I first saw this approach on Baron&#39;s &lt;a href=&#34;http://www.xaprb.com/blog/2010/09/22/aspersa-gets-a-user-manual/&#34; rel=&#34;bookmark&#34;&gt;Aspersa gets a user manual&lt;/a&gt; post. I loved it: the documentation is HTML, but stored as part of your project&#39;s code, in same version control.&lt;/p&gt;
&lt;p&gt;This means one can &lt;a href=&#34;http://openarkkit.googlecode.com/svn/trunk/openarkkit/doc/html/introduction.html&#34;&gt;browse the documentation&lt;/a&gt; (&lt;em&gt;openark kit&lt;/em&gt; in this example) exactly as it appears in the baseline. Depending on your project hosting, one may be able to do so per version.&lt;/p&gt;
&lt;p&gt;The approach has the great benefit of having the docs tightly coupled with the code in terms of development. Before committing code, one updates documentation for that code, then commits/releases both together.&lt;/p&gt;
&lt;p&gt;You&#39;re also not bound to any development framework. You may edit with &lt;em&gt;vim, emacs, gedit, bluefish, eclipse,&lt;/em&gt; ... any tool of your choice. It&#39;s all down to plain old text files.&lt;/p&gt;
&lt;h4&gt;Mid level #2: documentation bundling&lt;/h4&gt;
&lt;p&gt;One thing I started doing with common_schema is to release a doc bundle with the code. So one can download a compressed bundle of all HTML files. That way one is absolutely certain what&#39;s the right documentation for revision &lt;strong&gt;178&lt;/strong&gt;. There&#39;s no effort about it: the docs are already tightly coupled with code versions. Just compress and distribute.&lt;/p&gt;
&lt;h4&gt;Low level: documentation coupled with your code&lt;/h4&gt;
&lt;p&gt;Perl scripts can be written as Perl modules, in which case they are eligible for using the &lt;em&gt;perldoc&lt;/em&gt; convention. You code your documentation within your script itself, as comment. &lt;em&gt;Perldoc&lt;/em&gt; can extract the documentation and present in man-like format. Same happens with Python&#39;s &lt;em&gt;pydoc&lt;/em&gt;. Baron&#39;s &lt;a href=&#34;http://www.xaprb.com/blog/2011/11/07/when-documentation-is-code/&#34; rel=&#34;bookmark&#34;&gt;When documentation is code&lt;/a&gt; illustrates that approach. &lt;a href=&#34;http://www.maatkit.org/&#34;&gt;Maatkit&lt;/a&gt; (now &lt;em&gt;Percona Toolkit&lt;/em&gt;) has been using it for years.&lt;/p&gt;
&lt;p&gt;This method has the advantage of having the documentation ready right within your shell. You don&#39;t need a browser, nor firewall access. The docs are just there for you in the same environment where you&#39;re executing the code.&lt;/p&gt;
&lt;h4&gt;SQL Low level: CALL for help()&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; is a different type of project. It is merely a schema. There&#39;s no Perl nor Python. One imports the schema into one&#39;s MySQL server.&lt;/p&gt;
&lt;p&gt;What&#39;s the low-level approach for this type of code?&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;common_schema&lt;/em&gt; I use three levels of documentation: the mid-level, where one can &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/introduction.html&#34;&gt;browse through the versioned docs&lt;/a&gt;, the 2nd mid-level, where one can &lt;a href=&#34;http://code.google.com/p/common-schema/downloads/list&#34;&gt;download bundled documentation&lt;/a&gt;, and then a low-level approach: documentation embedded within the code.&lt;/p&gt;
&lt;p&gt;MySQL&#39;s documentation is also built into the server: see the &lt;strong&gt;help_*&lt;/strong&gt; tables within the &lt;strong&gt;mysql&lt;/strong&gt; schema. The &lt;em&gt;mysql&lt;/em&gt; command line client allows one to access help by supporting the help command, e.g.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; help create table;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The client intercepts this command (this is not server side command) and searches through the &lt;strong&gt;mysql.help_*&lt;/strong&gt; docs.&lt;/p&gt;
&lt;p&gt;With &lt;em&gt;common_schema&lt;/em&gt;, I don&#39;t have control over the client; it&#39;s all on server side. But the code being a schema, what with stored routines and tables, it&#39;s easy enough to set up documentation.&lt;/p&gt;
&lt;p&gt;As of the next version of &lt;em&gt;common_schema&lt;/em&gt;, and following MySQL&#39;s method, &lt;em&gt;common_schema&lt;/em&gt; provides a &lt;strong&gt;help&lt;/strong&gt; table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DESC help;
+--------------+-------------+------+-----+---------+-------+
| Field        | Type        | Null | Key | Default | Extra |
+--------------+-------------+------+-----+---------+-------+
| topic        | varchar(32) | NO   | PRI | NULL    |       |
| help_message | text        | NO   |     | NULL    |       |
+--------------+-------------+------+-----+---------+-------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And a &lt;strong&gt;help()&lt;/strong&gt; procedure, so that you can call for &lt;em&gt;help()&lt;/em&gt;. The procedure will look for the best matching document based on your search expression:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mysql-5.1.51&amp;gt; &lt;strong&gt;CALL help(&#39;match&#39;);&lt;/strong&gt;
&lt;strong&gt;+---------------------------------------&lt;/strong&gt;----------------------------------------+
| help                                                                          |
+-------------------------------------------------------------------------------+
|                                                                               |
| NAME                                                                          |
|                                                                               |
| match_grantee(): Match an existing account based on user+host.                |
|                                                                               |
| TYPE                                                                          |
|                                                                               |
| Function                                                                      |
|                                                                               |
| DESCRIPTION                                                                   |
|                                                                               |
| MySQL does not provide with identification of logged in accounts. It only     |
| provides with user + host:port combination within processlist. Alas, these do |
| not directly map to accounts, as MySQL lists the host:port from which the     |
| connection is made, but not the (possibly wildcard) user or host.             |
| This function matches a user+host combination against the known accounts,     |
| using the same matching method as the MySQL server, to detect the account     |
| which MySQL identifies as the one matching. It is similar in essence to       |
| CURRENT_USER(), only it works for all sessions, not just for the current      |
| session.                                                                      |
|                                                                               |
| SYNOPSIS                                                                      |
|                                                                               |
|                                                                               |
|                                                                               |
|        match_grantee(connection_user char(16) CHARSET utf8,                   |
|        connection_host char(70) CHARSET utf8)                                 |
|          RETURNS VARCHAR(100) CHARSET utf8                                    |
|                                                                               |
|                                                                               |
| Input:                                                                        |
|                                                                               |
| * connection_user: user login (e.g. as specified by PROCESSLIST)              |
| * connection_host: login host. May optionally specify port number (e.g.       |
|   webhost:12345), which is discarded by the function. This is to support      |
|   immediate input from as specified by PROCESSLIST.                           |
|                                                                               |
|                                                                               |
| EXAMPLES                                                                      |
|                                                                               |
| Find an account matching the given use+host combination:                      |
|                                                                               |
|                                                                               |
|        mysql&amp;gt; SELECT match_grantee(&#39;apps&#39;, &#39;192.128.0.1:12345&#39;) AS            |
|        grantee;                                                               |
|        +------------+                                                         |
|        | grantee    |                                                         |
|        +------------+                                                         |
|        | &#39;apps&#39;@&#39;%&#39; |                                                         |
|        +------------+                                                         |
|                                                                               |
|                                                                               |
|                                                                               |
| ENVIRONMENT                                                                   |
|                                                                               |
| MySQL 5.1 or newer                                                            |
|                                                                               |
| SEE ALSO                                                                      |
|                                                                               |
| processlist_grantees                                                          |
|                                                                               |
| AUTHOR                                                                        |
|                                                                               |
| Shlomi Noach                                                                  |
|                                                                               |
+-------------------------------------------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I like HTML for documentation. I think it&#39;s a good format, provided you don&#39;t start doing funny things. Perhaps &lt;em&gt;TROFF&lt;/em&gt; is more suitable; certainly more popular on Unix machines. But I already have everything in HTML. So, what do I do?&lt;/p&gt;
&lt;p&gt;My decision was to keep documentation in HTML, and use the handy &lt;em&gt;html2text&lt;/em&gt; tool to do the job. And it does it pretty well! The sample you see above is an automated translation of HTML to plain text.&lt;/p&gt;
&lt;p&gt;I add a few touches of my own: SELECTing long texts is ugly, whether you do it via &#34;&lt;strong&gt;;&lt;/strong&gt;&#34; or &#34;&lt;strong&gt;\G&lt;/strong&gt;&#34;. The &lt;strong&gt;help()&lt;/strong&gt; routine breaks the text by &#39;&lt;strong&gt;\n&lt;/strong&gt;&#39;, returning a multi row result set. The above sample makes for some &lt;strong&gt;60+&lt;/strong&gt; rows, nicely formatted, broken from the original single text appearing in the &lt;strong&gt;help&lt;/strong&gt; table.&lt;/p&gt;
&lt;p&gt;So now you have an internal help method for &lt;em&gt;common_schema&lt;/em&gt;, right where the code is. You don&#39;t have to leave the command line client in order to get help.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://datacharmer.blogspot.com/&#34;&gt;Giuseppe&lt;/a&gt; offered me the idea for this, even while my own thinking about it was in early stages.&lt;/p&gt;
&lt;p&gt;The next version of &lt;em&gt;common_schema&lt;/em&gt; will be available in a few weeks. The code is pretty much ready. I just need to work on, ahem..., the documentation.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>