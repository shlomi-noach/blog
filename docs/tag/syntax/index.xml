<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on code.openark.org</title>
    <link>/blog/tag/syntax/</link>
    <description>Recent content in Syntax on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 21 Feb 2013 14:12:48 +0000</lastBuildDate>
    <atom:link href="/blog/tag/syntax/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Merging tables with INSERT...ON DUPLICATE KEY UPDATE</title>
      <link>/blog/mysql/merging-tables-with-insert-on-duplicate-key-update/</link>
      <pubDate>Thu, 21 Feb 2013 14:12:48 +0000</pubDate>
      
      <guid>/blog/mysql/merging-tables-with-insert-on-duplicate-key-update/</guid>
      <description>&lt;p&gt;Had a case recently where I had to merge data from two identically structured tables containing nearly identical data.&lt;/p&gt;
&lt;p&gt;&#34;Nearly identical&#34; meaning most table data is identical in both; sometimes a row is missing from one of the tables; sometimes same row (according to PK) appears in both, but some columns are NULL is one tables (while others can be NULL in the second).&lt;/p&gt;
&lt;p&gt;Otherwise no contradicting data: it was not possible for some data to be &#34;3&#34; in one table and &#34;4&#34; in the other.&lt;/p&gt;
&lt;h4&gt;How do you create a merge of the tables, such that all missing rows are completed, and NULLs replaced by actual values when possible?&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://www.percona.com/doc/percona-toolkit/2.1/pt-table-sync.html&#34;&gt;pt-table-sync&lt;/a&gt; comes to mind: one can do a bidirectional syncing of two tables, and actually stating how to resolve ambiguities (like &#34;greater value wins&#34;). Very powerful! An example would be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;pt-table-sync --bidirectional --conflict-column=a --conflict-comparison=greatest --tables ...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;However I didn&#39;t actually have any problem with the tables themselves. The two tables were just fine as they were; missing or NULL data does not indicate an error on their part. I wanted to get their merge. &lt;em&gt;pt-table-sync&lt;/em&gt; is still up for the job: we can duplicate them, merge on the copy... But I prefer a query over an external script when possible.&lt;/p&gt;
&lt;h4&gt;INSERT...ON DUPLICATE KEY UPDATE&lt;/h4&gt;
&lt;p&gt;This &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/insert-on-duplicate.html&#34;&gt;MySQL-specific syntax&lt;/a&gt; is actually quite powerful. It basically says &#34;if the insert fails due to unique constraint, you get a chance to update the row causing the failure&#34;. But it also allows for smart setting of the column via the &lt;strong&gt;VALUES()&lt;/strong&gt; clause. Let&#39;s present some sample data and then see the solution.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Assume the following table definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;create table t1 (
  pkdt datetime,
  pki int,
  a int,
  b int,
  c int,
  primary key (pkdt, pki)
);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Same structure holds for &lt;strong&gt;t1&lt;/strong&gt;, &lt;strong&gt;t2&lt;/strong&gt; and &lt;strong&gt;tmerge&lt;/strong&gt; -- our target table. Looking at table data we have:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&amp;gt; select * from t1;
+---------------------+-----+------+------+------+
| pkdt                | pki | a    | b    | c    |
+---------------------+-----+------+------+------+
| 2012-01-01 00:00:00 |   1 |    4 |    5 |    6 |
| 2012-01-02 00:00:00 |   2 | NULL |    5 |    6 |
| 2012-01-04 00:00:00 |   4 |    4 | NULL | NULL |
| 2012-01-05 00:00:00 |   5 | NULL |    8 | NULL |
+---------------------+-----+------+------+------+

&amp;gt; select * from t2;
+---------------------+-----+------+------+------+
| pkdt                | pki | a    | b    | c    |
+---------------------+-----+------+------+------+
| 2012-01-01 00:00:00 |   1 |    4 | NULL |    6 |
| 2012-01-03 00:00:00 |   3 |    4 |    5 |    6 |
| 2012-01-04 00:00:00 |   4 |    4 |    5 |    6 |
| 2012-01-05 00:00:00 |   5 |    7 | NULL |    9 |
+---------------------+-----+------+------+------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can see a row with &lt;strong&gt;pki=2&lt;/strong&gt; appears in &lt;strong&gt;t1&lt;/strong&gt; but not in &lt;strong&gt;t2&lt;/strong&gt;; a row with &lt;strong&gt;pki=3&lt;/strong&gt; appears in &lt;strong&gt;t2&lt;/strong&gt; but not in &lt;strong&gt;t2&lt;/strong&gt;, and various &lt;strong&gt;NULL&lt;/strong&gt;s appear throughout the rows that are shared.&lt;/p&gt;
&lt;p&gt;To get the shared table, we throw in the data from &lt;strong&gt;t1&lt;/strong&gt; and &lt;strong&gt;t2&lt;/strong&gt; into &lt;strong&gt;tmerge&lt;/strong&gt;, in such way that a real value overwrites a &lt;strong&gt;NULL&lt;/strong&gt;, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;insert into tmerge select * from t1;

insert into tmerge select * from t2
on duplicate key update
  a = &lt;strong&gt;ifnull&lt;/strong&gt;(tmerge.a, &lt;strong&gt;values&lt;/strong&gt;(a)),
  b = &lt;strong&gt;ifnull&lt;/strong&gt;(tmerge.b, &lt;strong&gt;values&lt;/strong&gt;(b)),
  c = &lt;strong&gt;ifnull&lt;/strong&gt;(tmerge.c, &lt;strong&gt;values&lt;/strong&gt;(c))
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So even while I&#39;m inserting values to &lt;strong&gt;tmerge&lt;/strong&gt;, I&#39;m able to check for current value, compared to the value I wish to insert, and have time to make a decision. This is really cool! The result:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&amp;gt; select * from tmerge;
+---------------------+-----+------+------+------+
| pkdt                | pki | a    | b    | c    |
+---------------------+-----+------+------+------+
| 2012-01-01 00:00:00 |   1 |    4 |    5 |    6 |
| 2012-01-02 00:00:00 |   2 | NULL |    5 |    6 |
| 2012-01-03 00:00:00 |   3 |    4 |    5 |    6 |
| 2012-01-04 00:00:00 |   4 |    4 |    5 |    6 |
| 2012-01-05 00:00:00 |   5 |    7 |    8 |    9 |
+---------------------+-----+------+------+------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just what we wanted: all possible rows inside; real value takes over &lt;strong&gt;NULL&lt;/strong&gt; whenever possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pop quiz: funny syntax</title>
      <link>/blog/mysql/pop-quiz-funny-syntax/</link>
      <pubDate>Mon, 05 Nov 2012 20:22:15 +0000</pubDate>
      
      <guid>/blog/mysql/pop-quiz-funny-syntax/</guid>
      <description>&lt;p&gt;The following questions are of little importance, yet I find them entertaining. I stumbled upon these while developing QueryScript.&lt;/p&gt;
&lt;p&gt;Can you guess the results of the following statements?&lt;/p&gt;
&lt;h4&gt;Pop quiz 1&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @x := 7;
SELECT ++@x;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is the computation result? What will be the value of &lt;strong&gt;@x&lt;/strong&gt;?&lt;/p&gt;
&lt;h4&gt;Pop quiz 2&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @ := 4;
SELECT @ + @&#39;&#39; + @``&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is the computation result?&lt;/p&gt;
&lt;h4&gt;Pop quiz 3&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @a := 2;
SELECT @a = @&#39;a&#39; = @`a`&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do we get &lt;strong&gt;TRUE&lt;/strong&gt; or &lt;strong&gt;FALSE&lt;/strong&gt;? When?&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Hints&lt;/h4&gt;
&lt;p&gt;Consider the following queries as hints to the above questions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT +++++-@x;
SELECT @ = @&#39;&#39;, @ = @``
SELECT (@a = @&#39;a&#39;) = @`a`&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Answers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pop quiz 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;++@x&lt;/strong&gt; is interpreted as &lt;strong&gt;+(+(@x))&lt;/strong&gt;, which is in turn evaluated as &lt;strong&gt;0+(0+(@x))&lt;/strong&gt;. No relation to &lt;strong&gt;C&lt;/strong&gt;&#39;s &lt;strong&gt;++&lt;/strong&gt; operator. &lt;strong&gt;@x&lt;/strong&gt; is unchanged.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pop quiz 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;@x&lt;/strong&gt; is the same as &lt;strong&gt;@&#39;x&#39;&lt;/strong&gt; and as &lt;strong&gt;@`x`&lt;/strong&gt;. What&#39;s funny is that one is allowed to create the empty-named user defined variable &lt;strong&gt;@&#39;&#39;&lt;/strong&gt;. Makes for a weird looking syntax, but nothing special about it. Computation result is &lt;strong&gt;12&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pop quiz 3&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;We&#39;ve already established that &lt;strong&gt;@a&lt;/strong&gt;, &lt;strong&gt;@&#39;a&#39;&lt;/strong&gt; and &lt;strong&gt;@`a`&lt;/strong&gt; are the same, I just used this notation for adding pepper to the quiz. The real question is whether &lt;strong&gt;2 = 2 = 2&lt;/strong&gt; holds true.  It does not. There is no 3-way comparison. All comparisons are in pairs, which is why the expression evaluates as &lt;strong&gt;(2 = 2) = 2&lt;/strong&gt;, leading to &lt;strong&gt;1 = 2&lt;/strong&gt;, &lt;strong&gt;&#34;1&#34;&lt;/strong&gt; being the &lt;strong&gt;TRUE&lt;/strong&gt; value of &lt;strong&gt;(2 = 2)&lt;/strong&gt;. The only value of &lt;strong&gt;@a&lt;/strong&gt; for which the expression holds true is &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL joins: ON vs. USING vs. Theta-style</title>
      <link>/blog/mysql/mysql-joins-on-vs-using-vs-theta-style/</link>
      <pubDate>Wed, 11 Jul 2012 06:54:20 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-joins-on-vs-using-vs-theta-style/</guid>
      <description>&lt;p&gt;What is the difference between the following three syntaxes?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM film JOIN film_actor ON (film.film_id = film_actor.film_id)
SELECT * FROM film JOIN film_actor USING (film_id)
SELECT * FROM film, film_actor WHERE film.film_id = film_actor.film_id&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The difference is mostly syntactic sugar, but with a couple interesting notes.&lt;/p&gt;
&lt;p&gt;To put names, the first two are called &lt;strong&gt;&#34;ANSI-style&#34;&lt;/strong&gt; while the third is called &lt;strong&gt;&#34;Theta-style&#34;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Theta style&lt;/h4&gt;
&lt;p&gt;On the &lt;strong&gt;FROM&lt;/strong&gt; clause, tables are listed as if with Cartesian products, and the &lt;strong&gt;WHERE&lt;/strong&gt; clause specifies how the join should take place.&lt;/p&gt;
&lt;p&gt;This is considered to be the &#34;old&#34; style. It is somewhat confusing to read. Consider the following query:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; * &lt;strong&gt;FROM&lt;/strong&gt; film, film_actor &lt;strong&gt;WHERE&lt;/strong&gt; film.film_id = film_actor.film_id &lt;strong&gt;AND&lt;/strong&gt; actor_id = 17 &lt;strong&gt;AND&lt;/strong&gt; film.length &amp;gt; 120&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above lists films over &lt;strong&gt;120&lt;/strong&gt; minutes in length, in which actor &lt;strong&gt;#17&lt;/strong&gt; plays. Never mind the results; what about the query? Being just one part of the &lt;strong&gt;WHERE&lt;/strong&gt; clause, a one out of three elements in the &lt;strong&gt;AND&lt;/strong&gt; expression, the join equation gets lost. It is difficult to find and isolate the terms which make for table joins as opposed to terms which filter out rows. In the above example it is still relatively easy to point out. How about a query with &lt;strong&gt;5&lt;/strong&gt; tables and a &lt;strong&gt;20&lt;/strong&gt; terms &lt;strong&gt;WHERE&lt;/strong&gt; clause?&lt;/p&gt;
&lt;h4&gt;ANSI style: ON&lt;/h4&gt;
&lt;p&gt;With &lt;strong&gt;JOIN&lt;/strong&gt; ... &lt;strong&gt;ON&lt;/strong&gt;, one separates the join terms from the filtering terms. Rewriting the previous example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; * &lt;strong&gt;FROM&lt;/strong&gt; film &lt;strong&gt;JOIN&lt;/strong&gt; film_actor &lt;strong&gt;ON&lt;/strong&gt; (film.film_id = film_actor.film_id) &lt;strong&gt;WHERE&lt;/strong&gt; actor_id = 17 &lt;strong&gt;AND&lt;/strong&gt; film.length &amp;gt; 120&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is quite clear now what belongs to what.&lt;/p&gt;
&lt;p&gt;Note: the parenthesis are not strictly required in the &lt;strong&gt;ON&lt;/strong&gt; clause. I personally like to use them: it makes for an even greater distinction between query parts. SQL syntax is such a mess!&lt;/p&gt;
&lt;h4&gt;ANSI style: USING&lt;/h4&gt;
&lt;p&gt;Is the special case where we join tables on columns of the same name, we can make a shortcut and use &lt;strong&gt;USING&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; * &lt;strong&gt;FROM&lt;/strong&gt; film &lt;strong&gt;JOIN&lt;/strong&gt; film_actor &lt;strong&gt;USING&lt;/strong&gt; (film_id) &lt;strong&gt;WHERE&lt;/strong&gt; actor_id = 17 &lt;strong&gt;AND&lt;/strong&gt; film.length &amp;gt; 120&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This time the parenthesis are required (I&#39;m not sure why the difference on that part).&lt;/p&gt;
&lt;p&gt;This is mainly a nicety, less words to type, and a resulting prettified query. But also note a couple differences:&lt;/p&gt;
&lt;h4&gt;USING vs. ON&lt;/h4&gt;
&lt;p&gt;The following is valid:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT film.title, film_id FROM film JOIN film_actor USING (film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the following is not:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT film.title, film_id FROM film JOIN film_actor ON (film.film_id = film_actor.film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120;
&lt;strong&gt;ERROR 1052 (23000): Column &#39;film_id&#39; in field list is ambiguous&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since &lt;strong&gt;USING&lt;/strong&gt; &#34;knows&#34; the film_id column is shared between both tables, it doesn&#39;t mind if we ask it without specifying an exact table. It would be the same value anyway!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ON&lt;/strong&gt; is not as smart and requires further clarifications: which table exactly do you want?&lt;/p&gt;
&lt;p&gt;And the above is actually the result of this interesting phenomena: when using &lt;strong&gt;USING&lt;/strong&gt;, the column only appears &lt;em&gt;once&lt;/em&gt; in the result set:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM film JOIN film_actor USING (film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120 LIMIT 1\G
*************************** 1. row ***************************
             &lt;strong&gt;film_id&lt;/strong&gt;: 96
               title: BREAKING HOME
         description: A Beautiful Display of a Secret Agent And a Monkey who must Battle a Sumo Wrestler in An Abandoned Mine Shaft
        release_year: 2006
         language_id: 1
original_language_id: NULL
     rental_duration: 4
         rental_rate: 2.99
              length: 169
    replacement_cost: 21.99
              rating: PG-13
    special_features: Trailers,Commentaries
         last_update: 2006-02-15 05:03:42
            actor_id: 17
         last_update: 2006-02-15 05:05:03&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But joining on &lt;strong&gt;ON&lt;/strong&gt;, we get this column &lt;em&gt;twice&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM film JOIN film_actor ON film.film_id = film_actor.film_id WHERE actor_id = 17 AND film.length &amp;gt; 120 LIMIT 1\G
*************************** 1. row ***************************
             &lt;strong&gt;film_id&lt;/strong&gt;: 96
               title: BREAKING HOME
         description: A Beautiful Display of a Secret Agent And a Monkey who must Battle a Sumo Wrestler in An Abandoned Mine Shaft
        release_year: 2006
         language_id: 1
original_language_id: NULL
     rental_duration: 4
         rental_rate: 2.99
              length: 169
    replacement_cost: 21.99
              rating: PG-13
    special_features: Trailers,Commentaries
         last_update: 2006-02-15 05:03:42
            actor_id: 17
             &lt;strong&gt;film_id&lt;/strong&gt;: 96
         last_update: 2006-02-15 05:05:03&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Behind the scenes&lt;/h4&gt;
&lt;p&gt;The news is that MySQL treats all in the exact same way. With the kind help of &lt;strong&gt;EXPLAIN EXTENDED&lt;/strong&gt;, we see that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;EXPLAIN EXTENDED SELECT film.title, film_id FROM film JOIN film_actor &lt;strong&gt;USING&lt;/strong&gt; (film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120\G
*************************** 1. row ***************************
...
2 rows in set, 1 warning (0.00 sec)

root@mysql-5.1.51&amp;gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: select `sakila`.`film`.`title` AS `title`,`sakila`.`film`.`film_id` AS `film_id` 
         from `sakila`.`film` join `sakila`.`film_actor` 
         where (
                 &lt;strong&gt;(`sakila`.`film`.`film_id` = `sakila`.`film_actor`.`film_id`)&lt;/strong&gt; 
                 and (`sakila`.`film_actor`.`actor_id` = 17) 
                 and (`sakila`.`film`.`length` &amp;gt; 120)
               )&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;All queries are translated internally to &lt;em&gt;theta-style&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This post only discusses inner joins. With outer joins the situation is somewhat different. Read &lt;a href=&#34;http://www.mysqldiary.com/mysql-left-join/&#34;&gt;this post&lt;/a&gt; for more insight.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Syntax of the day: IS TRUE and IS FALSE</title>
      <link>/blog/mysql/syntax-of-the-day-is-true-and-is-false/</link>
      <pubDate>Thu, 26 Jan 2012 06:09:23 +0000</pubDate>
      
      <guid>/blog/mysql/syntax-of-the-day-is-true-and-is-false/</guid>
      <description>&lt;p&gt;What makes for a &lt;em&gt;true&lt;/em&gt; statement?&lt;/p&gt;
&lt;p&gt;We usually test statements using a WHERE clause:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM world.City WHERE Population &amp;gt; 1000000&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&#34;Population &amp;gt; 1000000&#34;&lt;/strong&gt; statement makes for a boolean expression. Using &lt;strong&gt;WHERE&lt;/strong&gt; is just one way of evaluating it. One can also test with &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/control-flow-functions.html#function_if&#34;&gt;&lt;strong&gt;IF()&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @val := 7;
SELECT IF(@val &amp;gt; 2, &#39;Yes&#39;, &#39;No&#39;)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;TRUE and FALSE&lt;/h4&gt;
&lt;p&gt;The two are keywords. They also map for the numerals &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;0&lt;/strong&gt;, as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT TRUE, FALSE;
+------+-------+
| TRUE | FALSE |
+------+-------+
|    1 |     0 |
+------+-------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like in the &lt;strong&gt;C&lt;/strong&gt; programming language, a nonzero value evaluates to a &lt;em&gt;true&lt;/em&gt; value. A zero evaluates to &lt;em&gt;false&lt;/em&gt;. A NULL evaluates to... well, NULL. But aside from 3-valued logic, what&#39;s important in our case is that it is &lt;em&gt;not true&lt;/em&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;However, simple value comparison is incorrect:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT @val, @val &amp;gt; 3, @val &amp;gt; 3 = TRUE as result;
+------+----------+--------+
| @val | @val &amp;gt; 3 | result |
+------+----------+--------+
|    7 |        1 |      1 |
+------+----------+--------+

mysql&amp;gt; SELECT @val, @val = TRUE as result;
+------+--------+
| @val | result |
+------+--------+
|    7 |      0 |
+------+--------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test for the truth value of an expression, the correct syntax is by using &lt;strong&gt;IS TRUE&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT @val, @val IS TRUE as result;
+------+--------+
| @val | result |
+------+--------+
|    7 |      1 |
+------+--------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Likewise, one may use &lt;strong&gt;IS FALSE&lt;/strong&gt; to test for falsehood. However, if you wish to note &lt;strong&gt;NULL&lt;/strong&gt; as a &lt;em&gt;false&lt;/em&gt; value this does not work:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT @empty, @empty IS TRUE, @empty IS FALSE;
+--------+----------------+-----------------+
| @empty | @empty IS TRUE | @empty IS FALSE |
+--------+----------------+-----------------+
| NULL   |              0 |               0 |
+--------+----------------+-----------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&#39;re unsure why, you should read more on three-valued logic in SQL. To solve the above, simply use &lt;strong&gt;IS NOT TRUE&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT @empty, @empty IS NOT TRUE;
+--------+--------------------+
| @empty | @empty IS NOT TRUE |
+--------+--------------------+
| NULL   |                  1 |
+--------+--------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In summary, use &lt;strong&gt;IS TRUE&lt;/strong&gt; and &lt;strong&gt;IS NOT TRUE&lt;/strong&gt; so as to normalize truth values into a &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt; value range, &lt;strong&gt;C&lt;/strong&gt; style, including handling of &lt;strong&gt;NULL&lt;/strong&gt;s.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quoting text JavaScript/Python style</title>
      <link>/blog/mysql/quoting-text-javascriptpython-style/</link>
      <pubDate>Tue, 15 Nov 2011 08:11:37 +0000</pubDate>
      
      <guid>/blog/mysql/quoting-text-javascriptpython-style/</guid>
      <description>&lt;p&gt;Unless your MySQL is configured to use &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html#sqlmode_ansi_quotes&#34;&gt;&lt;strong&gt;ANSI_QUOTES&lt;/strong&gt;&lt;/a&gt; in &lt;strong&gt;sql_mode&lt;/strong&gt;, you are able to quote your text in one of two forms: using single quotes or double quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;UPDATE world.Country SET HeadOfState = &lt;strong&gt;&#39;Willy Wonka&#39;&lt;/strong&gt; WHERE Code=&lt;strong&gt;&#39;USA&#39;&lt;/strong&gt;
UPDATE world.Country SET HeadOfState = &lt;strong&gt;&#34;Willy Wonka&#34;&lt;/strong&gt; WHERE Code=&lt;strong&gt;&#34;USA&#34;&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This makes for JavaScript- or Python-style quoting: you quote by your needs. Say you have a text which includes single quotes:&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;It is what you read when you don&#39;t have to that determines what you will be when you can&#39;t help it.&lt;/em&gt; - Oscar Wilde&lt;/blockquote&gt;
&lt;p&gt;You wish to insert this text to some tables. You could go through the trouble of escaping it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;INSERT INTO quotes (quote, author) VALUES (
&amp;nbsp; &#39;It is what you read when you don\&#39;t have to that determines what you will be when you can\&#39;t help it.&#39;, &#39;Oscar Wilde&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or you could just wrap it in double quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;INSERT INTO quotes (quote, author) VALUES (
&amp;nbsp; &#34;It is what you read when you don&#39;t have to that determines what you will be when you can&#39;t help it.&#34;, &#39;Oscar Wilde&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I find this useful when using SQL to generate queries. Take, for example, &lt;a href=&#34;http://code.openark.org/blog/mysql/mysql-eval&#34;&gt;eval() for MySQL&lt;/a&gt;: the statement:&lt;span id=&#34;more-4364&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CALL eval(&#39;select concat(\&#39;KILL \&#39;,id) from information_schema.processlist where user=\&#39;webuser\&#39;&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;is just so more easily written this way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CALL eval(&#34;select concat(&#39;KILL &#39;,id) from information_schema.processlist where user=&#39;webuser&#39;&#34;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&#39;t suggest one should use this method throughout her application code. Application code works great with auto-escaping string literals. But for the handy DBA or developer, who needs to work some quick queries by hand, this makes for an easier syntax to use.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL terminology: processes, threads &amp; connections</title>
      <link>/blog/mysql/mysql-terminology-processes-threads-connections/</link>
      <pubDate>Wed, 03 Nov 2010 08:38:03 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-terminology-processes-threads-connections/</guid>
      <description>&lt;p&gt;There&#39;s some confusion in the MySQL terminology for processes, threads &amp;amp; connections, which I will try to resolve. I can&#39;t explain the full nature of what processes and threads are; please see Wikipedia &lt;a href=&#34;http://en.wikipedia.org/wiki/Process_%28computing%29&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Thread_%28computer_science%29&#34;&gt;[2]&lt;/a&gt; for that. But here&#39;s some basics with regard to MySQL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL server is a single process application.&lt;/li&gt;
&lt;li&gt;It is multithreaded.&lt;/li&gt;
&lt;li&gt;It (usually) acts as a TCP/IP server, accepting connections.&lt;/li&gt;
&lt;li&gt;Each connection gets a dedicated thread.&lt;/li&gt;
&lt;li&gt;These threads are sometimes named processes, and sometimes they&#39;re referred to as connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part is where confusion arises, so let me discuss again the use of threads and connections in MySQL.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;MySQL truly is a single process server. It is multi threaded, in that there are many obvious and less obvious threads comprising the server. Such threads are the InnoDB I/O threads, the DELAYED INSERT thread, etc. Oh, and of course: the connection threads. More on this in a short while.&lt;/p&gt;
&lt;p&gt;On older Linux versions or on glibc-static versions, one may view MySQL as a multi-process server. This is not so: it is merely because threads are mapped to OS processes. For the sake of this discussion this is irrelevant. mysqld is a single process.&lt;/p&gt;
&lt;p&gt;So, every new connection gets its own thread. Assuming no thread pool is in use, every new connection makes for the creation of a new thread, and a disconnect causes for that thread&#39;s destruction. Hence, there is a 1-1 mapping between connections and active threads. But then, there &lt;em&gt;is&lt;/em&gt; a thread pool, which means there can be threads which are not associated with any connection. So, the number of threads is greater than or equal to the number of connections.&lt;/p&gt;
&lt;p&gt;Here&#39;s where terminology gets confusing. When you want to see what&#39;s executing on the server, you issue &lt;strong&gt;SHOW PROCESSLIST&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SHOW PROCESSLIST\G
*************************** 1. row ***************************
     Id: 4
   User: root
   Host: localhost
     db: mycheckpoint
Command: Query
   Time: 0
  State: NULL
   Info: SHOW PROCESSLIST
1 row in set (0.02 sec)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps this should have been called SHOW THREADLIST; the acting queries are not really processes.&lt;/p&gt;
&lt;p&gt;OK, so there&#39;s process #4 which is executing a query. What&#39;s &lt;em&gt;my&lt;/em&gt; process id? Turns out I don&#39;t have a process id. I do get to have a &lt;strong&gt;CONNECTION_ID()&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT CONNECTION_ID();
+-----------------+
| CONNECTION_ID() |
+-----------------+
|               4 |
+-----------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So how many processes or connections are now actually doing anything? We now must check for &lt;strong&gt;&#39;Threads_running&#39;&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SHOW GLOBAL STATUS LIKE &#39;Threads_running&#39;;
+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| Threads_running | 1     |
+-----------------+-------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so we have &lt;strong&gt;&#39;Threads_cached&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;Threads_connected&#39;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&#39;Max_used_connections&#39;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Confusing?&lt;/p&gt;
&lt;p&gt;Most of the time one can simply think of processes, threads and connections as 1-1-1 mapped, and not bother with it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL: good comments conventions</title>
      <link>/blog/mysql/sql-good-comments-conventions/</link>
      <pubDate>Thu, 01 Jul 2010 09:36:32 +0000</pubDate>
      
      <guid>/blog/mysql/sql-good-comments-conventions/</guid>
      <description>&lt;p&gt;I happened upon a customer who left me in awe and admiration. The reason: excellent comments for their SQL code.&lt;/p&gt;
&lt;p&gt;I list four major places where SQL comments are helpful. I&#39;ll use the &lt;a href=&#34;http://dev.mysql.com/doc/sakila/en/sakila.html&#34;&gt;sakila&lt;/a&gt; database. It is originally scarcely commented; I&#39;ll present it now enhanced with comments, to illustrate.&lt;/p&gt;
&lt;h4&gt;Table definitions&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;CREATE TABLE&lt;/strong&gt; statement allows for a comment, intended to describe the nature of the table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE `film_text` (
 `film_id` smallint(6) NOT NULL,
 `title` varchar(255) NOT NULL,
 `description` text,
 PRIMARY KEY (`film_id`),
 FULLTEXT KEY `idx_title_description` (`title`,`description`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 &lt;strong&gt;COMMENT=&#39;Reflection of `film`, used for FULLTEXT search.&#39;&lt;/strong&gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s too bad the comment&#39;s max length is 60 characters, though. However, it&#39;s a very powerful field.&lt;/p&gt;
&lt;h4&gt;Column definitions&lt;/h4&gt;
&lt;p&gt;One may comment particular columns:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE `film` (
 `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
 `title` varchar(255) NOT NULL,
 `description` text,
 `release_year` year(4) DEFAULT NULL,
 `language_id` tinyint(3) unsigned NOT NULL &lt;strong&gt;COMMENT &#39;Soundtrack spoken language&#39;&lt;/strong&gt;,
 `original_language_id` tinyint(3) unsigned DEFAULT NULL &lt;strong&gt;COMMENT &#39;Filmed spoken language&#39;&lt;/strong&gt;,
 `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT &#39;3&#39;,
 `rental_rate` decimal(4,2) NOT NULL DEFAULT &#39;4.99&#39;,
 `length` smallint(5) unsigned DEFAULT NULL,
 `replacement_cost` decimal(5,2) NOT NULL DEFAULT &#39;19.99&#39;,
  ...
) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Stored routines definitions&lt;/h4&gt;
&lt;p&gt;Here&#39;s an original &lt;strong&gt;sakila&lt;/strong&gt; procedure, untouched. It is already commented:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE DEFINER=`root`@`localhost` PROCEDURE `rewards_report`(
 IN min_monthly_purchases TINYINT UNSIGNED
 , IN min_dollar_amount_purchased DECIMAL(10,2) UNSIGNED
 , OUT count_rewardees INT
)
 READS SQL DATA
 &lt;strong&gt;COMMENT &#39;Provides a customizable report on best customers&#39;&lt;/strong&gt;
BEGIN

 DECLARE last_month_start DATE;
 DECLARE last_month_end DATE;
 ...
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;SQL queries&lt;/h4&gt;
&lt;p&gt;Last but not least, while not part of the schema, SQL queries define the use of the schema. That is, the schema exists for the sole reason of being able to query it.&lt;/p&gt;
&lt;p&gt;Where did &lt;em&gt;that&lt;/em&gt; query come from? Which piece of code issued it? Why? What&#39;s its purpose?&lt;/p&gt;
&lt;p&gt;Looking at the &lt;strong&gt;PROCESSLIST&lt;/strong&gt;, the slow log, etc., it is easier when the queries are commented:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
 &lt;strong&gt;/* List film details along with participating actors */&lt;/strong&gt;
 &lt;strong&gt;/* Issued by analytics module */&lt;/strong&gt;
 film.*,
 COUNT(*) AS count_actors,
 GROUP_CONCAT(CONCAT(actor.first_name, &#39; &#39;, actor.last_name))
FROM
 film
 JOIN film_actor USING(film_id)
 JOIN actor USING(actor_id)
GROUP BY film.film_id;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Source code commenting is an important practice, and usually watched out for. SQL &amp;amp; table definitions commenting are often scarce or non-existent. I urge DBAs to adopt a comments coding convention for SQL, and apply it whenever they can.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Views: better performance with condition pushdown</title>
      <link>/blog/mysql/views-better-performance-with-condition-pushdown/</link>
      <pubDate>Thu, 20 May 2010 07:17:05 +0000</pubDate>
      
      <guid>/blog/mysql/views-better-performance-with-condition-pushdown/</guid>
      <description>&lt;p&gt;Justin&#39;s &lt;a href=&#34;http://www.mysqlperformanceblog.com/2010/05/19/a-workaround-for-the-performance-problems-of-temptable-views/&#34;&gt;A workaround for the performance problems of TEMPTABLE views&lt;/a&gt; post on &lt;a href=&#34;http://www.mysqlperformanceblog.com/&#34;&gt;mysqlperformanceblog.com&lt;/a&gt; reminded me of a solution I once saw on a customer&#39;s site.&lt;/p&gt;
&lt;p&gt;The customer was using nested views structure, up to depth of some 8-9 views. There were a lot of aggregations along the way, and even the simplest query resulted with a LOT of subqueries, temporary tables, and vast amounts of data, even if only to return with a couple of rows.&lt;/p&gt;
&lt;p&gt;While we worked to solve this, a developer showed me his own trick. His trick is now impossible to implement, but there&#39;s a hack around this.&lt;/p&gt;
&lt;p&gt;Let&#39;s use the world database to illustrate. Look at the following view definition:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
CREATE
  ALGORITHM=TEMPTABLE
VIEW country_languages AS
  SELECT
    Country.CODE, Country.Name AS country,
    GROUP_CONCAT(CountryLanguage.Language) AS languages
  FROM
    world.Country
    JOIN world.CountryLanguage ON (Country.CODE = CountryLanguage.CountryCode)
  GROUP BY
    Country.CODE;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;The view presents with a list of spoken languages per country. The execution plan for querying this view looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; EXPLAIN SELECT * FROM country_languages;
+----+-------------+-----------------+--------+---------------+---------+---------+-----------------------------------+------+----------------------------------------------+
| id | select_type | table           | type   | possible_keys | key     | key_len | ref                               | rows | Extra                                        |
+----+-------------+-----------------+--------+---------------+---------+---------+-----------------------------------+------+----------------------------------------------+
|  1 | PRIMARY     | &amp;lt;derived2&amp;gt;      | ALL    | NULL          | NULL    | NULL    | NULL                              |  233 |                                              |
|  2 | DERIVED     | CountryLanguage | index  | PRIMARY       | PRIMARY | 33      | NULL                              |  984 | Using index; Using temporary; Using filesort |
|  2 | DERIVED     | Country         | eq_ref | PRIMARY       | PRIMARY | 3       | world.CountryLanguage.CountryCode |    1 |                                              |
+----+-------------+-----------------+--------+---------------+---------+---------+-----------------------------------+------+----------------------------------------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And, even if we only want to filter out a single country, we still get the same plan:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; EXPLAIN SELECT * FROM country_languages WHERE Code=&#39;USA&#39;;
+----+-------------+-----------------+--------+---------------+---------+---------+-----------------------------------+------+----------------------------------------------+
| id | select_type | table           | type   | possible_keys | key     | key_len | ref                               | rows | Extra                                        |
+----+-------------+-----------------+--------+---------------+---------+---------+-----------------------------------+------+----------------------------------------------+
|  1 | PRIMARY     | &amp;lt;derived2&amp;gt;      | ALL    | NULL          | NULL    | NULL    | NULL                              |  233 | Using where                                  |
|  2 | DERIVED     | CountryLanguage | index  | PRIMARY       | PRIMARY | 33      | NULL                              |  984 | Using index; Using temporary; Using filesort |
|  2 | DERIVED     | Country         | eq_ref | PRIMARY       | PRIMARY | 3       | world.CountryLanguage.CountryCode |    1 |                                              |
+----+-------------+-----------------+--------+---------------+---------+---------+-----------------------------------+------+----------------------------------------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, we need to scan the entire country_language and country tables in order to return results for just one row.&lt;/p&gt;
&lt;h4&gt;A non-working solution&lt;/h4&gt;
&lt;p&gt;The solution offered by the developer was this:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
CREATE
  ALGORITHM=MERGE
  VIEW country_languages_non_working AS
  SELECT
    Country.CODE, Country.Name AS country,
    GROUP_CONCAT(CountryLanguage.Language) AS languages
  FROM
    world.Country
    JOIN world.CountryLanguage ON
      (Country.CODE = CountryLanguage.CountryCode)
  WHERE
    Country.CODE = @country_code
  GROUP BY Country.CODE;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;And follow by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SET @country_code=&#39;USA&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; SELECT * FROM country_languages_2;
+------+---------------+----------------------------------------------------------------------------------------------------+
| CODE | country       | languages                                                                                          |
+------+---------------+----------------------------------------------------------------------------------------------------+
| USA  | United States | Chinese,English,French,German,Italian,Japanese,Korean,Polish,Portuguese,Spanish,Tagalog,Vietnamese |
+------+---------------+----------------------------------------------------------------------------------------------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, pushdown a &lt;strong&gt;WHERE&lt;/strong&gt; condition into the view&#39;s definition. The session variable @country_code is used to filter rows. In the above simplified code the value is assumed to be set; tweak it as you see fit (using &lt;strong&gt;IFNULL&lt;/strong&gt;, for example, or &lt;strong&gt;OR&lt;/strong&gt; statements) to allow for full scan in case the variable is undefined.&lt;/p&gt;
&lt;p&gt;This doesn&#39;t work. It used to work a couple years back; but today you cannot create a view which uses session variables or parameters. It is a restriction imposed by views.&lt;/p&gt;
&lt;h4&gt;A workaround&lt;/h4&gt;
&lt;p&gt;Justin showed a workaround using an additional table. There is another workaround which does not involve tables, but rather stored routines. Now, this is a patch, and an ugly one. It may not work in future versions of MySQL for all I know. But, here it goes:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` FUNCTION `get_session_country`() RETURNS CHAR(3)
    NO SQL
    DETERMINISTIC
BEGIN
  RETURN @country_code;
END $$
DELIMITER ;
CREATE
  ALGORITHM=MERGE
  VIEW country_languages_2 AS
  SELECT
    Country.CODE, Country.Name AS country,
    GROUP_CONCAT(CountryLanguage.Language) AS languages
  FROM
    world.Country
    JOIN world.CountryLanguage ON
      (Country.CODE = CountryLanguage.CountryCode)
  WHERE
    Country.CODE = get_session_country()
  GROUP BY Country.CODE;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;And now:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SET @country_code=&#39;USA&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; SELECT * FROM country_languages_2;
+------+---------------+----------------------------------------------------------------------------------------------------+
| CODE | country       | languages                                                                                          |
+------+---------------+----------------------------------------------------------------------------------------------------+
| USA  | United States | Chinese,English,French,German,Italian,Japanese,Korean,Polish,Portuguese,Spanish,Tagalog,Vietnamese |
+------+---------------+----------------------------------------------------------------------------------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&amp;gt; EXPLAIN SELECT * FROM country_languages_2;
+----+-------------+-----------------+--------+---------------+---------+---------+------+------+--------------------------+
| id | select_type | table           | type   | possible_keys | key     | key_len | ref  | rows | Extra                    |
+----+-------------+-----------------+--------+---------------+---------+---------+------+------+--------------------------+
|  1 | PRIMARY     | &amp;lt;derived2&amp;gt;      | system | NULL          | NULL    | NULL    | NULL |    1 |                          |
|  2 | DERIVED     | Country         | const  | PRIMARY       | PRIMARY | 3       |      |    1 |                          |
|  2 | DERIVED     | CountryLanguage | ref    | PRIMARY       | PRIMARY | 3       |      |    8 | Using where; Using index |
+----+-------------+-----------------+--------+---------------+---------+---------+------+------+--------------------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since views are allowed to call stored routines (Justing used this to call upon &lt;strong&gt;CONNECTION_ID()&lt;/strong&gt;), and since stored routines can use session variables, we can take advantage and force the view into filtering out irrelevant rows before these accumulate to temporary tables and big joins.&lt;/p&gt;
&lt;p&gt;Back in the customer&#39;s office, we witnessed, what with their real data and multiple views, a reduction of query times from ~30 minutes to a few seconds.&lt;/p&gt;
&lt;h4&gt;Another kind of use&lt;/h4&gt;
&lt;p&gt;Eventually we worked to make better view definitions and query splitting, resulting in clearer code and fast queries, but this solution plays nicely into another kind of problem:&lt;/p&gt;
&lt;p&gt;Can we force different customers to see different parts of a given table? e.g., only those rows that relate to the customers?&lt;/p&gt;
&lt;p&gt;There can be many solutions: different tables; multiple views (one per customer), stored procedures, what have you. The above provides a solution, and I&#39;ve seen it in use.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Discovery of the day: GROUP BY ... DESC</title>
      <link>/blog/mysql/discovery-of-the-day-group-by-desc/</link>
      <pubDate>Tue, 04 May 2010 11:38:38 +0000</pubDate>
      
      <guid>/blog/mysql/discovery-of-the-day-group-by-desc/</guid>
      <description>&lt;p&gt;I happened on a query where, by mistake, an&lt;/p&gt;
&lt;pre&gt;
SELECT ... ORDER BY x DESC LIMIT 1
&lt;/pre&gt;
&lt;p&gt;was written as&lt;/p&gt;
&lt;pre&gt;
SELECT ... GROUP BY x DESC LIMIT 1
&lt;/pre&gt;
&lt;p&gt;And it took me by surprise to realize &lt;strong&gt;GROUP BY x DESC&lt;/strong&gt; is a valid statement. I looked it up: yep! It&#39;s &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/group-by-modifiers.html&#34;&gt;documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In MySQL, &lt;strong&gt;GROUP BY&lt;/strong&gt; results are sorted according to the group statement. You can override this by adding &lt;strong&gt;ORDER BY NULL&lt;/strong&gt; (see &lt;a href=&#34;http://code.openark.org/blog/mysql/less-known-sql-syntax-and-functions-in-mysql&#34;&gt;past post&lt;/a&gt;). I wasn&#39;t aware you can actually control the sort order.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>But I DO want MySQL to say &#34;ERROR&#34;!</title>
      <link>/blog/mysql/but-i-do-want-mysql-to-say-error/</link>
      <pubDate>Fri, 12 Mar 2010 06:53:28 +0000</pubDate>
      
      <guid>/blog/mysql/but-i-do-want-mysql-to-say-error/</guid>
      <description>&lt;p&gt;MySQL is known for its willingness to accept invalid queries, data values. It can silently commit your transaction, truncate your data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; with a small &lt;strong&gt;group_concat_max_len&lt;/strong&gt; setting? Your result will be silently truncated (make sure to check the warnings though).&lt;/li&gt;
&lt;li&gt;Calling &lt;strong&gt;CREATE &lt;span style=&#34;text-decoration: line-through;&#34;&gt;TEMPORARY&lt;/span&gt; TABLE&lt;/strong&gt;? You get &lt;a href=&#34;http://www.joinfu.com/2010/03/a-follow-up-on-the-sql-puzzle/&#34;&gt;silent commit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Issuing a &lt;strong&gt;ROLLBACK&lt;/strong&gt; on non-transactional involved engines? Have a warning; no error.&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;LOCK IN SHARE MODE&lt;/strong&gt; on non transactional tables? Not a problem. Nothing reported.&lt;/li&gt;
&lt;li&gt;Adding a &lt;strong&gt;FOREIGN KEY&lt;/strong&gt; on a MyISAM table? Good for you; no action actually taken.&lt;/li&gt;
&lt;li&gt;Inserting &lt;strong&gt;300&lt;/strong&gt; to a &lt;strong&gt;TINYINT&lt;/strong&gt; column in a relaxed &lt;strong&gt;sql_mode&lt;/strong&gt;? Give me &lt;strong&gt;255&lt;/strong&gt;, I&#39;ll silently drop the remaining &lt;strong&gt;45&lt;/strong&gt;. I owe you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Warnings and errors&lt;/h4&gt;
&lt;p&gt;It would be nice to:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have an &lt;strong&gt;auto_propagate_warning_to_error&lt;/strong&gt; server variable (global/session/both) which, well, does what it says.&lt;/li&gt;
&lt;li&gt;Have an &lt;strong&gt;i_am_really_not_a_dummy&lt;/strong&gt; server variable which implies stricter checks for all the above and prevents you from doing with &lt;em&gt;anything&lt;/em&gt; that may be problematic (or rolls back your transactions on your invalid actions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connectors may be nice enough to propagate warnings to errors - that&#39;s good. But not enough: since data is already committed in MySQL.&lt;/p&gt;
&lt;p&gt;If I understand correctly, and maybe it&#39;s just a myth, it all relates to the times where MySQL had interest in a widespread adoption across the internet, in such way that it does not interfere too much with the users (hence leading to the common myth that &#34;MySQL just works out of the box and does not require me to configure or understand anything&#34;).&lt;/p&gt;
&lt;p&gt;MySQL is a database system, and is now widespread, and is used by serious companies and products. It is time to stop play nice to everyone and provide with strict integrity -- or, be nice to everyone, just allow me to specify what &#34;nice&#34; means for me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Proper SQL table alias use conventions</title>
      <link>/blog/mysql/proper-sql-table-alias-use-conventions/</link>
      <pubDate>Thu, 11 Mar 2010 09:10:09 +0000</pubDate>
      
      <guid>/blog/mysql/proper-sql-table-alias-use-conventions/</guid>
      <description>&lt;p&gt;After seeing quite some SQL statements over the years, something is bugging me: there is no consistent convention as for how to write an SQL query.&lt;/p&gt;
&lt;p&gt;I&#39;m going to leave formatting, upper/lower-case issues aside, and discuss a small part of the SQL syntax: table aliases. Looking at three different queries, I will describe what I find to be problematic table alias use.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&#34;http://dev.mysql.com/doc/sakila/en/sakila.html&#34;&gt;sakila&lt;/a&gt; database, take a look at the following queries:&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Query #1&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt;
 R.rental_date, C.customer_id, C.first_name, C.last_name
&lt;strong&gt;FROM&lt;/strong&gt;
 rental R
 &lt;strong&gt;JOIN&lt;/strong&gt; customer C &lt;strong&gt;USING&lt;/strong&gt; (customer_id)
&lt;strong&gt;WHERE&lt;/strong&gt;
 R.rental_date &amp;gt;= DATE(&#39;2005-10-01&#39;)
 &lt;strong&gt;AND&lt;/strong&gt; C.store_id=1;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above looks for film rentals done in a specific store (store #&lt;strong&gt;1&lt;/strong&gt;), as of Oct. 1st, 2005.&lt;/p&gt;
&lt;h4&gt;Query #2&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt;
 F.title, C.name
&lt;strong&gt;FROM&lt;/strong&gt;
 film &lt;strong&gt;AS&lt;/strong&gt; F
 &lt;strong&gt;JOIN&lt;/strong&gt; film_category &lt;strong&gt;AS&lt;/strong&gt; S &lt;strong&gt;ON&lt;/strong&gt; (F.film_id = S.film_id)
 &lt;strong&gt;JOIN&lt;/strong&gt; category &lt;strong&gt;AS&lt;/strong&gt; C &lt;strong&gt;ON&lt;/strong&gt; (S.category_id = C.category_id)
&lt;strong&gt;WHERE&lt;/strong&gt; F.length &amp;gt; 180;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above lists the title and category for all films longer than three hours.&lt;/p&gt;
&lt;h4&gt;Query #3&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; c.customer_id, c.last_name
&lt;strong&gt;FROM&lt;/strong&gt;
  customer c
  &lt;strong&gt;INNER JOIN&lt;/strong&gt; address a ON (c.address_id = a.address_id)
  &lt;strong&gt;INNER JOIN&lt;/strong&gt; (
    &lt;strong&gt;SELECT&lt;/strong&gt;
      c.city_id
    &lt;strong&gt;FROM&lt;/strong&gt;
      city AS c
      &lt;strong&gt;JOIN&lt;/strong&gt; country s &lt;strong&gt;ON&lt;/strong&gt; (c.country_id = s.country_id)
    &lt;strong&gt;WHERE&lt;/strong&gt;
      s.country &lt;strong&gt;LIKE&lt;/strong&gt; &#39;F%&#39;
  ) s1 &lt;strong&gt;USING&lt;/strong&gt; (city_id)
&lt;strong&gt;WHERE&lt;/strong&gt;
  create_date &amp;gt;= DATE(&#39;2005-10-01&#39;);
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above lists customers created as of Oct. 1st, 2005, and who live in countries starting with an &#39;F&#39;. The query could be solved without a subquery, but there&#39;s a good reason why I made it so.&lt;/p&gt;
&lt;h4&gt;The problems&lt;/h4&gt;
&lt;p&gt;I used very different conventions on any one of the queries, and sometimes within each query. And it&#39;s common that I see the same on a customer&#39;s site, what with having many programmers do the SQL coding. Again, I will only discuss the table aliases conventions. I&#39;ll leaver the rest to the reader.&lt;/p&gt;
&lt;p&gt;Here&#39;s where I see problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query &lt;strong&gt;#1&lt;/strong&gt;: In itself, it looks fine. &lt;strong&gt;Rental&lt;/strong&gt; turns to &lt;strong&gt;R&lt;/strong&gt;, &lt;strong&gt;Customer&lt;/strong&gt; turns to &lt;strong&gt;C&lt;/strong&gt;. I will comment on this slightly later on when I provide my full opinion.&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#2&lt;/strong&gt;: So &lt;strong&gt;film&lt;/strong&gt; turns to &lt;strong&gt;F&lt;/strong&gt;, &lt;strong&gt;category&lt;/strong&gt; turns to &lt;strong&gt;C&lt;/strong&gt;. What should &lt;strong&gt;film_category&lt;/strong&gt; turn into? &lt;em&gt;Out of letters?&lt;/em&gt; Let&#39;s just go for &lt;strong&gt;S&lt;/strong&gt;, shall we? But &lt;strong&gt;S&lt;/strong&gt; has nothing do with &lt;strong&gt;film_category&lt;/strong&gt;. Yet it&#39;s so commonly seen.&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#2&lt;/strong&gt;: We&#39;re using the &lt;strong&gt;AS&lt;/strong&gt; keyword now. We didn&#39;t use it before.&lt;/li&gt;
&lt;li&gt;Queries &lt;strong&gt;#1&lt;/strong&gt;, &lt;strong&gt;#2&lt;/strong&gt;: Hold on. Wasn&#39;t &lt;strong&gt;C&lt;/strong&gt; taken for &lt;strong&gt;customer&lt;/strong&gt; in Query &lt;strong&gt;#1&lt;/strong&gt;? Now, in Query &lt;strong&gt;#2&lt;/strong&gt; it stands for &lt;strong&gt;category&lt;/strong&gt;? I&#39;m beginning to get confused.&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#3&lt;/strong&gt;: Now aliases are lower case; I was just getting used to them being upper case.&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#3&lt;/strong&gt;: But, hey, &lt;strong&gt;c&lt;/strong&gt; is back to &lt;strong&gt;customer&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#3&lt;/strong&gt;: Or, is it? Take a look at the subquery. Theres another &lt;strong&gt;c&lt;/strong&gt; in there! This time it&#39;s &lt;strong&gt;city&lt;/strong&gt;! And it&#39;s perfectly valid syntax. We actually have two identical aliases in the same query.&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#3&lt;/strong&gt;: If I could, I would name country with &lt;strong&gt;c&lt;/strong&gt; as well. But I can&#39;t. So why not throw in &lt;strong&gt;s&lt;/strong&gt; again?&lt;/li&gt;
&lt;li&gt;Query &lt;strong&gt;#3&lt;/strong&gt;: and now I don&#39;t even bother using the alias when accessing the &lt;strong&gt;create_date&lt;/strong&gt;. Well, there&#39;s no such column in any of the other tables!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Proper conventions&lt;/h4&gt;
&lt;p&gt;What I find so disturbing is that whenever I read a complex query, I need to go back and forth, back and forth between table aliases (found everywhere in the query) and their declaration point. Such irregularities make the queries difficult to read.&lt;/p&gt;
&lt;p&gt;Any of the above issues could be justified. But I wish to make some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decide whether you&#39;re going for upper or lower case.&lt;/li&gt;
&lt;li&gt;Do not use the same alias twice in your query, even if it&#39;s valid.&lt;/li&gt;
&lt;li&gt;Aliases do not have to be single character. &lt;strong&gt;film_category&lt;/strong&gt; may just as well be &lt;strong&gt;FC&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Do not alias something that is hard to interpret. &lt;strong&gt;s&lt;/strong&gt; does not stand for &lt;strong&gt;country&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Think ahead: use same aliases throughout all your queries, as far as you can. If uniqueness is a problem, make for longer aliases. Use &lt;strong&gt;cust&lt;/strong&gt; instead of &lt;strong&gt;c&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above should make for more organized and readable SQL code. Remember: what one programmer finds as a very intuitive alias, is unintuitive to another!&lt;/p&gt;
&lt;h4&gt;My own convention&lt;/h4&gt;
&lt;p&gt;Simple: I &lt;em&gt;only use aliases&lt;/em&gt; when using self joins. I am aware that queries are much longer what with long table names. I go farther than that: I prefer fully qualifying questionable columns throughout the query. Yes, it makes the query even longer.&lt;/p&gt;
&lt;p&gt;I know this does not appeal to many. But there&#39;s no confusion. And it&#39;s easily searchable. And it&#39;s consistent. And if properly formatted, as in the above queries, is well readable.&lt;/p&gt;
&lt;p&gt;Now please join me in asking Oracle if they can add multi-line Strings for java, as there are for python.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>7 ways to convince MySQL to use the right index</title>
      <link>/blog/mysql/7-ways-to-convince-mysql-to-use-the-right-index/</link>
      <pubDate>Thu, 02 Apr 2009 18:06:32 +0000</pubDate>
      
      <guid>/blog/mysql/7-ways-to-convince-mysql-to-use-the-right-index/</guid>
      <description>&lt;p&gt;Sometimes MySQL gets it wrong. It doesn&#39;t use the right index.&lt;/p&gt;
&lt;p&gt;It happens that MySQL generates a query plan which is really bad (EXPLAIN says it&#39;s going to explore some 10,000,000 rows), when another plan (soon to show how was generated) says: &#34;Sure, I can do that with 100 rows using a key&#34;.&lt;/p&gt;
&lt;h4&gt;A true story&lt;/h4&gt;
&lt;p&gt;A customer had issues with his database. Queries were taking 15 minutes to complete, and the db in general was not responsive. Looking at the slow query log, I found the criminal query. Allow me to bring you up to speed:&lt;/p&gt;
&lt;p&gt;A table is defined like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE t (
  id INT UNSIGNED AUTO_INCREMENT,
  type INT UNSIGNED,
  level TINYINT unsigned,
  ...
  PRIMARY KEY(id),
  KEY `type` (type)
) ENGINE=InnoDB;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The offending query was this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id FROM data
WHERE type=12345 AND level &amp;gt; 3
ORDER BY id&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The facts were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`t` has about 10,000,000 rows.&lt;/li&gt;
&lt;li&gt;The index on `type` is selective: about 100 rows per value on average.&lt;/li&gt;
&lt;li&gt;The query took a long time to complete.&lt;/li&gt;
&lt;li&gt;EXPLAIN has shown that MySQL uses the PRIMARY KEY, hence searches 10,000,000 rows, filtered &#34;using where&#34;.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;other&lt;/em&gt; EXPLAIN has shown that by using the `type` key, only 110 rows are expected, to be filtered &#34;using where&#34;, then sorted &#34;using filesort&#34;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So MySQL acknowledged it was generating the wrong plan. The &lt;em&gt;other&lt;/em&gt; plan was better by its own standards.&lt;/p&gt;
&lt;h4&gt;Solving the problem&lt;/h4&gt;
&lt;p&gt;Let&#39;s walk through 7 ways to solve the problem, starting with the more aggressive solutions, refining to achieve desired behavior through subtle changes.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Solution #1: OPTIMIZE&lt;/h4&gt;
&lt;p&gt;If MySQL got it wrong, it may be because the table was frequently changed. This affects the statistics. If we can spare the time (table is locked during that time), we could help out by rebuilding the table.&lt;/p&gt;
&lt;h4&gt;Solution #2: ANALYZE&lt;/h4&gt;
&lt;p&gt;ANALYZE TABLE is less time consuming, in particular on InnoDB, where it is barely noticed. An ANALYZE will update the index statistics and help out in generating better query plans.&lt;/p&gt;
&lt;p&gt;But hold on, the above two solutions are fine, but in the given case, MySQL &lt;em&gt;already&lt;/em&gt; acknowledges better plans are at hand. The fact was I tried to run ANALYZE a few times, to no avail.&lt;/p&gt;
&lt;h4&gt;Solution #3: USE INDEX&lt;/h4&gt;
&lt;p&gt;Since the issue was urgent, my first thought went for the ultimate weapon:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id FROM data USE INDEX(type)
WHERE type=12345 AND level &amp;gt; 3
ORDER BY id&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This instructs MySQL to only consider the indexes listed; in our example, I only want MySQL to consider using the `type` index. It is using this method that generated the &lt;em&gt;other&lt;/em&gt; (good) EXPLAIN result. I could have gone even more ruthless and ask for FORCE INDEX.&lt;/p&gt;
&lt;h4&gt;Solution #4: IGNORE INDEX&lt;/h4&gt;
&lt;p&gt;A similar approach would be to explicitly negate the use of the PRIMARY KEY, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id FROM data IGNORE INDEX(PRIMARY)
WHERE type=12345 AND level &amp;gt; 3
ORDER BY id&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;A moment of thinking&lt;/h4&gt;
&lt;p&gt;The above solutions are &#34;ugly&#34;, in the sense that this is not standard SQL. It&#39;s too MySQL specific.&lt;/p&gt;
&lt;p&gt;I&#39;ve asked the programmers to do a quick rewrite, and had a few moments to consider: why did MySQL insist on using the PRIMARY KEY. Was it because I&#39;ve asked it for the `id` column only? I rewrote as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id, type, level FROM data
WHERE type=12345 AND level &amp;gt; 3
ORDER BY id&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nope. EXPLAIN got me the same bad plan. Then it must be the ORDER BY clause:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id FROM data
WHERE type=12345 AND level &amp;gt; 3&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sure enough, EXPLAIN now  indicates using the `type` index, only reading 110 rows. So MySQL preferred to scan 10,000,000 rows, just so that the rows are generated in the right ORDER, and so no sorting is required, when it could have read 110 rows (where each row is a mere INT) and sort them in no time.&lt;/p&gt;
&lt;p&gt;Armed with this knowledge, a few more options come at hand.&lt;/p&gt;
&lt;h4&gt;Solution #5:Move some logic to the application&lt;/h4&gt;
&lt;p&gt;At about that point I got a message that the programmers were unable to add the USE INDEX part. Why? They were using the EJB framework, which limits your SQL-like queries to something very generic. Well, you can always drop the ORDER BY part and sort on the application side. That isn&#39;t fun, but it&#39;s been done.&lt;/p&gt;
&lt;h4&gt;Solution #6: Negate use of PRIMARY KEY&lt;/h4&gt;
&lt;p&gt;Can we force MySQL to use the `type` index, retain the ORDER BY, and do it all with standard SQL? Sure. The following query does this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id, type, level FROM data
WHERE type=12345 AND level &amp;gt; 3
ORDER BY id+0&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;id+0 is a function on the `id` column. This makes MySQL unable to utilize the PRIMARY KEY (or any other index on `id`, had there been one).&lt;/p&gt;
&lt;p&gt;In his book &#34;&lt;a title=&#34;SQL Tuning by Dan Tow&#34; href=&#34;http://www.amazon.com/SQL-Tuning-Dan-Tow/dp/0596005733&#34;&gt;SQL Tuning&lt;/a&gt;&#34;, Dan Tow dedicates a chapter on hints and tips like the above. He shows how to control the use or non-use of indexes, the order by which subqueries are calculated, and more.&lt;/p&gt;
&lt;p&gt;Unfortunately, the EJB specification said this was not allowed. You could not ORDER BY a fucntion. Only on normal column.&lt;/p&gt;
&lt;h4&gt;Solution #7: Make MySQL think the problem is harder than it really is&lt;/h4&gt;
&lt;p&gt;Almost out of options. Just a moment before settling for sorting on the application side, another issue can be considered: since MySQL was fooled once, can it be fooled again to make things right? Can we fool it to believe that the PRIMARY KEY would not be worthwhile to use? The following query does this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT id, type, level FROM data
WHERE type=12345 AND level &amp;gt; 3
ORDER BY id, type, level&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s reflect on this one. What is the order by which the rows are returned now? Answer: exactly as before. Since `id` is PRIMARY KEY, it is also UNIQUE, so no two `id` values are the same. Therefore, the secondary sorting column is redudant, and so is the following one. We get exactly the same result as &#34;ORDER BY id&#34;.&lt;/p&gt;
&lt;p&gt;But MySQL didn&#39;t catch this. This query caused MySQL to say: &lt;em&gt;&#34;Mmmmm. &#39;ORDER BY id, type, level&#39; is not doable with the PRIMARY KEY only. Well, in this case, I had better used the `type` index&#34;&lt;/em&gt;. Is this a weakness of MySQL? I guess so. Maybe it will be fixed in the future. But this was the fix that made the day.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>`;`.`*`.`.` is a valid column name</title>
      <link>/blog/mysql/is-a-valid-column-name/</link>
      <pubDate>Thu, 12 Feb 2009 06:38:11 +0000</pubDate>
      
      <guid>/blog/mysql/is-a-valid-column-name/</guid>
      <description>&lt;p&gt;And the following query:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT `;`.`*`.`.` FROM `;`.`*`;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;is valid as well. So are the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DROP DATABASE IF EXISTS `;`;
CREATE DATABASE `;`;
CREATE TABLE `;`.`*` (`.` INT);
CREATE TABLE `;`.```` (`.` INT);
CREATE TABLE `;`.`$(ls)` (`.` INT);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!--more--&gt;So, on my Linux machine:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mymachine:/usr/local/mysql/data# ls -l
total 30172
drwx------ 2 mysql mysql     4096 2009-01-11 08:00 ;
-rw-rw---- 1 mysql mysql 18874368 2009-01-09 19:08 ibdata1
-rw-rw---- 1 mysql mysql  5242880 2009-01-09 19:08 ib_logfile0
-rw-rw---- 1 mysql mysql  5242880 2009-01-09 19:08 ib_logfile1
drwxr-x--- 2 mysql mysql     4096 2008-12-09 11:38 mysql
-rw-rw---- 1 mysql mysql  1423612 2009-01-11 08:00 mysql-bin.000001
-rw-rw---- 1 mysql mysql       19 2009-01-04 09:05 mysql-bin.index
drwx------ 2 mysql mysql     4096 2008-12-21 13:58 sakila
-rw-rw---- 1 mysql root      9783 2009-01-04 09:05 mymachine.err
-rw-rw---- 1 mysql mysql        6 2009-01-04 09:05 mymachine
.pid
drwx------ 2 mysql mysql     4096 2009-01-04 08:30 world&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well then...&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mymachine:/usr/local/mysql/data# &lt;strong&gt;cd ;&lt;/strong&gt;
root@mymachine:~#&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Trying again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mymachine:~# &lt;strong&gt;cd -&lt;/strong&gt;
/usr/local/mysql/data
root@mymachine:/usr/local/mysql/data# &lt;strong&gt;cd &#34;;&#34;&lt;/strong&gt;
root@mymachine:/usr/local/mysql/data/;#&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mymachine:/usr/local/mysql/data/;# &lt;strong&gt;ls -l *.frm&lt;/strong&gt;
-rw-rw---- 1 mysql mysql 8554 2009-01-11 08:00 `.frm
-rw-rw---- 1 mysql mysql 8554 2009-01-11 08:00 *.frm
-rw-rw---- 1 mysql mysql 8554 2009-01-11 08:00 $(ls).frm&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, sorry, I meant:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mymachine:/usr/local/mysql/data/;# &lt;strong&gt;ls -l &#34;*&#34;.frm&lt;/strong&gt;
-rw-rw---- 1 mysql mysql 8554 2009-01-11 08:00 *.frm&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Weird.&lt;/p&gt;
&lt;p&gt;As a nice surprise, though, the dot (.) is not allowed in database or table names (but is allowed in column names). Nor are the slash (/) and backslash (\). Look &lt;a title=&#34;Schema Object Names&#34; href=&#34;http://dev.mysql.com/doc/refman/5.0/en/identifiers.html&#34;&gt;here&lt;/a&gt; for more on this.&lt;/p&gt;
&lt;h4&gt;Support for non English naming&lt;/h4&gt;
&lt;p&gt;I kinda new about this all along, but never thought of the consequences. It&#39;s nice to have a relaxed naming rule (I can even name my tables in Hebrew if I like), but &#34;nice&#34; doesn&#39;t always play along with &#34;practical&#34;.&lt;/p&gt;
&lt;p&gt;As a Hebrew speaker, I repeatedly encounter issues with using my language. In many applications Hebrew encoding is not supported (many times even UTF8 isn&#39;t). Not to mention the fact that Hebrew is written from right to left. On many occasion I was irritated by the lack of support for non-English or non-ASCII characters.&lt;/p&gt;
&lt;p&gt;But not always and not everywhere. I&#39;ve had my share of programming languages, and, to be honest, I never expected my programming language to support UTF8 encoding for function names, variables, modules, packages or whatever. Using &#34;a-zA-Z0-9_&#34; is &lt;em&gt;just fine&lt;/em&gt;. Many people who are not well familiar with English just name their variables in their native language, but written with English characters. This works well till you get someone from outside the country, who doesn&#39;t speak the language and does not understand (nor can pronounce, nor has the matching keyboard layout or knows how to use it) the names.&lt;/p&gt;
&lt;p&gt;In the same way, I have no wish for my table names to be named in Hebrew, German or Japanese names. English is &lt;em&gt;just fine&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Using non-letter characters just adds to the mess. Popular &#34;command&#34; characters such as &#39;~&#39;, &#39;,&#39;, &#39;:&#39;, &#39;;&#39;, &#39;*&#39;, &#39;?&#39;, &#39;(&#39;, &#39;$&#39; are better left alone. They don&#39;t belong in database or table names (mapped to file names) or column names (internally handled by MySQL).&lt;/p&gt;
&lt;p&gt;English has become the &lt;em&gt;de-facto&lt;/em&gt; computer world language. Programming languages, file systems, TCP/IP protocols, SQL: everything &#34;speaks&#34; English.&lt;/p&gt;
&lt;h4&gt;Security&lt;/h4&gt;
&lt;p&gt;There&#39;s another aspect, though: security. It may sound silly, but you can actually write complete scripts in a table&#39;s name! Not wanting to give the wrong idea, I&#39;m not presenting some table names which can wreak havoc on your machine if used improperly.&lt;/p&gt;
&lt;p&gt;But think about it: don&#39;t we all use a couple of scripts which backup/clean/automate some stuff for us? Don&#39;t these scripts just go ahead and read some table names, then do stuff on those tables? How well do they trust table names?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>REPLACE INTO: think twice</title>
      <link>/blog/mysql/replace-into-think-twice/</link>
      <pubDate>Wed, 17 Dec 2008 09:03:19 +0000</pubDate>
      
      <guid>/blog/mysql/replace-into-think-twice/</guid>
      <description>&lt;p&gt;The &lt;a title=&#34;REPLACE Syntax&#34; href=&#34;http://dev.mysql.com/doc/refman/5.0/en/replace.html&#34;&gt;REPLACE [INTO]&lt;/a&gt; syntax allows us to INSERT a row into a table, except that if a UNIQUE KEY (including PRIMARY KEY) violation occurs, the old row is deleted prior to the new INSERT, hence no violation.&lt;/p&gt;
&lt;p&gt;Sounds very attractive, and has a nice syntax as well: the same syntax as a normal INSERT INTO&#39;s. It certainly has a nicer syntax than &lt;a title=&#34;INSERT ... ON DUPLICATE KEY UPDATE Syntax&#34; href=&#34;http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html&#34;&gt;INSERT INTO ... ON DUPLICATE KEY UPDATE&lt;/a&gt;, and it&#39;s certainly shorter than using a SELECT to see if a row exists, then doing either INSERT or UPDATE.&lt;/p&gt;
&lt;p&gt;But weak hearted people as myself should be aware of the following: it is a heavyweight solution. It may be just what you were looking for in terms of ease of use, but the fact is that on duplicate keys, a DELETE and INSERT are performed, and this calls for a closer look.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Whenever a row is deleted, all indexes need to be updated, and most importantly the PRIMARY KEY. When a new row is inserted, the same happens. Especially on InnoDB tables (because of their clustered nature), this means much overhead. The restructuring of an index is an expensive operation. Index nodes may need to be merged upon DELETE. Nodes may need to be split due to INSERT. After many REPLACE INTO executions, it is most probable that your index is more fragmented than it would have been, had you used SELECT/UPDATE or INSERT INTO ... ON DUPLICATE KEY&lt;/p&gt;
&lt;p&gt;Also, there&#39;s the notion of &#34;well, if the row isn&#39;t there, we create it. If it&#39;s there, it simply get&#39;s updated&#34;. This is false. The row doesn&#39;t just get updated, it is completely removed. The problem is, if there&#39;s a PRIMARY KEY on that table, and the REPLACE INTO does not specify a value for the PRIMARY KEY (for example, it&#39;s an AUTO_INCREMENT column), the new row gets a different value, and this may not be what you were looking for in terms of behavior.&lt;/p&gt;
&lt;p&gt;Many uses of REPLACE INTO have no intention of changing PRIMARY KEY (or other UNIQUE KEY) values. In that case, it&#39;s better left alone. On a production system I&#39;ve seen, changing REPLACE INTO to INSERT INTO ... ON DPLICATE KEY resulted in a ten fold more throughput (measured in queries per second) and a drastic decrease in IO operations and in load average.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL&#39;s character sets and collations demystified</title>
      <link>/blog/mysql/mysqls-character-sets-and-collations-demystified/</link>
      <pubDate>Mon, 08 Dec 2008 08:44:24 +0000</pubDate>
      
      <guid>/blog/mysql/mysqls-character-sets-and-collations-demystified/</guid>
      <description>&lt;p&gt;MySQL&#39;s character sets and collations are often considered as a mystery, and many users either completely disregard them and keep with the defaults, or set everything to UTF8.&lt;/p&gt;
&lt;p&gt;This post will attempt to shed some light on the mystery, and provide with some best practices for use with text columns with regard to character sets.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Character Sets&lt;/h4&gt;
&lt;p&gt;A thorough discussion of how the character sets have evolved through history is beyond the scope of this post. While the Unicode standard is gaining recognition, the &#34;older&#34; character sets are still around. Understanding the difference between Unicode and local character sets is crucial.&lt;/p&gt;
&lt;p&gt;Consider, for example, MySQL&#39;s &lt;strong&gt;&lt;code&gt;latin1&lt;/code&gt;&lt;/strong&gt; character set. In this character set there are 256 different characters, represented by one byte. The first 128 characters map to ASCII, the standard &#34;ABCabc012 dot comma&#34; set, of which most of this post is composed. The latter 128 characters in &lt;strong&gt;&lt;code&gt;latin1&lt;/code&gt;&lt;/strong&gt; are composed of West European specific characters, such as À, ë, õ, Ñ.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;&lt;code&gt;Name VARCHAR(60) CHARSET latin1&lt;/code&gt;&lt;/strong&gt; column can describe names with West European characters. But it cannot describe Russian or Hebrew names. To represent a name in Hebrew, you&#39;d need the &lt;strong&gt;&lt;code&gt;hebrew&lt;/code&gt;&lt;/strong&gt; charset (ISO 8859-8), in which the first 128 characters are, as always, mapped to ASCII, and the latter 128 characters describe the Hebrew alphabet and punctuation marks, such as ש,ל,מ,ה. The Cyrillic, Arabic and Turkish charsets follow in a similar manner.&lt;/p&gt;
&lt;p&gt;Assume now I&#39;m building a world wide web application, such as a popular social network. I would like to store the first names of my users, in every possible language. None of the above character sets support all languages. I therefore turn to &lt;a title=&#34;What is Unicode&#34; href=&#34;http://www.unicode.org/standard/WhatIsUnicode.html&#34;&gt;Unicode&lt;/a&gt;. In particular, MySQL supports &lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt;, a Unicode encoding scheme, which is commonly used due to its economic storage requirements.&lt;/p&gt;
&lt;p&gt;In Unicode there is a dedicated number for each letter in the known languages, in ancient languages, and some imaginary or otherwise non existing languages, such as Klingon (yes, I know there are people who actually speak Klingon), may yet find their way into the standard.&lt;/p&gt;
&lt;p&gt;UTF8 (or utf8), a Unicode encoding scheme, states the following: for ASCII characters, such as &#39;a&#39;, &#39;6&#39;, &#39;$&#39;, only one byte of storage is required. For Hebrew, Cyrillic or Turkish characters, 2 bytes are required. For Japanese, Chinese - more (MySQL supports up to 3 bytes per character). Again, the exact details of the implementation are beyond the scope of this post, and are well described &lt;a title=&#34;UTF-8 and Unicode FAQ&#34; href=&#34;http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8&#34;&gt;here&lt;/a&gt; and &lt;a title=&#34;Wikipedia - UTF-8&#34; href=&#34;http://en.wikipedia.org/wiki/UTF-8&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What&#39;s important to me is that I can define &lt;strong&gt;&lt;code&gt;Name VARCHAR(30) CHARSET utf8&lt;/code&gt;&lt;/strong&gt; for my columns, and Voila! Any name can be represented in my database.&lt;/p&gt;
&lt;h4&gt;So why not define everything as utf8 and get done with it?&lt;/h4&gt;
&lt;p&gt;Well, it just so happens that Unicode comes with a price. See, for example, the following column definition:&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;CountryCode CHAR(3) CHARSET utf8&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;We are asking for a column with 3 characters exactly. The required storage for this column will be such that any 3-letter name must fit in. This means (3 characters) times (3 bytes per character) = 9 bytes of storage. So &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt; together may be less than ideal.&lt;strong&gt;&lt;code&gt; VARCHAR&lt;/code&gt;&lt;/strong&gt; behaves better: it only requires as many bytes per character as described above. So the text &#34;abc&#34; will only require 3 bytes (plus &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;&#39;s leading 1 or 2 bytes).&lt;/p&gt;
&lt;h4&gt;Why don&#39;t we drop the &#39;CHAR&#39; altogether, then, and use only &#39;VARCHAR&#39;?&lt;/h4&gt;
&lt;p&gt;Because some values are simply better represented with &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt;: consider a &#34;password&#34; column, encoded with MD5. The &lt;strong&gt;&lt;code&gt;MD5()&lt;/code&gt;&lt;/strong&gt; function returns a 32 characters long text. It&#39;s always 32 characters, and, moreover, it&#39;s always in ASCII. The best data type and character set definition would be &lt;strong&gt;&lt;code&gt;password CHAR(32) CHARSET ascii&lt;/code&gt;&lt;/strong&gt;. We thus ensure exactly 32 bytes are allocated to this column. A &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; will acquire an additional byte or two, depending on its defined length, which will indicate the length of the text.&lt;/p&gt;
&lt;h4&gt;And why would I care about collations?&lt;/h4&gt;
&lt;p&gt;Collations deal with text comparison. We observed that the default character set in MySQL is &lt;strong&gt;&lt;code&gt;latin1&lt;/code&gt;&lt;/strong&gt;. The default collation is &lt;strong&gt;&lt;code&gt;latin1_swedish_ci&lt;/code&gt;&lt;/strong&gt;. In this collation the following holds true: &lt;strong&gt;&lt;code&gt;&#39;ABC&#39; = &#39;abc&#39;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Wait. What?&lt;/p&gt;
&lt;p&gt;Look at the &#34;ci&#34; in &lt;strong&gt;&lt;code&gt;latin1_swedish_ci&lt;/code&gt;&lt;/strong&gt;. It stands for &#34;case insensitive&#34;. Collations which end with &#34;cs&#34; or &#34;bin&#34; are case sensitive. The &lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt; character set comes with &lt;strong&gt;&lt;code&gt;utf8_general_ci&lt;/code&gt;&lt;/strong&gt; collation. This can make sense. Let&#39;s review our web application table (I&#39;m using plain text passwords here, bare with me for this example):&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE my_users (
  name VARCHAR(30) CHARSET utf8 COLLATE utf8_general_ci,
  plainPassword VARCHAR(16) CHARSET ASCII,
  UNIQUE KEY (name)
);
INSERT INTO my_users (name, password) VALUES (&#39;David&#39;, &#39;mypass&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It holds true that the name &#39;David&#39; equals &#39;david&#39;. If I were to &lt;strong&gt;&lt;code&gt;SELECT * FROM my_users WHERE name=&#39;david&#39;&lt;/code&gt;&lt;/strong&gt;, I would find the desired row. The unique key will also guarantee that no daVID user can be added.&lt;/p&gt;
&lt;p&gt;But David certainly wouldn&#39;t want users to login with the password &#39;MYPASS&#39;. So we refine our table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE my_users (
  name VARCHAR(30) CHARSET utf8 COLLATE utf8_general_ci,
  plainPassword VARCHAR(16) CHARSET ascii COLLATE ascii_bin,
  UNIQUE KEY (name)
);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;ascii_bin&lt;/code&gt;&lt;/strong&gt; collation is a case sensitive collation for &lt;strong&gt;&lt;code&gt;ascii&lt;/code&gt;&lt;/strong&gt;. The following will not find anything:&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;SELECT * FROM my_users WHERE name=&#39;david&#39; AND plainPassword=&#39;MYPASS&#39;;&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;Holding a plain text password in your database is not a best practice, but apparently it&#39;s common.&lt;/p&gt;
&lt;p&gt;Collations also deal with text ordering. For any two strings, the collation determines which is larger, or if they are equal. Probably the most common situation you see collations in action is when you &lt;strong&gt;ORDER BY&lt;/strong&gt; a text column.&lt;/p&gt;
&lt;h4&gt;Also keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When you check for length of strings, do you use the &lt;strong&gt;&lt;code&gt;LENGTH()&lt;/code&gt;&lt;/strong&gt; function, as in &lt;strong&gt;&lt;code&gt;SELECT LENGTH(Name) FROM City&lt;/code&gt;&lt;/strong&gt;? You probably wish to replace this with &lt;strong&gt;&lt;code&gt;CHAR_LENGTH()&lt;/code&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;code&gt;LENGTH()&lt;/code&gt;&lt;/strong&gt; returns the number of bytes required for the text storage. &lt;strong&gt;&lt;code&gt;CHAR_LENGTH()&lt;/code&gt;&lt;/strong&gt; returns the number of characters in the text, and is usually what you are looking for. It may hold true that for a string s, &lt;strong&gt;&lt;code&gt;LENGTH(s)=12&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;CHAR_LENGTH(s)=8&lt;/code&gt;&lt;/strong&gt;. Watch out for these glitches.&lt;/li&gt;
&lt;li&gt;You can converts texts between character sets with &lt;strong&gt;&lt;code&gt;CONVERT&lt;/code&gt;&lt;/strong&gt;. For example: &lt;strong&gt;&lt;code&gt;CONVERT(s USING utf8)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Stored routines should not be overlooked. If your stored routine accepts a text argument, or if your stored function returns one, make sure the character sets are properly defined. If not, then your utf8 text may be converted to latin1 during the call to your stored routine. This also applies to local parameters within the stored routines.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;&lt;code&gt;ALTER TABLE &lt;em&gt;&amp;lt;some table&amp;gt;&lt;/em&gt; CONVERT TO &lt;em&gt;&amp;lt;some charset&amp;gt;&lt;/em&gt;&lt;/code&gt;&lt;/strong&gt; will change the character set not only for the table itself, but also for all existing textual columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the following post: &lt;a title=&#34;Useful database analysis queries with INFORMATION_SCHEMA&#34; href=&#34;http://code.openark.org/blog/mysql/useful-database-analysis-queries-with-information_schema&#34;&gt;Useful database analysis queries with INFORMATION_SCHEMA&lt;/a&gt; for queries which diagnose your databases character sets.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>