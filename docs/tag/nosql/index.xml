<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nosql on code.openark.org</title>
    <link>/blog/tag/nosql/</link>
    <description>Recent content in Nosql on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 02 Feb 2011 08:50:02 +0000</lastBuildDate>
    <atom:link href="/blog/tag/nosql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On generating unique IDs using LAST_INSERT_ID() and other tools</title>
      <link>/blog/mysql/on-generating-unique-ids-using-last_insert_id-and-other-tools/</link>
      <pubDate>Wed, 02 Feb 2011 08:50:02 +0000</pubDate>
      
      <guid>/blog/mysql/on-generating-unique-ids-using-last_insert_id-and-other-tools/</guid>
      <description>&lt;p&gt;There&#39;s a &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/information-functions.html#function_last-insert-id&#34;&gt;trick&lt;/a&gt; for using &lt;strong&gt;LAST_INSERT_ID()&lt;/strong&gt; to generate sequences in MySQL. Quoting from the Manual:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Create a table to hold the sequence counter and initialize               it:
&lt;pre&gt;mysql&amp;gt; &lt;strong&gt;&lt;code&gt;CREATE TABLE sequence (id INT NOT NULL);&lt;/code&gt;&lt;/strong&gt;
mysql&amp;gt; &lt;strong&gt;&lt;code&gt;INSERT INTO sequence VALUES (0);&lt;/code&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Use the table to generate sequence numbers like this:
&lt;pre&gt;mysql&amp;gt; &lt;strong&gt;&lt;code&gt;UPDATE sequence SET id=LAST_INSERT_ID(id+1);&lt;/code&gt;&lt;/strong&gt;
mysql&amp;gt; &lt;strong&gt;&lt;code&gt;SELECT LAST_INSERT_ID();&lt;/code&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This trick calls for trouble.&lt;/p&gt;
&lt;h4&gt;Contention&lt;/h4&gt;
&lt;p&gt;A customer was using this trick to generate unique session IDs for his JBoss sessions. These IDs would eventually be written back to the database in the form of log events. Business go well, and one day the customer adds three new JBoss servers (doubling the amount of webapps). All of a sudden, nothing works quite as it used to. All kinds of queries take long seconds to complete; load average becomes very high.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;A short investigation reveals that a very slight load is enough to make for an accumulation of sequence-UPDATE queries. Dozens of them are active at any given time, waiting for long seconds.&lt;/p&gt;
&lt;p&gt;InnoDB or MyISAM both make for poor response times. No wonder! Everyone&#39;s contending for one lock.&lt;/p&gt;
&lt;h4&gt;Not just one&lt;/h4&gt;
&lt;p&gt;Other queries seem to hang as well. Why?&lt;/p&gt;
&lt;p&gt;It is easy to forget or let go unnoticed that there are quite a few global locks involved with each query. If query cache is activated, then any query must pass through that cache, holding the query cache mutex. There&#39;s a global mutex on MyISAM&#39;s key cache. There&#39;s one on InnoDB&#39;s buffer pool (see multiple buffer pools in InnoDB 5.5), albeit less of an overhead. And there&#39;s the table cache.&lt;/p&gt;
&lt;p&gt;When table cache is enabled, any completed query attempts to return file handles to the cache. Any new query attempts to retrieve handles from the cache. While writing to the cache (extracting, adding), the cache is locked. When everyone&#39;s busy doing the sequence-UPDATE, table cache lock is being abused. Other queries are unable to find the time to squire the lock and get on with their business.&lt;/p&gt;
&lt;h4&gt;What can be done?&lt;/h4&gt;
&lt;p&gt;One could try and increase the &lt;strong&gt;table_open_cache&lt;/strong&gt; value. That may help to some extent, and for limited time. But the more requests are made, the quicker the problem surfaces again. When, in fact, &lt;em&gt;reducing&lt;/em&gt; the &lt;strong&gt;table_open_cache&lt;/strong&gt; to zero (well, minimum value is &lt;strong&gt;1&lt;/strong&gt;) can make for a great impact. If there&#39;s nothing to fight for, everyone just get by on their own.&lt;/p&gt;
&lt;p&gt;I know the following is not a scientific explanation, but it hits me as a good comparison: when my daughter brings a friend over, and there&#39;s a couple of toys, both are happy. A third friend makes for a fight: &lt;em&gt;&#34;I saw it first! She took it from me! I was holding it!&#34;&lt;/em&gt;. Any parent knows the ultimate solution to this kind of fight: take away the toys, and have them find something else to enjoy doing. OK, sorry for this unscientific display, I had to share my daily stress.&lt;/p&gt;
&lt;p&gt;When no table cache is available, a query will go on opening the table by itself, and will not attempt to return the file handle back to the cache. The file handle will simply be destroyed. Now, usually this is not desired. Caching is good. But in our customer&#39;s case, the cost of not using a table cache was minified by the cost of having everyone fight for the sequence table. Reducing the table cache made for an immediate relaxation of the database, with observable poorer responsiveness on peak times, however way better than with large table cache.&lt;/p&gt;
&lt;h4&gt;Other tools?&lt;/h4&gt;
&lt;p&gt;I don&#39;t consider the above to be a good solution. It&#39;s just a temporary hack.&lt;/p&gt;
&lt;p&gt;I actually don&#39;t like the &lt;strong&gt;LAST_INSERT_ID()&lt;/strong&gt; trick. Moreover, I don&#39;t see that it&#39;s the database&#39;s job to provide with unique IDs. Let it do relational stuff. If generating IDs is too intensive, let someone else do it.&lt;/p&gt;
&lt;p&gt;NoSQL solutions provide such a service. &lt;a href=&#34;http://memcached.org/&#34;&gt;Memcached&lt;/a&gt;, &lt;a href=&#34;http://redis.io/&#34;&gt;redis&lt;/a&gt;, &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; (and probably more) all provide with increment functions. Check them out.&lt;/p&gt;
&lt;h4&gt;Application level solutions&lt;/h4&gt;
&lt;p&gt;I actually use an application level solution to generate unique IDs. I mean, there&#39;s always &lt;strong&gt;GUID()&lt;/strong&gt;, but it&#39;s result is just too long. Take a look at the following Java code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;public class Utils {
  private static long lastUniqueNumber = 0;

  public static synchronized long uniqueNumber() {
    long unique = System.currentTimeMillis();
    if (unique &amp;lt;= lastUniqueNumber)
      unique = lastUniqueNumber + 1;
    lastUniqueNumber = unique;
    return unique;
  }
}&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Within a Java application this above method returns with unique IDs, up to 1000 per second on average (and it can perform way more than 1000 times per second).&lt;/p&gt;
&lt;p&gt;On consequential executions of applications on the same machine one would still expect unique values due to the time-related nature of values. However, computer time changes. It&#39;s possible that &lt;strong&gt;System.currentTimeMillis()&lt;/strong&gt; would return a value already used in the past.&lt;/p&gt;
&lt;p&gt;And, what about two processes running on the same machine at the same time? Or on different machine?&lt;/p&gt;
&lt;p&gt;Which is why I use the following combination to generate my unique IDs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server ID (much like MySQL&#39;s server_id parameter). this could be the last byte in the server&#39;s IP address, or just 4 or 5 bits if not too many players are expected.&lt;/li&gt;
&lt;li&gt;Process ID (plain old &lt;em&gt;pid&lt;/em&gt;) which I pass to the Java runtime in the form of system properties. Any two processes running on the same machine are assured to have different IDs. Two consequently spawned processes will have different IDs. The time it would take to cycle the process IDs is way more than would make for a &#34;time glitch&#34; problem as described above&lt;/li&gt;
&lt;li&gt;Current time in milliseconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have to have everything withing 64 bit (BIGINT) then you&#39;ll have to do bit manipulation, and drop some of the MSB on the milliseconds so as to overwrite with server &amp;amp; process IDs.&lt;/p&gt;
&lt;p&gt;If you are willing to have your IDs unique in the bounds of a given time frame (so, for example, a month from now you wouldn&#39;t mind reusing old IDs), then the problem is significantly easier. You may just use &#34;day of month&#34; and &#34;millis since day start&#34; and save those precious bits.&lt;/p&gt;
&lt;h4&gt;Still other?&lt;/h4&gt;
&lt;p&gt;Please share your solutions below!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tales of the Trade #3: MySQL vs. NoSQL</title>
      <link>/blog/mysql/tales-of-the-trade-3-mysql-vs-nosql/</link>
      <pubDate>Mon, 19 Apr 2010 19:30:53 +0000</pubDate>
      
      <guid>/blog/mysql/tales-of-the-trade-3-mysql-vs-nosql/</guid>
      <description>&lt;p&gt;Apparently the message from the comic below was not well conceived.&lt;/p&gt;
&lt;p&gt;Following the strip I&#39;ve added some spoiler notes.&lt;br /&gt;
&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2010/04/tales-of-the-trade-mysql-vs-nosql.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-2335&#34; title=&#34;tales-of-the-trade-mysql-vs-nosql&#34; src=&#34;/blog/blog/assets/tales-of-the-trade-mysql-vs-nosql.png&#34; alt=&#34;&#34; width=&#34;580&#34; height=&#34;2224&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is not about bashing NoSQL. Apparently some people feel this way.&lt;/p&gt;
&lt;p&gt;This is about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trying to judge/analyze NoSQL as if it were a single entity, thereby asking &#34;should I use MySQL or NoSQL&#34;?&lt;/li&gt;
&lt;li&gt;The fact Wikipedia defines NoSQL as a &#34;movement&#34; (who&#39;s the leader?)&lt;/li&gt;
&lt;li&gt;The fact that people are still arguing on how &#34;MySQL&#34; should be pronounced.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>