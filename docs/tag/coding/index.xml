<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on code.openark.org</title>
    <link>/blog/tag/coding/</link>
    <description>Recent content in Coding on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 01 Jul 2010 09:36:32 +0000</lastBuildDate>
    <atom:link href="/blog/tag/coding/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL: good comments conventions</title>
      <link>/blog/mysql/sql-good-comments-conventions/</link>
      <pubDate>Thu, 01 Jul 2010 09:36:32 +0000</pubDate>
      
      <guid>/blog/mysql/sql-good-comments-conventions/</guid>
      <description>&lt;p&gt;I happened upon a customer who left me in awe and admiration. The reason: excellent comments for their SQL code.&lt;/p&gt;
&lt;p&gt;I list four major places where SQL comments are helpful. I&#39;ll use the &lt;a href=&#34;http://dev.mysql.com/doc/sakila/en/sakila.html&#34;&gt;sakila&lt;/a&gt; database. It is originally scarcely commented; I&#39;ll present it now enhanced with comments, to illustrate.&lt;/p&gt;
&lt;h4&gt;Table definitions&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;CREATE TABLE&lt;/strong&gt; statement allows for a comment, intended to describe the nature of the table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE `film_text` (
 `film_id` smallint(6) NOT NULL,
 `title` varchar(255) NOT NULL,
 `description` text,
 PRIMARY KEY (`film_id`),
 FULLTEXT KEY `idx_title_description` (`title`,`description`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 &lt;strong&gt;COMMENT=&#39;Reflection of `film`, used for FULLTEXT search.&#39;&lt;/strong&gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s too bad the comment&#39;s max length is 60 characters, though. However, it&#39;s a very powerful field.&lt;/p&gt;
&lt;h4&gt;Column definitions&lt;/h4&gt;
&lt;p&gt;One may comment particular columns:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE `film` (
 `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
 `title` varchar(255) NOT NULL,
 `description` text,
 `release_year` year(4) DEFAULT NULL,
 `language_id` tinyint(3) unsigned NOT NULL &lt;strong&gt;COMMENT &#39;Soundtrack spoken language&#39;&lt;/strong&gt;,
 `original_language_id` tinyint(3) unsigned DEFAULT NULL &lt;strong&gt;COMMENT &#39;Filmed spoken language&#39;&lt;/strong&gt;,
 `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT &#39;3&#39;,
 `rental_rate` decimal(4,2) NOT NULL DEFAULT &#39;4.99&#39;,
 `length` smallint(5) unsigned DEFAULT NULL,
 `replacement_cost` decimal(5,2) NOT NULL DEFAULT &#39;19.99&#39;,
  ...
) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Stored routines definitions&lt;/h4&gt;
&lt;p&gt;Here&#39;s an original &lt;strong&gt;sakila&lt;/strong&gt; procedure, untouched. It is already commented:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE DEFINER=`root`@`localhost` PROCEDURE `rewards_report`(
 IN min_monthly_purchases TINYINT UNSIGNED
 , IN min_dollar_amount_purchased DECIMAL(10,2) UNSIGNED
 , OUT count_rewardees INT
)
 READS SQL DATA
 &lt;strong&gt;COMMENT &#39;Provides a customizable report on best customers&#39;&lt;/strong&gt;
BEGIN

 DECLARE last_month_start DATE;
 DECLARE last_month_end DATE;
 ...
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;SQL queries&lt;/h4&gt;
&lt;p&gt;Last but not least, while not part of the schema, SQL queries define the use of the schema. That is, the schema exists for the sole reason of being able to query it.&lt;/p&gt;
&lt;p&gt;Where did &lt;em&gt;that&lt;/em&gt; query come from? Which piece of code issued it? Why? What&#39;s its purpose?&lt;/p&gt;
&lt;p&gt;Looking at the &lt;strong&gt;PROCESSLIST&lt;/strong&gt;, the slow log, etc., it is easier when the queries are commented:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
 &lt;strong&gt;/* List film details along with participating actors */&lt;/strong&gt;
 &lt;strong&gt;/* Issued by analytics module */&lt;/strong&gt;
 film.*,
 COUNT(*) AS count_actors,
 GROUP_CONCAT(CONCAT(actor.first_name, &#39; &#39;, actor.last_name))
FROM
 film
 JOIN film_actor USING(film_id)
 JOIN actor USING(actor_id)
GROUP BY film.film_id;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Source code commenting is an important practice, and usually watched out for. SQL &amp;amp; table definitions commenting are often scarce or non-existent. I urge DBAs to adopt a comments coding convention for SQL, and apply it whenever they can.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>