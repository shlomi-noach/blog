<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stored Routines on code.openark.org</title>
    <link>/blog/tag/stored-routines/</link>
    <description>Recent content in Stored Routines on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Fri, 07 Aug 2015 14:39:59 +0000</lastBuildDate>
    <atom:link href="/blog/tag/stored-routines/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Baffling 5.7 global/status variables issues, unclean migration path</title>
      <link>/blog/mysql/baffling-5-7-globalstatus-variables-issues-unclean-migration-path/</link>
      <pubDate>Fri, 07 Aug 2015 14:39:59 +0000</pubDate>
      
      <guid>/blog/mysql/baffling-5-7-globalstatus-variables-issues-unclean-migration-path/</guid>
      <description>&lt;p&gt;MySQL &lt;strong&gt;5.7&lt;/strong&gt; introduces a change in the way we query for global variables and status variables: the &lt;strong&gt;INFORMATION_SCHEMA.(GLOBAL|SESSION)_(VARIABLES|STATUS)&lt;/strong&gt; tables are now deprecated and empty. Instead, we are to use the respective &lt;strong&gt;performance_schema.(global|session)_(variables|status)&lt;/strong&gt; tables.&lt;/p&gt;
&lt;p&gt;But the change goes farther than that; there is also a security change. Oracle created a pitfall of &lt;strong&gt;2&lt;/strong&gt; changes at the same time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variables/status moved to a different table&lt;/li&gt;
&lt;li&gt;Privileges required on said table&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an example, my non-root user gets:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; show session variables like &#39;tx_isolation&#39;;
ERROR 1142 (42000): SELECT command denied to user &#39;normal_user&#39;@&#39;my_host&#39; for table &#39;session_variables&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Who gets affected by this? Nearly &lt;em&gt;everyone and everything&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your Nagios will not be able to read status variables&lt;/li&gt;
&lt;li&gt;Your ORM will not be able to determine session variables&lt;/li&gt;
&lt;li&gt;Your replication user will fail connecting (see &lt;a href=&#34;http://datacharmer.blogspot.nl/2015/08/mysql-578-features-bugs-and-rumors.html&#34;&gt;this post by Giuseppe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;And most everyone else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with the above is that involves two unrelated changes to your setup, which are not entirely simple to coordinate:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change your app code to choose the correct schema (information_schema vs. performance_schema)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GRANT&lt;/strong&gt; the permissions on your database&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Perhaps at this point you still do not consider this to be a problem. You may be thinking: &lt;em&gt;well, let&#39;s first prepare by creating the GRANTs, and once that is in place, we can, at our leisure, modify the code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Not so fast. Can you really that simply create those GRANTs?&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;Migration woes&lt;/h3&gt;
&lt;p&gt;How do you migrate to a new MySQL version? You do not reinstall all your servers. You want an easy migration path, and that path is: introduce one or two slaves of a newer version, see that everything works to your satisfaction, slowly upgrade all your other slaves, eventually switchover/upgrade your master.&lt;/p&gt;
&lt;p&gt;This should not be any different for &lt;strong&gt;5.7&lt;/strong&gt;. We would like to provision a &lt;strong&gt;5.7&lt;/strong&gt; slave in our topologies and just see that everything works. Well, we have, and things don&#39;t just work. Our Nagios stops working for that &lt;strong&gt;5.7&lt;/strong&gt; slave. &lt;em&gt;Orchestrator&lt;/em&gt; started complaining (by this time I&#39;ve &lt;a href=&#34;https://github.com/outbrain/orchestrator/releases/tag/v1.4.291&#34;&gt;already fixed it&lt;/a&gt; to be more tolerant for the &lt;strong&gt;5.7&lt;/strong&gt; problems so no crashes here).&lt;/p&gt;
&lt;p&gt;I hope you see the problem by now.&lt;/p&gt;
&lt;blockquote&gt;You cannot issue a &lt;strong&gt;GRANT SELECT ON performance_schema.global_variables TO &#39;...&#39;&lt;/strong&gt; on your &lt;strong&gt;5.6&lt;/strong&gt; master.&lt;/blockquote&gt;
&lt;p&gt;The table simply does not exist there, which means the statement will not go to binary logs, which means it will not replicate on your &lt;strong&gt;5.7&lt;/strong&gt; slave, which means you will not be able to &lt;strong&gt;SHOW GLOBAL VARIABLES&lt;/strong&gt; on your slave, which means everything remains broken.&lt;/p&gt;
&lt;p&gt;Yes, you can issue this directly on your &lt;strong&gt;5.7&lt;/strong&gt; slaves. It&#39;s &lt;em&gt;doable&lt;/em&gt;, but &lt;em&gt;undesired&lt;/em&gt;. It&#39;s ugly in terms of automation (and will quite possibly break some assumptions and sanity checks your automation uses); in terms of validity testing. It&#39;s unfriendly to GTID (make sure to &lt;strong&gt;SET SQL_LOG_BIN=0&lt;/strong&gt; before that).&lt;/p&gt;
&lt;h3&gt;WHY in the first place?&lt;/h3&gt;
&lt;p&gt;It seems like a security thing. I&#39;m not sure whether this was intended. So you prevent a &lt;strong&gt;SHOW GLOBAL VARIABLES&lt;/strong&gt; for a normal user. Makes sense. And yet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; show global variables like &#39;hostname&#39;;
ERROR 1142 (42000): SELECT command denied to user &#39;normal_user&#39;@&#39;my_host&#39; for table &#39;global_variables&#39;

mysql&amp;gt; select @@global.hostname;
+---------------------+
| @@global.hostname   |
+---------------------+
| myhost.mydomain.com |
+---------------------+

mysql&amp;gt; select @@version;
+--------------+
| @@version    |
+--------------+
| 5.7.8-rc-log |
+--------------+

&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems like I&#39;m allowed access to that info after all. So it&#39;s not strictly a security design decision. For status variable, I admit, I don&#39;t have a similar workaround.&lt;/p&gt;
&lt;h3&gt;Solutions?&lt;/h3&gt;
&lt;p&gt;The following are meant to be solutions, but do not really solve the problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SHOW&lt;/strong&gt; commands. &lt;strong&gt;SHOW GLOBAL|SESSION VARIABLES|STATUS&lt;/strong&gt; will work properly, and will implicitly know whether to provide the results via &lt;strong&gt;information_schema&lt;/strong&gt; or &lt;strong&gt;performance_schema&lt;/strong&gt; tables.
&lt;ul&gt;
&lt;li&gt;But, aren&#39;t we meant to be happier with &lt;strong&gt;SELECT&lt;/strong&gt; queries? So that I can really do stuff that is smarter than &lt;strong&gt;LIKE &#39;variable_name%&#39;&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;And of course you cannot use &lt;strong&gt;SHOW&lt;/strong&gt; in server side cursors. Your stored routines are in a mess now.&lt;/li&gt;
&lt;li&gt;This does not solve the GRANTs problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_show_compatibility_56&#34;&gt;show_compatibility_56&lt;/a&gt;&lt;/strong&gt;: an introduced variable in &lt;strong&gt;5.7&lt;/strong&gt;, boolean. It truly is a time-travel-paradox novel in disguise, in multiple respects.
&lt;ul&gt;
&lt;li&gt;Documentation introduces it, and says it is deprecated.
&lt;ul&gt;
&lt;li&gt;time-travel-paradox :O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;But it actually works in &lt;strong&gt;5.7.8&lt;/strong&gt; (latest)
&lt;ul&gt;
&lt;li&gt;time-travel-paradox plot thickens&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your automation scripts do not know in advance whether your MySQL has this variable
&lt;ul&gt;
&lt;li&gt;Hence &lt;strong&gt;SELECT @@global.show_compatibility_56&lt;/strong&gt; will produce an error on &lt;strong&gt;5.6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;But the &#34;safe&#34; way of &lt;strong&gt;SHOW GLOBAL VARIABLES LIKE &#39;show_compatibility_56&#39;&lt;/strong&gt; will fail on a privilege error on &lt;strong&gt;5.7&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;time-travel-paradox :O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actually advised by my colleague Simon J. Mudd, &lt;strong&gt;show_compatibility_56&lt;/strong&gt; defaults to &lt;strong&gt;OFF&lt;/strong&gt;. I &lt;em&gt;support&lt;/em&gt; this line of thought. Or else it&#39;s &lt;strong&gt;old_passwords=1&lt;/strong&gt; all over again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;show_compatibility_56&lt;/strong&gt; doesn&#39;t solve the GRANTs problem.&lt;/li&gt;
&lt;li&gt;This does not solve any migration path. It just postpones the moment when I will hit the same problem. When I flip the variable from &lt;strong&gt;&#34;1&#34;&lt;/strong&gt; to &lt;strong&gt;&#34;0&#34;&lt;/strong&gt;, I&#39;m back at square one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Suggestion&lt;/h3&gt;
&lt;p&gt;I claim security is not the issue, as presented above. I claim Oracle will yet again fall into the trap of no-easy-way-to-migrate-to-GTID in &lt;strong&gt;5.6&lt;/strong&gt; if the current solution is unchanged. I claim that there have been too many changes at once. Therefore, I suggest one of the alternative two flows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flow 1&lt;/strong&gt;: keep &lt;strong&gt;information_schema&lt;/strong&gt;, later migration into &lt;strong&gt;performance_schema&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;5.7&lt;/strong&gt;, &lt;strong&gt;information_schema&lt;/strong&gt; tables should still produce the data.&lt;/li&gt;
&lt;li&gt;No security constraints on &lt;strong&gt;information_schema&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Generate WARNINGs on reading from &lt;strong&gt;information_schema&lt;/strong&gt; (&#34;...this will be deprecated...&#34;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;performance_schema &lt;/strong&gt;&lt;em&gt;also available&lt;/em&gt;. With security constraints, whatever.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;5.8&lt;/strong&gt; remove &lt;strong&gt;information_schema&lt;/strong&gt; tables; we are left with &lt;strong&gt;performance_schema&lt;/strong&gt; only.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flow 2&lt;/strong&gt;: easy migration into &lt;strong&gt;performance_schema&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;5.7&lt;/strong&gt;, &lt;strong&gt;performance_schema&lt;/strong&gt; tables should not require any special privileges. Any user can read from them.&lt;/li&gt;
&lt;li&gt;Keep &lt;strong&gt;show_compatibility_56 &lt;/strong&gt;as it is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SHOW&lt;/strong&gt; commands choose between &lt;strong&gt;information_schema&lt;/strong&gt; or &lt;strong&gt;performance_schema&lt;/strong&gt; on their own -- just as things are done now.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;5.8&lt;/strong&gt;, &lt;strong&gt;performance_schema&lt;/strong&gt; tables will require &lt;strong&gt;SELECT&lt;/strong&gt; privileges.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As always, I love the work done by the engineers; and I love how they listen to the community.&lt;/p&gt;
&lt;p&gt;Comments are most welcome. Have I missed the simple solution here? Are there even more complications to these features? Thoughts on my suggested two flows?&lt;/p&gt;
&lt;h3&gt;[UPDATE 2015-08-19]&lt;/h3&gt;
&lt;p&gt;Please &lt;a href=&#34;http://www.tocker.ca/2015/08/18/a-followup-on-show_compatibility_56.html&#34;&gt;see this followup&lt;/a&gt; by Morgan Tocker of Oracle.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why delegating code to MySQL Stored Routines is poor engineering practice</title>
      <link>/blog/mysql/why-delegating-code-to-mysql-stored-routines-is-poor-engineering-practice/</link>
      <pubDate>Thu, 06 Feb 2014 10:32:17 +0000</pubDate>
      
      <guid>/blog/mysql/why-delegating-code-to-mysql-stored-routines-is-poor-engineering-practice/</guid>
      <description>&lt;p&gt;I happen to use stored routines with MySQL. In fact, my open source project &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt; heavily utilizes them. DBA-wise, I think they provide with a lot of power (alas, the ANSI:SQL 2003 syntax feels more like COBOL than a sane programming language, which is why I use &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script.html&#34;&gt;QueryScript&lt;/a&gt; instead).&lt;/p&gt;
&lt;p&gt;However I wish to discuss the use of stored routines as integral part of your application code, which I discourage.&lt;/p&gt;
&lt;p&gt;The common discussion on whether to user or not use stored routines typically revolves around data transfer (with stored routines you transfer less data since it&#39;s being processed on server side), security (with stored routines you can obfuscate/hide internal datasets, and provide with limited and expected API) and performance (with MySQL this is not what you would expect, as routines are interpreted &amp;amp; their queries re-evaluated, as opposed to other RDBMS you may be used to).&lt;/p&gt;
&lt;p&gt;But I wish to discuss the use of stored routines from an engineering standpoint. The first couple of points I raise are cultural/behavioural.&lt;/p&gt;
&lt;h4&gt;2nd grade citizens&lt;/h4&gt;
&lt;p&gt;Your stored routines are not likely to integrate well with your IDE. While your Java/Scala/PHP/Ruby/whatnot code comfortably lies within your home directory, the stored routines live in their own space: a database container. They&#39;re not as visible to you as your standard code. Your IDE is unaware of their existence and is unlikely to have the necessary plugin/state of mind to be able to view these.&lt;/p&gt;
&lt;p&gt;This leads to difficulty in maintaining the code. People typically resort to using some SQL-oriented GUI tool such as MySQL Workbench, SequelPro or other, commercial tools. But these tools, while make it easy to edit your routine code, do not integrate (well?) with your source control. I can&#39;t say I&#39;ve used all GUI tools; but how many of them will have Git/SVN/Mercurial connectors? How many of them will keep local history changes once you edit a routine? I&#39;m happy to get introduced to such a tool.&lt;/p&gt;
&lt;p&gt;Even with such integration, you&#39;re split between two IDEs. And if you&#39;re the command line enthusiast, well, you can&#39;t just &lt;strong&gt;svn ci -m &#34;fixed my stored procedure bug&#34;&lt;/strong&gt;. Your code is simply not in your trunk directory.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;can&lt;/em&gt; be done. You &lt;em&gt;could&lt;/em&gt; maintain the entire routine code from within your source tree, and hats off to all those who do it. Most will not. See later on about deployments for more on this.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;p&gt;While engineers are keen on writing unit tests for every class and method they create, they are less keen on doing the same for stored routines. This is an observation, having seen many instalments. And I can tell you why: your stored routine testing will not integrate well with your JUnit/PHPUnit/...&lt;/p&gt;
&lt;p&gt;There are testing frameworks for databases, and indeed I hacked my own mini unit testing code with &lt;em&gt;common_schema&lt;/em&gt;. But it&#39;s a &lt;em&gt;different&lt;/em&gt; testing framework. You might also have realized by now that testing databases is somewhat different. It &lt;em&gt;can&lt;/em&gt; be done, and hats off again to those that implement it as common practice. Many don&#39;t. Database are often more heavyweight to test. Not all operations done by routines are easily rolled back, which leads to having to rebuild the entire dataset before tests. This in itself leads to longer test periods and a need for multiple test databases so as to allow for concurrent builds.&lt;/p&gt;
&lt;p&gt;How many companies practice both version control and unit testing over their routine code? I believe not many (and am happy to hear about those who do). To be more direct, of all the companies I ever consulted to: &lt;em&gt;I have never seen one that does both&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Debugging&lt;/h4&gt;
&lt;p&gt;MySQL stored routines have built in debugging capabilities. To debug your routines, you will have to use one of two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simulate your routine code (ie mimic their execution on top of some interpreter). There are tools to do that. For me this is a complete NO GO and utterly untrustworthy. You can mimic what you think is how the routine should behave, but never they full behaviour. While developing &lt;em&gt;common_schema&lt;/em&gt; I came upon plenty weird behaviour, some of it bugs, that you just can&#39;t build into your emulation.&lt;/li&gt;
&lt;li&gt;Inject debugging code into your routine code. I do that with &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/rdebug.html&#34;&gt;RDebug&lt;/a&gt;. You can do breakpoints, step into, step out, most of the interesting stuff. Other tools do that as well. It is not the right way to go: you&#39;re essentially modifying your code, placing more locks, communicating, and losing some functionality. It is a necessary evil solution for a necessary evil programming method... How good can that be?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The right way to go would be to have debugging API built into the MySQL server.&lt;/p&gt;
&lt;p&gt;But, wait, that would still be next to worthless, since our discussion is over programming with stored routines: letting your application call upon stored routines in your database. Until the day where I could use my IntelliJ debugger to step from my java method which calls upon a stored procedure, and into the stored procedure itself, debugging your code is completely detached from your stored routine debugging.&lt;/p&gt;
&lt;h4&gt;Refactoring &amp;amp; deploying&lt;/h4&gt;
&lt;p&gt;Say you wanted to add a column to your table: you would go ahead and add it, and perhaps populate it. You would then modify your application code to support this new column, and deploy. Say you wanted to drop a table column. You would first deploy changes to your application code that ignore said column, and once the code is in place you would go and actually make the DROP.&lt;/p&gt;
&lt;p&gt;How do you do the same with a stored routine? Support your routine accepts two parameters, and you wish to add a third?&lt;/p&gt;
&lt;p&gt;There is no support for optional parameters. Your routine either accepts two parameters or three. Your application code will have to provide the exact number of parameters. You will have to deploy &lt;em&gt;both your SQL changes and your application changes at the same time&lt;/em&gt;. This is by definition impossible, unless you are OK with a &lt;em&gt;stop the world approach&lt;/em&gt;, which is unlikely in production.&lt;/p&gt;
&lt;h4&gt;Code constraints&lt;/h4&gt;
&lt;p&gt;One solution to the above is to create a new routines. Somehow &#34;overload&#34; it. But you can&#39;t overload a stored routine; you&#39;ll have to create a routine by a new name. This will allow you to slowly and smoothly migrate between the two.&lt;/p&gt;
&lt;p&gt;Ahem, smoothly? How easy is it to find all invocations of a certain routines from your code? It will be typically lie in some String, or within some XML config file. There is no safe &#34;find references to this procedure&#34; IDE mechanism. There is no constraint in your IDE that will tell you &#34;there is no such procedure&#34; if you misspell the name.&lt;/p&gt;
&lt;h4&gt;Trash bin&lt;/h4&gt;
&lt;p&gt;Suppose you overcame the above. You now have two routines. You need to remember to DROP the old one, right? Will you?&lt;/p&gt;
&lt;p&gt;When presenting &lt;em&gt;common_schema&lt;/em&gt;, a common question I ask the audience is as follows:&lt;/p&gt;
&lt;blockquote&gt;Suppose I accessed your database and listed the entire set of stored functions and procedures. How many of them are you not even sure are in use anymore? How many of them you think you can DROP, but are too afraid to, and keep them in &lt;em&gt;just in case&lt;/em&gt;?&lt;/blockquote&gt;
&lt;p&gt;I wouldn&#39;t commonly ask that question had it not always provides a common nodding and smiling in the audience. People forget to drop their routines, and then forget about them, and are never sure whether they are used (your IDE doesn&#39;t easily tell you that, remember? Sure, you can grep around; that&#39;s not what most engineers would do). And those routines pile up to become trash.&lt;/p&gt;
&lt;h4&gt;Data or code?&lt;/h4&gt;
&lt;p&gt;Last but not least: a stored routine is a piece of code, right? Well, as far as the database is concerned, it&#39;s really a piece of data. It&#39;s located within a schema. It&#39;s &lt;em&gt;stored&lt;/em&gt;. It is an integral part of your data set: when you back up your &lt;em&gt;data&lt;/em&gt;, you&#39;re most likely to backup the &lt;em&gt;code&lt;/em&gt; as well. When you restore, you&#39;re likely to restore &lt;em&gt;both&lt;/em&gt;. There are obvious advantages to that, DB-wise. Or should I say, DBA-wise. Engineering-wise? Does a database-restore operation count as code deployment? We can argue over beer.&lt;/p&gt;
&lt;h4&gt;Final notes&lt;/h4&gt;
&lt;p&gt;Having said all that: yes, I&#39;m using an occasional stored routine. I see these occasions as a necessary evil, and sometimes it&#39;s just the correct solution.&lt;/p&gt;
&lt;p&gt;I&#39;m happy to know what methods have been developed out there to overcome the above, please share; and please feel free to contradict the above.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>common_schema &amp; openark-kit in the media: #DBHangOps, OurSQL</title>
      <link>/blog/mysql/common_schema-openark-kit-in-the-media-dbhangops-oursql/</link>
      <pubDate>Wed, 26 Jun 2013 21:46:57 +0000</pubDate>
      
      <guid>/blog/mysql/common_schema-openark-kit-in-the-media-dbhangops-oursql/</guid>
      <description>&lt;h4&gt;#DBHangOps&lt;/h4&gt;
&lt;p&gt;I had the pleasure of joining into &lt;a href=&#34;https://twitter.com/DBHangops&#34;&gt;@DBHangOps&lt;/a&gt; today, and speak about &lt;a href=&#34;https://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt; and &lt;a href=&#34;http://code.google.com/p/openarkkit/&#34;&gt;openark-kit&lt;/a&gt;. What was meant to be a 15 minute session turned to be 50 -- sorry, people, I don&#39;t talk as much at home, but when it comes to my pet projects...&lt;/p&gt;
&lt;p&gt;I also realized I was missing on a great event: DBHangOps is a hangout where you can chat and discuss MySQL &amp;amp; related technologies with friends and colleagues, with whom you typically only meet at conferences. I will certainly want to attend future events.&lt;/p&gt;
&lt;p&gt;Thanks to John Cesario and Geoffrey Anderson who invited me to talk, and to the friends and familiar faces who attended; I was happy to talk about my work, and very interested in hearing about how it&#39;s being put to use. We also had time to discuss &lt;a href=&#34;http://www.markleith.co.uk/ps_helper/&#34;&gt;ps_helper&lt;/a&gt; with no other than Mark Leith!&lt;/p&gt;
&lt;p&gt;The video is &lt;a href=&#34;https://twitter.com/DBHangops/status/349965939690835970&#34;&gt;available on Twitter/YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;OurSQL&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;openark-kit&lt;/em&gt; has also been &lt;a href=&#34;http://technocation.org/content/oursql-episode-143%3A-biblical-tools&#34;&gt;featured on the OurSQL podcast&lt;/a&gt; by Sheeri &amp;amp; Gerry, who did great coverage of some tools. I will disclose that more is to come; I&#39;m happy this is in capable hands and look further to hear the next episode!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Taking common_schema&#39;s rdebug to a test-drive</title>
      <link>/blog/mysql/taking-common_schemas-rdebug-to-a-test-drive/</link>
      <pubDate>Tue, 09 Apr 2013 09:36:17 +0000</pubDate>
      
      <guid>/blog/mysql/taking-common_schemas-rdebug-to-a-test-drive/</guid>
      <description>&lt;p&gt;This is a simple step-by-step introduction to &lt;strong&gt;&lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/rdebug.html&#34;&gt;rdebug&lt;/a&gt;: Debugger and Debugging API for MySQL Stored Routines&lt;/strong&gt;, as part of &lt;a href=&#34;https://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In other words: let me take you through the steps for debugging your stored routines on your own server. We will step into, step over, step out, modify variables, set a breakpoint, run to breakpoint...&lt;/p&gt;
&lt;p&gt;Command line geeks, this one&#39;s for you. GUI lovers, this is actually an API; I am hoping for someone wrap it up with a plugin for your favorite GUI editor.&lt;/p&gt;
&lt;h4&gt;Requirements:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://code.google.com/p/common-schema/&#34;&gt;&lt;em&gt;common_schema&lt;/em&gt; 2.0&lt;/a&gt; or above (at this time of writing &lt;a href=&#34;http://code.openark.org/blog/mysql/common_schema-2-0-0-alpha-rdebug-gpl&#34;&gt;2.0.0-alpha is released&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Get sample data &amp;amp; routine file [download id=&#34;4&#34; format=&#34;1&#34;]&lt;/li&gt;
&lt;li&gt;mysql&amp;gt; &lt;strong&gt;SOURCE rdebug_demo.sql_.txt&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;You should now have a table called &lt;strong&gt;color_count&lt;/strong&gt; in the test database, along with two routines: &lt;strong&gt;review_colors()&lt;/strong&gt; and &lt;strong&gt;review_single_color()&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open two sessions. We call them the &lt;em&gt;debugger&lt;/em&gt; session and the &lt;em&gt;worker&lt;/em&gt; session. The &lt;em&gt;worker&lt;/em&gt; session will execute the routine; the &lt;em&gt;debugger&lt;/em&gt; session will control it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Walk-through: preparation&lt;/h4&gt;
&lt;p&gt;Walk this thing with me. We will alternate between the &lt;em&gt;debugger&lt;/em&gt; and the &lt;em&gt;worker&lt;/em&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. worker session:&lt;/strong&gt; get connection ID.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;em&gt;&lt;span style=&#34;color: #003300;&#34;&gt;mysql [worker]&amp;gt; &lt;strong&gt;select CONNECTION_ID();&lt;/strong&gt;
+-----------------+
| CONNECTION_ID() |
+-----------------+
|            1234 |
+-----------------+&lt;/span&gt;&lt;/em&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ll use &lt;strong&gt;1234&lt;/strong&gt;, you will use whatever connection ID your worker has.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. debugger session:&lt;/strong&gt; &#34;compile&#34; routine with debug info (this injects code into your routines).&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;use common_schema;&lt;/strong&gt;
mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_compile_routine(&#39;test&#39;, &#39;review_colors&#39;, true);&lt;/strong&gt;
mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_compile_routine(&#39;test&#39;, &#39;review_single_color&#39;, true);&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you like, review the routines after compilation as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_show_routine(&#39;test&#39;, &#39;review_colors&#39;);&lt;/strong&gt;
+---------------------------------------------------------------------------------+
| `test`.`review_colors` breakpoints                                              |
+---------------------------------------------------------------------------------+
| begin                                                                           |
|   declare done bool default false;                                              |
|   declare current_color varchar(32) default null;                               |
|   declare current_count int unsigned;                                           |
|   declare color_cursor cursor for                                               |
|             select color_name, count from test.color_count order by color_name; |
|   declare continue handler for not found set done := true;                      |
|                                                                                 |
|   [:94]open color_cursor;                                                       |
|   [:100]cursor_loop: while not done do                                          |
|     [:112]fetch color_cursor into current_color, current_count;                 |
|     [:125]if done then                                                          |
|       [:132]leave cursor_loop;                                                  |
|     [:138]end if;                                                               |
|                                                                                 |
|     [:145]call review_single_color(current_color);                              |
|   [:154]end while;                                                              |
|   [:160]close color_cursor;                                                     |
| [:165]end                                                                       |
+---------------------------------------------------------------------------------+

mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_show_routine(&#39;test&#39;, &#39;review_single_color&#39;);&lt;/strong&gt;
+----------------------------------------------------------------+
| `test`.`review_single_color` breakpoints                       |
+----------------------------------------------------------------+
| begin                                                          |
|   [:4]set @review_message := concat(color_name, &#39; is pretty&#39;); |
|   [:20]select @review_message;                                 |
| [:25]end                                                       |
+----------------------------------------------------------------+
&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above shows the routine code with symbolic breakpoint IDs.&lt;/p&gt;
&lt;h4&gt;Walk-through - start debugging&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;3. debugger session:&lt;/strong&gt; Start a debug session, attach to &lt;i&gt;worker&lt;/i&gt; session using its connection ID:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_start(1234);&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Replace &lt;strong&gt;1234&lt;/strong&gt; with your own worker&#39;s connection ID as read above.&lt;/p&gt;
&lt;p&gt;Let&#39;s set verbose mode on; more fun on command line, less typing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_set_verbose(true);&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And step into it!&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_step_into();&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This should hang the debugger. Why? Because it&#39;s stepping into, and is expecting the worker to actually do something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. worker session:&lt;/strong&gt; execute routine&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #003300;&#34;&gt;&lt;em&gt;mysql [worker]&amp;gt; &lt;strong&gt;call test.review_colors();&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Walk-through - debug&lt;/h4&gt;
&lt;p&gt;The debugger session should immediately follow with the following (all by &lt;strong&gt;entry_time&lt;/strong&gt; should be identical to your output):&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;+-------------+----------------+---------------+--------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| stack_level | routine_schema | routine_name  | statement_id | entry_time          |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+-------------+----------------+---------------+--------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;|           1 | test           | review_colors |           94 | 2013-04-08 15:41:28 |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+-------------+----------------+---------------+--------------+---------------------+&lt;/span&gt;

&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------+---------------+---------------+----------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| routine_schema | routine_name  | variable_name | variable_type | variable_value |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------+---------------+---------------+----------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_colors | current_color | local         | NULL           |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_colors | current_count | local         | NULL           |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_colors | done          | local         | 0              |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------+---------------+---------------+----------------+&lt;/span&gt;

&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------+--------------+-------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| routine_schema | routine_name  | statement_id | statement         |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------+--------------+-------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_colors |           94 | open color_cursor |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------+--------------+-------------------+&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&#39;s the result of setting verbose mode. From here, if you&#39;ve ever debugged code, the way is clear:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. debugger session:&lt;/strong&gt; Step into a few more times:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_step_into();&lt;/strong&gt;
mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_step_into();&lt;/strong&gt;
mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_step_into();&lt;/strong&gt;
...&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Until the stack shows that you have entered the second routine: &lt;strong&gt;review_single_color():&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;+-------------+----------------+---------------------+--------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| stack_level | routine_schema | routine_name        | statement_id | entry_time          |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+-------------+----------------+---------------------+--------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;|           1 | test           | review_colors       |          145 | 2013-04-08 15:41:28 |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;|           &lt;strong&gt;2&lt;/strong&gt; | &lt;strong&gt;test&lt;/strong&gt;           | &lt;strong&gt;review_single_color&lt;/strong&gt; |           20 | 2013-04-08 15:45:23 |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+-------------+----------------+---------------------+--------------+---------------------+&lt;/span&gt;

&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------------+-----------------+---------------+-----------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| routine_schema | routine_name        | variable_name   | variable_type | variable_value  |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------------+-----------------+---------------+-----------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_single_color | @review_message | user_defined  | green is pretty |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_single_color | color_name      | param         | green           |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------------+-----------------+---------------+-----------------+&lt;/span&gt;

&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------------+--------------+------------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| routine_schema | routine_name        | statement_id | statement              |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------------+--------------+------------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;| test           | review_single_color |           20 | select @review_message |&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;+----------------+---------------------+--------------+------------------------+&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can further call &lt;strong&gt;rdebug_step_out()&lt;/strong&gt; to leave this routine, &lt;strong&gt;rdebug_step_over()&lt;/strong&gt; to avoid re-entry...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. debugger session:&lt;/strong&gt; modify variables&lt;/p&gt;
&lt;p&gt;Assuming you are inside the &lt;strong&gt;review_single_color()&lt;/strong&gt; routine, would you like to modify a variable?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_set_variable(&#39;color_name&#39;, &#39;A flower&#39;);&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step over a few more times till the worker produces:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #003300;&#34;&gt;&lt;em&gt;+--------------------+&lt;/em&gt;&lt;/span&gt;
&lt;span style=&#34;color: #003300;&#34;&gt;&lt;em&gt;| @review_message    |&lt;/em&gt;&lt;/span&gt;
&lt;span style=&#34;color: #003300;&#34;&gt;&lt;em&gt;+--------------------+&lt;/em&gt;&lt;/span&gt;
&lt;span style=&#34;color: #003300;&#34;&gt;&lt;em&gt;| A flower is pretty |&lt;/em&gt;&lt;/span&gt;
&lt;span style=&#34;color: #003300;&#34;&gt;&lt;em&gt;+--------------------+&lt;/em&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Continue playing with &lt;strong&gt;rdebug_step_into()&lt;/strong&gt;, &lt;strong&gt;rdebug_step_over()&lt;/strong&gt;, &lt;strong&gt;rdebug_step_out()&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. debugger session:&lt;/strong&gt; setting a breakpoint&lt;/p&gt;
&lt;p&gt;Based on the output of &lt;strong&gt;rdebug_show_routine(&#39;test&#39;, &#39;review_colors&#39;)&lt;/strong&gt;, above, we now choose to set a non-conditional breakpoint, just before the statement &lt;strong&gt;call review_single_color(current_color)&lt;/strong&gt;. That makes breakpoint ID &lt;strong&gt;145&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_set_breakpoint(&#39;test&#39;, &#39;review_colors&#39;, 145, NULL, true);&lt;/strong&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;8. debugger session:&lt;/strong&gt; running up to a breakpoint&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, let&#39;s allow the worker to run until it reaches this breakpoint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_run();&lt;/strong&gt;
+-------------+----------------+---------------+--------------+---------------------+
| stack_level | routine_schema | routine_name  | statement_id | entry_time          |
+-------------+----------------+---------------+--------------+---------------------+
|           1 | test           | review_colors |          145 | 2013-04-08 15:41:28 |
+-------------+----------------+---------------+--------------+---------------------+

+----------------+---------------+---------------+---------------+----------------+
| routine_schema | routine_name  | variable_name | variable_type | variable_value |
+----------------+---------------+---------------+---------------+----------------+
| test           | review_colors | current_color | local         | white          |
| test           | review_colors | current_count | local         | 10             |
| test           | review_colors | done          | local         | 0              |
+----------------+---------------+---------------+---------------+----------------+

+----------------+---------------+--------------+-----------------------------------------+
| routine_schema | routine_name  | statement_id | statement                               |
+----------------+---------------+--------------+-----------------------------------------+
| test           | review_colors |          &lt;strong&gt;145&lt;/strong&gt; | &lt;strong&gt;call review_single_color(current_color)&lt;/strong&gt; |
+----------------+---------------+--------------+-----------------------------------------+&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run the above a few times: we always get back to the same statement. That is, until there&#39;s nothing more to do and the routine leaves.&lt;/p&gt;
&lt;h4&gt;Walk-through - stopping and cleanup&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;8. debugger session:&lt;/strong&gt; Stop the debugging session:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_stop();&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can start again via &lt;strong&gt;rdebug_start()&lt;/strong&gt;. If, however, you&#39;re no longer interested in debugging, you should remove debugging code from your routines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_compile_routine(&#39;test&#39;, &#39;review_colors&#39;, false);&lt;/strong&gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080;&#34;&gt;mysql [debugger]&amp;gt; &lt;strong&gt;call rdebug_compile_routine(&#39;test&#39;, &#39;review_single_color&#39;, false);&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;This is most there is to it. Read the &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/rdebug_api.html&#34;&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/a&gt; for a complete list of functionality&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>common_schema 2.0.0-alpha: rdebug, GPL</title>
      <link>/blog/mysql/common_schema-2-0-0-alpha-rdebug-gpl/</link>
      <pubDate>Tue, 09 Apr 2013 08:03:06 +0000</pubDate>
      
      <guid>/blog/mysql/common_schema-2-0-0-alpha-rdebug-gpl/</guid>
      <description>&lt;p&gt;A new release for &lt;a href=&#34;https://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt;: an alpha version of &lt;strong&gt;&lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/rdebug.html&#34;&gt;rdebug&lt;/a&gt;: MySQL Debugger and Debugging API&lt;/strong&gt; is now included with &lt;em&gt;common_schema&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With a different license in mind for &lt;em&gt;rdebug&lt;/em&gt;, &lt;em&gt;common_schema&lt;/em&gt; changes license to GPL (2 or above).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;common_schema 2.0&lt;/em&gt; is ready for &lt;a href=&#34;http://code.google.com/p/common-schema/downloads/list&#34;&gt;download&lt;/a&gt;. All things &lt;strong&gt;rdebug&lt;/strong&gt;, it is alpha -- otherwise it&#39;s a stable release.&lt;/p&gt;
&lt;h4&gt;rdebug&lt;/h4&gt;
&lt;p&gt;I&#39;m very happy to release this alpha version of &lt;em&gt;rdebug&lt;/em&gt;, and urge everyone to try it out.&lt;/p&gt;
&lt;p&gt;The idea is to have an open, free, server side debugger and debugging API for MySQL stored routines. To elaborate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&#39;s server side by that it&#39;s implemented by stored routines. Not by a connector; not an emulator; not a GUI tool hack. The entire functionality lies within common_schema, a schema in your server.&lt;/li&gt;
&lt;li&gt;It&#39;s a debugger: you can debug your own stored routines (with limitations)&lt;/li&gt;
&lt;li&gt;It&#39;s a &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/rdebug_api.html&#34;&gt;&lt;strong&gt;debugging API&lt;/strong&gt;&lt;/a&gt;: there&#39;s a distinct specification and a set of calls which makes for a debugging process&lt;/li&gt;
&lt;li&gt;It&#39;s open since the source code is yours to browse.&lt;/li&gt;
&lt;li&gt;It&#39;s free as in free beer.&lt;/li&gt;
&lt;li&gt;It&#39;s free as it makes you independent of a specific debugger. It provides an API that anyone can use. You can run the API yourself from the command line; or plugins for your favorite GUI editor can be developed to use this API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a separate blog post I will take you to a &lt;em&gt;rdebug&lt;/em&gt; test drive.&lt;/p&gt;
&lt;p&gt;As always, nothing is released before extensive &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/rdebug.html&#34;&gt;documentation&lt;/a&gt; is in place.&lt;/p&gt;
&lt;p&gt;I&#39;d love to get input on this.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;GPL&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; &amp;lt; &lt;strong&gt;2.0&lt;/strong&gt; was released under the BSD license, which is less restrictive. I was pondering the BSD license for a couple years now, and with the arrival of &lt;em&gt;rdebug&lt;/em&gt; have decided to switch to GPL. I&#39;ve been through this thinking of change of license in other projects of mine; am generally agreeing that best not to change licensing throughout lifetime. I actually do see GPL as promoting open source software better than BSD, and with all the issues around GPL this actually means something to me. I write open source; I love people using it; I love people extending it; I want to be re-released as open source, or I want better control of the code.&lt;/p&gt;
&lt;p&gt;So this turns out to be something that is important to me, and just before &lt;em&gt;common_schema&lt;/em&gt; takes the world in storm (&lt;strong&gt;212&lt;/strong&gt; downloads today, &lt;strong&gt;212,000,000&lt;/strong&gt; tomorrow), I want to have this settled. If no storm comes, well, I&#39;ll have up to &lt;strong&gt;212&lt;/strong&gt; people banging on my door (I provide free coffee).&lt;/p&gt;
&lt;h4&gt;Text routines&lt;/h4&gt;
&lt;p&gt;Two text routines are added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/replace_sections.html&#34;&gt;&lt;strong&gt;replace_sections()&lt;/strong&gt;&lt;/a&gt;: replace a text given a from-to combination, and a replacement string, which could include a back-reference. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; select replace_sections(&lt;strong&gt;&#39;The &lt;span style=&#34;color: #000080;&#34;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;quick&lt;span style=&#34;color: #000080;&#34;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; brown &lt;span style=&#34;color: #000080;&#34;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;fox&lt;span style=&#34;color: #000080;&#34;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&#39;&lt;/strong&gt;, 
        &lt;strong&gt;&#39;&lt;span style=&#34;color: #000080;&#34;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&#39;&lt;/strong&gt;, &lt;span style=&#34;color: #000080;&#34;&gt;&lt;strong&gt;&#39;&amp;lt;/b&amp;gt;&#39;&lt;/strong&gt;&lt;/span&gt;, 
        &lt;strong&gt;&lt;span style=&#34;color: #800000;&#34;&gt;&#39;&amp;lt;span&amp;gt;\0&amp;lt;/span&amp;gt;&#39;&lt;/span&gt;&lt;/strong&gt;) as result;
+-----------------------------------------------+
| result                                        |
+-----------------------------------------------+
| The &lt;span style=&#34;color: #800000;&#34;&gt;&amp;lt;span&amp;gt;quick&amp;lt;/span&amp;gt;&lt;/span&gt; brown &lt;span style=&#34;color: #800000;&#34;&gt;&amp;lt;span&amp;gt;fox&amp;lt;/span&amp;gt;&lt;/span&gt; |
+-----------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/hexcode_text.html&#34;&gt;&lt;strong&gt;hexcode_text()&lt;/strong&gt;&lt;/a&gt;: a convenience routine which shows a beautified hex-code of a given text. I get to need it when using UNICODE characters which are hard to detect, are visually identical to other characters, or are copied from MS Word.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; &lt;strong&gt;call hexcode_text(&#39;the quick brown fox jumps over the lazy dog&#39;);&lt;/strong&gt;
+-----------------------------------------------------------------------------------+
| &amp;gt;0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f   0 1 2 3 4 5 6 7 8 9 a b c d e f |
+-----------------------------------------------------------------------------------+
| 74 68 65 20 71 75 69 63 6B 20 62 72 6F 77 6E 20   t h e   q u i c k   b r o w n   |
| 66 6F 78 20 6A 75 6D 70 73 20 6F 76 65 72 20 74   f o x   j u m p s   o v e r   t |
| 68 65 20 6C 61 7A 79 20 64 6F 67                  h e   l a z y   d o g           |
+-----------------------------------------------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Get it&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/common-schema/&#34;&gt;Download &lt;em&gt;common_schema&lt;/em&gt; here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL Stored Routines Debugger &amp; Debugging API: sneak preview II, video</title>
      <link>/blog/mysql/mysql-stored-routines-debugger-debugging-api-sneak-preview-ii-video/</link>
      <pubDate>Thu, 21 Mar 2013 11:15:03 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-stored-routines-debugger-debugging-api-sneak-preview-ii-video/</guid>
      <description>&lt;p&gt;This is the &lt;strong&gt;2nd&lt;/strong&gt; sneak preview of &lt;a href=&#34;http://code.google.com/p/common-schema&#34;&gt;common_schema&lt;/a&gt;&#39;s &lt;strong&gt;rdebug&lt;/strong&gt;: debugger &amp;amp; debugging API for MySQL stored routines (&lt;a href=&#34;http://code.openark.org/blog/mysql/mysql-stored-routines-debugger-debugging-api-sneak-preview-video&#34;&gt;see &lt;strong&gt;1st&lt;/strong&gt; preview here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rdebug&lt;/em&gt; will be released as part of &lt;em&gt;common_schema&lt;/em&gt;, free and open sourced.&lt;/p&gt;
&lt;p&gt;In this sneak preview I present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compiling multiple routines with debug info&lt;/li&gt;
&lt;li&gt;Starting/stopping a debug session&lt;/li&gt;
&lt;li&gt;Step-over, step-in, step-out&lt;/li&gt;
&lt;li&gt;Showing stack trace&lt;/li&gt;
&lt;li&gt;Showing the next-statement to execute&lt;/li&gt;
&lt;li&gt;Viewing and manipulating local routine variables&lt;/li&gt;
&lt;li&gt;Misc. meta routines&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The quick technical overview&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;rdebug&lt;/em&gt; is a server-side mechanism, itself written in MySQL stored routines. It manipulates your routines by injecting debug code (easily removed afterwards).&lt;/p&gt;
&lt;p&gt;To debug a routine you will need two connections: one is the debugging connection, and the other is the worker connection. The debugger connection attaches itself to the worker connection, where your routines execute.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rdebug&lt;/em&gt; is controlled by an &lt;strong&gt;API&lt;/strong&gt; of stored routines. This means any GUI tool may choose to use &lt;em&gt;rdebug&lt;/em&gt; as its routine debugging mechanism. Your are not bound to a specific tool, a specific OS or framework. You may choose to invoke the API via command line, if you like; it&#39;s all in your server.&lt;/p&gt;
&lt;h4&gt;A video is worth a thousand blogs&lt;!--more--&gt;&lt;/h4&gt;
&lt;p&gt;The following video demonstrates the debugging process of two stored procedures, one invoking the other. This allows for step-in/over/out commands, stack trace analysis, and of course variable inspection and modification.&lt;/p&gt;
&lt;p&gt;I can&#39;t say I caught the hang of capturing my desktop and editing the movie (doing it one on Linux and once on Mac), so please excuse any poor quality video/sound.&lt;/p&gt;
&lt;p&gt;http://youtu.be/ynqLmK77XjE&lt;/p&gt;
&lt;p&gt;The code is not yet released, but will be, shortly, under an open source license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL Stored Routines Debugger &amp; Debugging API: sneak preview video</title>
      <link>/blog/mysql/mysql-stored-routines-debugger-debugging-api-sneak-preview-video/</link>
      <pubDate>Tue, 19 Feb 2013 11:32:27 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-stored-routines-debugger-debugging-api-sneak-preview-video/</guid>
      <description>&lt;p&gt;This is a sneak peek video introduction/preview of an in-development free and open source server side debugger &amp;amp; debugging API for MySQL stored routines.&lt;/p&gt;
&lt;p&gt;MySQL does not provide server side debugging capabilities for stored routines. Some tools exist, including MySQL&#39;s own, that assist in stored routine debugging. These are all GUI based and, to the best of my knowledge, MS Windows based. There is one solution in alpha stage that is developed for Java/eclipse; I did not look at the code. See discussion &lt;a href=&#34;http://www.xaprb.com/blog/2012/11/01/stored-procedure-debugging-in-mysql/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://blog.webyog.com/2011/12/06/debugging-stored-programs-in-mysql/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An ideal solution would be to have debugging API in the server itself - independently of your client, programming language or operating system. To the best of my knowledge, nothing like that is being developed.&lt;/p&gt;
&lt;p&gt;I&#39;m now presenting a &lt;strong&gt;rdebug&lt;/strong&gt;: a stored routines server-side debugger, Pure-SQL, based on stored routines. &lt;em&gt;rdebug&lt;/em&gt; is developed as part of &lt;a href=&#34;http://code.google.com/p/common-schema&#34;&gt;common_schema,&lt;/a&gt; and actually relies on some of its power.&lt;/p&gt;
&lt;p&gt;Like some other tools, it uses code injection and manipulation: it injects debugging info into your stored routine. You need to &#34;compile&#34; your routine with debugging info.&lt;/p&gt;
&lt;p&gt;Unlike some other tools, it actually runs your stored routines. It does not mimic or simulate them on client side. It does not break them into smaller routines, attempting to assemble the original behavior from lego bricks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The quick technical overview&lt;/strong&gt; is that you use two processes (MySQL threads): the worker process running the routine (your natural &lt;strong&gt;call my_routine()&lt;/strong&gt;), and the debugger process. The debugger process attaches itself to the worker process; it controls the worker by commands like &lt;em&gt;&#34;step over&#34;&lt;/em&gt;; it gets data from the worker: what&#39;s the current stack trace? What variables are now available and what are their values?; it manipulates the worker&#39;s data: it can utilize breakpoints to modify worker&#39;s local &amp;amp; session variables.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;The debugger code is itself written with stored routines. Your own routines are analyzed by stored routine code. Stored routines inject code into your routine. Stored routines invoke and control the debugging progress. Stored routines manipulate your routine&#39;s data. All access to the debugger is via (did I mention?) stored routines. This leads to &lt;em&gt;server-side&lt;/em&gt; (alas not server-code) &lt;em&gt;debugger &amp;amp; debugger API&lt;/em&gt;: any tool, GUI or command line, can utilize these stored routine calls so as to implement a debugger.&lt;/p&gt;
&lt;p&gt;Since the solution is written with stored routines -- thus allowing you to debug your existing &lt;strong&gt;5.1&lt;/strong&gt;, &lt;strong&gt;5.5&lt;/strong&gt; &amp;amp; &lt;strong&gt;5.6&lt;/strong&gt; servers -- it is also limited by what info can be retrieved by stored routines. One can view/modify local routine variables &amp;amp; user defined variables, set breakpoints etc. One cannot get the &#34;state of a cursor&#34;, though, since no such info exists for a stored routine code.&lt;/p&gt;
&lt;p&gt;having injected code operate from within your routine does mean a lot more actions are taken, like hidden &lt;strong&gt;INSERT&lt;/strong&gt;s and &lt;strong&gt;UPDATE&lt;/strong&gt;s. Calls to &lt;strong&gt;ROW_COUNT()&lt;/strong&gt; and &lt;strong&gt;LAST_INSERT_ID()&lt;/strong&gt; can be skewed. That&#39;s a limitation I&#39;m unsure as yet how to overcome; but not overcoming it won&#39;t bring everything down as far as I&#39;m concerned.&lt;/p&gt;
&lt;p&gt;Some of the injected code calls upon dynamic SQL. This means at current stored functions are not possible to debug - just stored procedures. There&#39;s a way around this for future development. There is no support for triggers, and I don&#39;t expect there will be in the near future. No investigation into events as yet.&lt;br /&gt;
&lt;a name=&#34;video&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;A video is worth a thousand blogs&lt;/h4&gt;
&lt;p&gt;Watch a live demo of debugging a simple routine; the demo presents a step-by-step debugging of a routine, listing, getting and setting variables.&lt;/p&gt;
&lt;p&gt;http://www.youtube.com/watch?v=yOCERssiHMA&lt;/p&gt;
&lt;h4&gt;What&#39;s the status?&lt;/h4&gt;
&lt;p&gt;What you&#39;ve seen in the video is a first actual milestone - not a POC. Still need to implement nested stack level, step-in and step-out commands, conditional breakpoints, worker temporary table access from debugger process. Lot&#39;s of stuff, but looking good.&lt;/p&gt;
&lt;p&gt;This work is the result of a personal interest. All input, feedback, profound mistakes, feature requests, &lt;em&gt;&#34;dude, there&#39;s already a far better tool that does all that&#34;&lt;/em&gt; comments, questions -- are welcome!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>common_schema over traditional scripts</title>
      <link>/blog/mysql/common_schema-over-traditional-scripts/</link>
      <pubDate>Wed, 12 Dec 2012 13:55:44 +0000</pubDate>
      
      <guid>/blog/mysql/common_schema-over-traditional-scripts/</guid>
      <description>&lt;p&gt;If you are familiar with both &lt;a href=&#34;http://code.openark.org/forge/openark-kit&#34;&gt;openark kit&lt;/a&gt; and &lt;a href=&#34;http://code.google.com/p/common-schema&#34;&gt;common_schema&lt;/a&gt;, you&#39;ll notice I&#39;ve incorporated some functionality already working in &lt;em&gt;openark kit&lt;/em&gt; into &lt;em&gt;common_schema&lt;/em&gt;, essentially rewriting what used to be a Python script into SQL/&lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script.html&#34;&gt;QueryScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What was my reasoning for rewriting good code? I wish to explain that, and provide with a couple examples.&lt;/p&gt;
&lt;p&gt;I&#39;m generally interested in pushing as much functionality into the MySQL server. When using an external script, one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Needs the right dependencies (OS, Perl/Python version, Perl/Python modules).&lt;/li&gt;
&lt;li&gt;Needs to provide with connection params,&lt;/li&gt;
&lt;li&gt;Needs to get acquainted with a lot of command line options,&lt;/li&gt;
&lt;li&gt;Is limited by whatever command line options are provided.&lt;/li&gt;
&lt;li&gt;Has to invoke that script (duh!) to get the work done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This last bullet is not so trivial: it means you can&#39;t work some operation with your favorite GUI client, because it has no notion of your Perl script; does not run on the same machine where your Python code resides; simply can&#39;t run those scripts for you.&lt;/p&gt;
&lt;p&gt;With server-side code, functionality is accessible via any client. You run your operation via a query (e.g. &lt;strong&gt;CALL some_procedure&lt;/strong&gt;). That can be done from your GUI client, your command line client, your event scheduler, your cronjob, all equally. You only need access to your MySQL server, which is trivial.&lt;/p&gt;
&lt;p&gt;Of course, server side scripting is &lt;a href=&#34;http://code.openark.org/blog/mysql/things-that-cant-and-some-that-can-be-done-from-within-a-mysql-stored-routine&#34;&gt;limited&lt;/a&gt;. Some stuff simply can&#39;t be written solely on server side. If you want to consult your replicating slave; gracefully take action on user&#39;s &lt;strong&gt;Ctrl+C&lt;/strong&gt;, send data over the web, you&#39;ll have to do it with an external tool. There are actually a lot of surprising limitations to things one would assume &lt;em&gt;are&lt;/em&gt; possible on server side. You may already know how frustrated I am by the fact one can &lt;a href=&#34;http://code.openark.org/blog/mysql/reading-results-of-show-statements-on-server-side&#34;&gt;hardly&lt;/a&gt; get info from &lt;strong&gt;SHOW&lt;/strong&gt; commands.&lt;/p&gt;
&lt;h4&gt;But, when it works, it shines&lt;/h4&gt;
&lt;p&gt;Let&#39;s review a couple examples. The first one is nearly trivial. The second less so.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Example: getting AUTO_INCREMENT &#34;free space&#34;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;openark kit&lt;/em&gt; offers &lt;a href=&#34;http://openarkkit.googlecode.com/svn/trunk/openarkkit/doc/html/oak-show-limits.html&#34;&gt;oak-show-limits&lt;/a&gt;. It&#39;s a tool that tells you if any of your &lt;strong&gt;AUTO_INCREMENT&lt;/strong&gt; columns are running out of space (and so you might want to &lt;strong&gt;ALTER&lt;/strong&gt; that &lt;strong&gt;INT&lt;/strong&gt; to &lt;strong&gt;BIGINT&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;It&#39;s a very simple Python script. It gets your &lt;strong&gt;MAX(auto_increment_column) FROM tables_with_auto_increment&lt;/strong&gt;, and compares that &lt;strong&gt;MAX&lt;/strong&gt; value to the column type. It pre-computes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;max_values[&#39;tinyint&#39;] = 2**8
max_values[&#39;smallint&#39;] = 2**16
max_values[&#39;mediumint&#39;] = 2**24
max_values[&#39;int&#39;] = 2**32
max_values[&#39;bigint&#39;] = 2**64&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;takes care of &lt;strong&gt;SIGNED/UNSIGNED&lt;/strong&gt;, and does the math. Why is this tool such a perfect candidate for &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/auto_increment_columns.html&#34;&gt;replacement on server side&lt;/a&gt;? For two reasons.&lt;/p&gt;
&lt;p&gt;First, It turns out it takes very little effort to &lt;a href=&#34;http://code.openark.org/blog/mysql/checking-for-auto_increment-capacity-with-single-query&#34;&gt;build a query&lt;/a&gt; which does the same. In which case it is also easy to build a view which provides the same.&lt;/p&gt;
&lt;p&gt;Second, there&#39;s this thing with command line arguments. The &lt;em&gt;openark&lt;/em&gt; tool provides with &lt;strong&gt;--threshold&lt;/strong&gt; (only output those columns where capacity is larger than &lt;strong&gt;x%&lt;/strong&gt;), &lt;strong&gt;--database&lt;/strong&gt; (only scan given database), &lt;strong&gt;--table&lt;/strong&gt; (only for tables matching name), &lt;strong&gt;--column&lt;/strong&gt; (only for columns matching name).&lt;/p&gt;
&lt;p&gt;I don&#39;t like this. See, the above is essentially an extra layer for saying:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WHERE&lt;/strong&gt; auto_increment_ratio &amp;gt;= x&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHERE&lt;/strong&gt; table_schema = ...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHERE&lt;/strong&gt; table_name = ...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHERE&lt;/strong&gt; column_name = ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The command line arguments each take the role of some &lt;strong&gt;WHERE/AND&lt;/strong&gt; condition.Wow, what a &lt;strong&gt;1-1&lt;/strong&gt; mapping. How about if I wanted the results sorted in some specific order? I would have to add a command line argument for that! How about only listing the &lt;strong&gt;SIGNED&lt;/strong&gt; columns? I would have to add a command line argument for that, too! How about showing top &lt;strong&gt;10&lt;/strong&gt;? Yes, another command line argument!&lt;/p&gt;
&lt;p&gt;Some of the above can be solved via shell scripting (&lt;strong&gt;sort -k 3 -n&lt;/strong&gt;, &lt;strong&gt;head -n 10&lt;/strong&gt;, etc.). But, hey, we&#39;re OK with SQL, aren&#39;t we? Why add now these &lt;em&gt;two extra layers&lt;/em&gt;? Get to know all the command line options, get to script it? I love scripting, but this is an abuse.&lt;/p&gt;
&lt;p&gt;So it makes much more sense, in my opinion, to &lt;strong&gt;SELECT * FROM auto_increment_columns WHERE table_schema=&#39;my_db&#39; AND auto_increment_ratio &amp;gt;= 0.8 ORDER BY auto_increment_ratio DESC LIMIT 10&lt;/strong&gt;. It doesn&#39;t require SQL-fu skills, just basic SQL skills which every DBA and DB user are expected to have. And it allows one to work from whatever environment one feels comfortable with. Heck, with your GUI editor you can probably get off with it by right-clicking and left-clicking your mouse buttons, never typing one character.&lt;/p&gt;
&lt;h4&gt;Example: blocking user accounts&lt;/h4&gt;
&lt;p&gt;The above mapped very easily to a query, and was just a read-only query. What if we had to modify data? &lt;a href=&#34;http://openarkkit.googlecode.com/svn/trunk/openarkkit/doc/html/oak-block-account.html&#34;&gt;oak-block-accounts&lt;/a&gt; is a tool which allows one to block grantees from logging in, then releasing them later on. &lt;em&gt;common_schema&lt;/em&gt; offers &lt;a href=&#34;common-schema.googlecode.com/svn/trunk/common_schema/doc/html/sql_accounts.html&#34;&gt;sql_accounts&lt;/a&gt; and &lt;a href=&#34;file:///home/shlomi/workspace/common_schema/doc/html/eval.html&#34;&gt;eval()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s skip the command line arguments issue, as it is identical to the above. How should we best provide with &#34;taking action&#34; interface? A script would have no problem to first &lt;strong&gt;SELECT&lt;/strong&gt; stuff, then &lt;strong&gt;UPDATE&lt;/strong&gt;, or &lt;strong&gt;SET PASSWORD&lt;/strong&gt;, or &lt;strong&gt;DROP&lt;/strong&gt; etc. How easy is it to do the same on server side?&lt;/p&gt;
&lt;p&gt;The immediate solution is to write a stored procedure to do that. I reject the idea. Why? Because the procedure would look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;PROCEDURE block_account(user VARCHAR(64), host VARCHAR(64), only_if_empty_password BOOL, ...);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can you see where I&#39;m getting at? Doing the above re-introduces command line options, this time disguised as procedure parameters. We would again have to list all available filtering methods, only this time things are worse: since stored procedures have no such notion as overloading, and change to the params will break compatibility. Once we introduce this routine, we&#39;re stuck with it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; tries to stay away as far as it can from this pitfall. It presents another solution: the &lt;em&gt;view&lt;/em&gt; solution. Just as with &lt;em&gt;auto_increment_columns&lt;/em&gt;, &lt;strong&gt;SELECT&lt;/strong&gt; your way to get the right rows. But this time, the result is a SQL query:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT &lt;strong&gt;sql_block_account&lt;/strong&gt; FROM &lt;strong&gt;sql_accounts&lt;/strong&gt; &lt;strong&gt;WHERE USER = &#39;gromit&#39;&lt;/strong&gt;;
+-------------------------------------------------------------------------------------+
| sql_block_account                                                                   |
+-------------------------------------------------------------------------------------+
| SET PASSWORD FOR &#39;gromit&#39;@&#39;localhost&#39; = &#39;752AA50E562A6B40DE87DF0FA69FACADD908EA32*&#39; |
+-------------------------------------------------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do your own &lt;strong&gt;WHERE&lt;/strong&gt;/&lt;strong&gt;AND&lt;/strong&gt; combination in SQL. But, how to take action? Our view cannot take the actual action for us!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;eval()&lt;/em&gt; is at the core of many common_schema operations, like this one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CALL &lt;strong&gt;eval&lt;/strong&gt;(&lt;span style=&#34;color: #000080;&#34;&gt;&#34;SELECT &lt;strong&gt;sql_block_account&lt;/strong&gt; FROM &lt;strong&gt;sql_accounts WHERE USER = &#39;gromit&#39;&lt;/strong&gt;&#34;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;SET PASSWORD&lt;/strong&gt; query just got evaluated. Meaning it was executed. &lt;em&gt;eval()&lt;/em&gt; is a very powerful solution.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I prefer stuff on server side. It requires basic SQL skills (or a smart GUI editor), and allows you easy access to a lot of functionality, removing dependency requirements. It is not always possible, and external scripts can do miracles not possible on server side, but server side scripting has its own miracles.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Things that can&#39;t (and some that can) be done from within a MySQL stored routine</title>
      <link>/blog/mysql/things-that-cant-and-some-that-can-be-done-from-within-a-mysql-stored-routine/</link>
      <pubDate>Thu, 02 Aug 2012 06:32:57 +0000</pubDate>
      
      <guid>/blog/mysql/things-that-cant-and-some-that-can-be-done-from-within-a-mysql-stored-routine/</guid>
      <description>&lt;p&gt;I&#39;m doing a lot of stored routine programming lately, working on &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt;. I&#39;m in particular touching at the extremes of abilities. Some things just can&#39;t be done from within a stored routine. Here&#39;s a list of &lt;strong&gt;can&#39;t be done&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cursor for &lt;strong&gt;SHOW&lt;/strong&gt; statements: can&#39;t be done -- this is explicitly blocked from operating (it once used to work).&lt;/li&gt;
&lt;li&gt;Get detailed error information on exceptions: apparently &lt;strong&gt;5.6&lt;/strong&gt; has support for this. &lt;strong&gt;5.1&lt;/strong&gt; and &lt;strong&gt;5.5&lt;/strong&gt; &lt;a href=&#34;http://code.openark.org/blog/mysql/mysql-error-handling-on-server-side-a-no-go&#34;&gt;do not&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;strong&gt;binlog_format&lt;/strong&gt;: this is obvious, if you think about it. &lt;strong&gt;binlog_format&lt;/strong&gt; dictates how the routine itself is replicated in the first place.&lt;/li&gt;
&lt;li&gt;Set &lt;strong&gt;sql_log_bin&lt;/strong&gt;. Again, this makes sense.&lt;/li&gt;
&lt;li&gt;Work out different results depending on current machine. For example, you can&#39;t have a routine that returns with &lt;strong&gt;&#39;master&#39;&lt;/strong&gt; on the master and with &lt;strong&gt;&#39;slave&#39;&lt;/strong&gt; on the slave. That is, not under &lt;em&gt;any condition&lt;/em&gt;. Consider: if &lt;em&gt;Row Based Replication&lt;/em&gt; is used, you don&#39;t actually have a routine &lt;em&gt;executing&lt;/em&gt; on the slave. I&#39;m happy to be proven wrong on this.&lt;/li&gt;
&lt;li&gt;Know what database was in use by calling code. The routine executes within the context of the database where it is defined. But you can&#39;t tell what database was in use just a couple milliseconds before.&lt;/li&gt;
&lt;li&gt;Likewise, know what &lt;strong&gt;sql_mode&lt;/strong&gt; was in use by calling code. Stored routines have their own &lt;strong&gt;sql_mode&lt;/strong&gt; - the one they were created with. No way to check up on the calling stack.&lt;/li&gt;
&lt;li&gt;And you can&#39;t &lt;strong&gt;USE&lt;/strong&gt; another database (database as in &lt;em&gt;schema&lt;/em&gt;). &lt;strong&gt;USE&lt;/strong&gt; is a client command.&lt;/li&gt;
&lt;li&gt;Reconnect after failure (kind of obvious, isn&#39;t it?)&lt;/li&gt;
&lt;li&gt;Connect to other servers (not so obvious to SQL Server DBAs). You can&#39;t issue queries on other servers. Bummer.&lt;/li&gt;
&lt;li&gt;Shutdown the server&lt;/li&gt;
&lt;li&gt;Fork (you&#39;re in a connection, you can&#39;t issue a new connection from your own connection)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!--more--&gt;Well, some of the above can be solved using plugins or User Defined Functions, but I&#39;m looking at standard servers.&lt;/p&gt;
&lt;h4&gt;Things that can be done&lt;/h4&gt;
&lt;p&gt;I can&#39;t list anything that can be done from within a routine, but, to balance, here&#39;s a brief list of things that &lt;strong&gt;can be done&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recover from errors (e.g. deadlocks) via &lt;strong&gt;DECLARE CONTINUE HANDLER&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Perform table operations (&lt;strong&gt;ANALYZE&lt;/strong&gt;, &lt;strong&gt;OPTIMIZE&lt;/strong&gt;, ...) - though not read the results of these operations other than knowing they succeeded.&lt;/li&gt;
&lt;li&gt;Perform all DDL statements (create/drop/modify views, routines, triggers, events, tables, users)&lt;/li&gt;
&lt;li&gt;Modify session/global variables (&lt;strong&gt;group_concat_max_len&lt;/strong&gt;, &lt;strong&gt;innodb_stats_on_metadata&lt;/strong&gt;, ...&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;You should be aware of&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;max_sp_recursion_depth&lt;/strong&gt;: the maximum recursion depth, if you&#39;re thinking of recursions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;thread_stack&lt;/strong&gt;: I find that setting to &lt;strong&gt;256K&lt;/strong&gt; makes a huge difference over the &lt;strong&gt;5.1&lt;/strong&gt; default of &lt;strong&gt;192K&lt;/strong&gt;. With &lt;strong&gt;192K&lt;/strong&gt;, I frequently run into &#34;out of stack space&#34; problems. With &lt;strong&gt;256K&lt;/strong&gt; - I have yet to encounter that. Dunno, some kind of magic number? This is my observation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MySQL error handling on server side: a NO GO!</title>
      <link>/blog/mysql/mysql-error-handling-on-server-side-a-no-go/</link>
      <pubDate>Wed, 18 Jul 2012 06:45:15 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-error-handling-on-server-side-a-no-go/</guid>
      <description>&lt;p&gt;There is no reasonable way to catch and diagnose errors on server side. It is nearly impossible to know exactly &lt;em&gt;what went wrong&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate, consider the following query:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;INSERT INTO my_table (my_column) VALUES (300);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What could go wrong with this query?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We might hit a &lt;strong&gt;UNIQUE KEY&lt;/strong&gt; violation&lt;/li&gt;
&lt;li&gt;Or a &lt;strong&gt;FOREIGN KEY&lt;/strong&gt; violation&lt;/li&gt;
&lt;li&gt;my_column could be &lt;strong&gt;TINYINT UNSIGNED&lt;/strong&gt;, and with strict &lt;strong&gt;sql_mode&lt;/strong&gt; this makes for out-of-range&lt;/li&gt;
&lt;li&gt;Or, similarly, it could be an &lt;strong&gt;ENUM (2,3,5,8)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Is that it? Not remotely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This could be a read-only &lt;strong&gt;MyISAM&lt;/strong&gt; table&lt;/li&gt;
&lt;li&gt;We may have issued a &lt;strong&gt;LOCK TABLES my_table READ&lt;/strong&gt; -- this violates our lock&lt;/li&gt;
&lt;li&gt;Or this could be an &lt;strong&gt;InnoDB&lt;/strong&gt; table, and this &lt;strong&gt;INSERT&lt;/strong&gt; would make for a deadlock&lt;/li&gt;
&lt;li&gt;Or we have &lt;strong&gt;read_only=1&lt;/strong&gt; configuration&lt;/li&gt;
&lt;li&gt;Or the user is not allowed access to this table&lt;/li&gt;
&lt;li&gt;Or the table does not exist&lt;/li&gt;
&lt;li&gt;Or the column does not exist&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or... I&#39;m pretty sure there could be many other issues.&lt;/p&gt;
&lt;p&gt;Now, if I write a Java program, perhaps using Hibernate, I get the error nicely wrapped up in a SQLException object, with easy access to error code and error message.&lt;/p&gt;
&lt;p&gt;But can I have the same on server side? &lt;em&gt;No&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Take a look at the following code:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE PROCEDURE some_procedure ()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET @error_found = 1;
  INSERT INTO my_table (my_column) VALUES (300);
  &lt;strong&gt;IF @error_found THEN -- Any what error exactly is this? What&#39;s the message? END IF;&lt;/strong&gt;
END;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I wanted to take specific action for specific errors, I would need to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;  DECLARE CONTINUE HANDLER FOR 1146 SET @error_found = 1146;
  DECLARE CONTINUE HANDLER FOR 1147 SET @error_found = 1147;
  DECLARE CONTINUE HANDLER FOR 1148 SET @error_found = 1148;
  DECLARE CONTINUE HANDLER FOR 1149 SET @error_found = 1149;
  ...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But if I can&#39;t expect in advance the specific error, yet wish to note it down, that would mean defining hundreds and hundreds of HANDLERs, never being able to actually cover all cases since new codes are introduced in every version, sometimes in minor versions...&lt;/p&gt;
&lt;h4&gt;Weren&#39;t SINGAL and RESIGNAL introduced in 5.5?&lt;/h4&gt;
&lt;p&gt;They were, but they do nothing to help here. You can &lt;strong&gt;RESIGNAL&lt;/strong&gt; an error - but that doesn&#39;t mean you get to be told what the error actually was!&lt;/p&gt;
&lt;h4&gt;But, what&#39;s the problem, anyway?&lt;/h4&gt;
&lt;p&gt;There&#39;s a variety of stuff I would like to do on server side, not via external Python/Perl/Java/Ruby/Shell scripts. Consider the &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/events.html&#34;&gt;event scheduler&lt;/a&gt;: I mean, what&#39;s the point? It&#39;s nearly useless if there&#39;s so much that you cannot do on server side. You cannot recognize errors, you cannot get enough metadata (see below). It&#39;s only good for a fraction of the jobs you would like to perform.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;common_schema/QueryScript&lt;/a&gt; I provide with scripting capabilities. But how about error handling? I&#39;ve written a completely different error handling approach in &lt;em&gt;common_schema&lt;/em&gt; (this is not released yet, tons of documentation to produce). But since &lt;em&gt;common_schema&lt;/em&gt; works on server side, it is limited to whatever server side programming allows. And this, as explained, is really very little to work with.&lt;/p&gt;
&lt;h4&gt;What would have been nice&lt;/h4&gt;
&lt;p&gt;There&#39;s the &lt;strong&gt;error_count&lt;/strong&gt; session variable. Doesn&#39;t actually do anything useful. It would have been nice to have the following session STATUS VARIABLEs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;last_error_code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last_error_message&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if a query made for multiple errors, pick one (just make both variables consistent).&lt;/p&gt;
&lt;p&gt;Or, &lt;em&gt;please&lt;/em&gt;, make some way to parse &lt;strong&gt;SHOW&lt;/strong&gt; commands on server side! (also refer to &lt;a href=&#34;http://code.openark.org/blog/mysql/reading-results-of-show-statements-on-server-side&#34;&gt;this&lt;/a&gt;). If only I could parse the &lt;strong&gt;SHOW ERRORS&lt;/strong&gt; command, that would solve everything!&lt;/p&gt;
&lt;p&gt;MySQL &lt;strong&gt;5.0&lt;/strong&gt; introduced &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;, albeit an incomplete one. Shortly after, &lt;strong&gt;SHOW&lt;/strong&gt; commands were excluded from server side cursors. But that left us with so many missing parts. I&#39;ve opened a &lt;a href=&#34;http://bugs.mysql.com/bug.php?id=65897&#34;&gt;bug report/feature request&lt;/a&gt;. Would you please support it?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On stored routines and dynamic statements</title>
      <link>/blog/mysql/on-stored-routines-and-dynamic-statements/</link>
      <pubDate>Mon, 18 Jun 2012 11:16:29 +0000</pubDate>
      
      <guid>/blog/mysql/on-stored-routines-and-dynamic-statements/</guid>
      <description>&lt;p&gt;I very much enjoyed reading &lt;a href=&#34;http://blog.mclaughlinsoftware.com/2012/06/16/overloading-procedures/&#34; rel=&#34;bookmark&#34;&gt;Overloading Procedures&lt;/a&gt; by Michael McLaughlin: good stuff!&lt;/p&gt;
&lt;p&gt;I&#39;m dealing with similar issues in &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script.html&#34;&gt;common_schema/QueryScript&lt;/a&gt;, where I implement a whole new scripting language within MySQL, interpreted by stored routines. I am now finalizing the next version of &lt;em&gt;common_schema/QueryScript&lt;/em&gt;, with a major addition to the scripting language to put yet even more power at the hands of the programmer/DBA using simple, clean syntax.&lt;/p&gt;
&lt;p&gt;Still hush hush, the development of that feature touched at the very same issues described in Michael&#39;s post. Present in current release, these issues are intensified by the use and complexity of the new development. Here are a few insights of mine:&lt;/p&gt;
&lt;h4&gt;Internal array implementation&lt;/h4&gt;
&lt;p&gt;Like Michael, I started by implementing arrays through tables. That is, create a (temporary, in my case) table, wrap it up with a lot of stored routine code, and simulate an array. This array is not yet provided to the user, but is used internally for QueryScript&#39;s own code.&lt;/p&gt;
&lt;p&gt;Well, disappointment here: during load tests on intense structures, such as a &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script_foreach.html&#34;&gt;foreach&lt;/a&gt; loop, where each iteration of the loop requires the creation of an array, I found that the current solution does not hold well on busy servers.&lt;/p&gt;
&lt;p&gt;Seemingly, there&#39;s nothing wrong with the creation of a new table every once in a while -- and in particular a temporary table. However, I quickly found out that a busy server thrashes the table cache with such intense rate of creation/dropping of tables. The competition over the table cache mutex becomes intolerable and hogs not only the script&#39;s execution but the entire server&#39;s.&lt;/p&gt;
&lt;p&gt;There&#39;s also the issue of the type of array values -- no going around using textual columns, of course, but -- how long? A &lt;strong&gt;VARCHAR(32767)&lt;/strong&gt; should be enough for any reasonable implementation, but -- how much memory would that consume? Both &lt;strong&gt;MEMORY&lt;/strong&gt; and standard temporary tables (&lt;em&gt;Percona Server&lt;/em&gt; has that partially &lt;a href=&#34;http://www.mysqlperformanceblog.com/2011/09/06/dynamic-row-format-for-memory-tables/&#34;&gt;resolved&lt;/a&gt;) use a fixed row format, which means a 32K text is actually allocated in memory even when your value is &#39;x&#39;.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;The next release completely rewrites the internal array implementation. How does it work now?&lt;/p&gt;
&lt;p&gt;By avoiding using tables in the first place. To implement arrays now, I chose to use a well formatted text, such that can be easily parsed and manipulated.&lt;/p&gt;
&lt;p&gt;I chose XML format, for which MySQL provides with &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/xml-functions.html&#34;&gt;a couple functions&lt;/a&gt;. Far from covering real XML manipulation requirements, but with a little effort and hacking, can provide with a reasonable base for work.&lt;/p&gt;
&lt;p&gt;This also means the entire array resides in a single string, and this can be implemented by a User Defined Variable. So -- no tables!&lt;/p&gt;
&lt;p&gt;Moreover, there is now no need for stored procedures, since no dynamic SQL is sued. It&#39;s all functions, which makes for an easier access. And to wrap it up -- no need to decide about value limits. What fits in the string is what you get.&lt;/p&gt;
&lt;p&gt;This solution is not perfect, either, of course. There&#39;s more CPU used to parse/manipulate the XML (not a bug problem on my work since arrays are typically small), allocation/reallocation of memory (any manipulation assigns a new value to the User Defined Variable), and handling of &lt;strong&gt;NULL&lt;/strong&gt;s is more complex.&lt;/p&gt;
&lt;p&gt;Bottom line: overdoing &lt;strong&gt;CREATE TABLE/DROP TABLE&lt;/strong&gt;, even for &lt;strong&gt;TEMPORARY&lt;/strong&gt;, can be a pain. Avoid it.&lt;/p&gt;
&lt;h4&gt;Dyamic SQL&lt;/h4&gt;
&lt;p&gt;You can&#39;t invoke dynamic SQL from within dynamic SQL. There is a wide variety of additional commands that cannot be invoked by dynamic SQL.&lt;/p&gt;
&lt;p&gt;This calls for some attention. If you want to be able to dynamically invoke server commands issued by the user, you either limit the user&#39;s choice of commands, or you find another way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;QueryScript&lt;/em&gt; is a classic &lt;em&gt;&#34;interpreted by an interpreter&#34;&lt;/em&gt; code. I wish there was a better way, but I use stored routines to interpret &lt;em&gt;QueryScript&lt;/em&gt; text. So the &lt;em&gt;QueryScript&lt;/em&gt; interpreter takes care not to over do it. While just reading the script&#39;s text and sending it for dynamic invocation is certainly easier to code, it makes for said limitations. Thanks to &lt;a href=&#34;http://rpbouman.blogspot.co.il/&#34;&gt;Roland&lt;/a&gt;&#39;s contributions, &lt;em&gt;common_schema&lt;/em&gt; parses user&#39;s text, analyses and find intended queries, and -- sometimes -- simply runs it without dynamic invocation. Think nested if-else statement.&lt;/p&gt;
&lt;p&gt;Still, most user&#39;s code is indeed invoked dynamically.&lt;/p&gt;
&lt;h4&gt;Parsing by comma&lt;/h4&gt;
&lt;p&gt;If a user provides a comma delimited string, it is very dangerous to parse it via comma. The text &lt;strong&gt;&#39;one,two,three,four&#39;&lt;/strong&gt; seems fine, but what about &lt;strong&gt;&#39;one,two,&#34;hi, dad&#34;&#39;&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;So &lt;em&gt;common_schema&lt;/em&gt; does a lot of such parsing. It takes care to properly analyze quoted text. But more than that: since the parsing of such text is costly, &lt;em&gt;common_schema&lt;/em&gt; translates such text to a well-formed delimited text, such that there is a known, unique delimiter, not to be found within quotes, such that be splitting using said delimiter we get the definite tokenizing of the text.&lt;/p&gt;
&lt;p&gt;To illustrate how it works: it attempts an unlikely single-character delimiter. Consider &lt;strong&gt;&#39;\0&#39;&lt;/strong&gt;. Is &lt;strong&gt;&#39;\0&#39;&lt;/strong&gt; found in the original text? If not, we can once analyze the proper tokenization, then replace appropriate commas with &lt;strong&gt;&#39;\0&#39;&lt;/strong&gt;. Wait, is &lt;strong&gt;&#39;\0&#39;&lt;/strong&gt; found anywhere in the text? Then we try the even more unlikely delimiter &lt;strong&gt;&#39;\0\b&#39;&lt;/strong&gt;, then the yet unlikelier &lt;strong&gt;&#39;\0\b\r&#39;&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;h4&gt;QueryScript&lt;/h4&gt;
&lt;p&gt;QueryScript is a way to write stored SQL code &#34;the way it ought to be&#34;: simple, clean, useful, dynamic, flexible, wicked cool. A lot is going on, and I have enough ideas to last a couple years worth of development. No intention to create a heavyweight, full blown language. On the contrary: the language is intended to be simple, lightweight, and provide with easy to access interface to complex SQL operations. &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script.html&#34;&gt;Start the journey here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Auto caching tables</title>
      <link>/blog/mysql/auto-caching-tables/</link>
      <pubDate>Tue, 06 Mar 2012 15:18:36 +0000</pubDate>
      
      <guid>/blog/mysql/auto-caching-tables/</guid>
      <description>&lt;p&gt;Is there a way to create a caching table, some sort of a materialized view, such that &lt;em&gt;upon selecting&lt;/em&gt; from that table, its data is validated/invalidated?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint&lt;/em&gt;: yes.&lt;/p&gt;
&lt;p&gt;But to elaborate the point: say I have some table &lt;strong&gt;data_table&lt;/strong&gt;. Can I rewrite all my queries which access &lt;strong&gt;data_table&lt;/strong&gt; to read from some &lt;strong&gt;autocache_data_table&lt;/strong&gt;, but have nothing changed in the query itself? No caveats, no additional &lt;strong&gt;WHERE&lt;/strong&gt;s, and still have that &lt;strong&gt;autocache_data_table&lt;/strong&gt; provide with the correct data, dynamically updated by some rule &lt;em&gt;of our choice&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;And: no &lt;em&gt;crontab&lt;/em&gt;, no &lt;em&gt;event scheduler&lt;/em&gt;, and no funny triggers on &lt;strong&gt;data_table&lt;/strong&gt;? In such way that invalidation/revalidation occurs &lt;em&gt;upon &lt;strong&gt;SELECT&lt;/strong&gt;&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Well, yes.&lt;/p&gt;
&lt;p&gt;This post is long, but I suggest you read it through to understand the mechanism, it will be worthwhile.&lt;/p&gt;
&lt;h4&gt;Background&lt;/h4&gt;
&lt;p&gt;The following derives from my long research on how to provide better, faster and &lt;em&gt;safer&lt;/em&gt; access to &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; tables. It is however not limited to this exact scenario, and in this post I provide with a simple, general purpose example. I&#39;ll have more to share about &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; specific solutions shortly.&lt;/p&gt;
&lt;p&gt;I was looking for a server side solution which would not require query changes, apart from directing the query to other tables. Solution has to be supported by all standard MySQL installs; so: no plugins, no special rebuilds.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Sample data&lt;/h4&gt;
&lt;p&gt;I&#39;ll explain by walking through the solution. Let&#39;s begin with some sample table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE sample_data (
  id INT UNSIGNED NOT NULL PRIMARY KEY,
  dt DATETIME,
  msg VARCHAR(128) CHARSET ascii
);

INSERT INTO sample_data VALUES (1, NOW(), &#39;sample txt&#39;);
INSERT INTO sample_data VALUES (2, NOW(), &#39;sample txt&#39;);
INSERT INTO sample_data VALUES (3, NOW(), &#39;sample txt&#39;);

SELECT * FROM sample_data;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this simplistic example, I wish to create a construct which looks exactly like &lt;strong&gt;sample_data&lt;/strong&gt;, but which caches data according to some heuristic. It will, in fact, cache the entire content of &lt;strong&gt;sample_data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That much is not a problem: just create another table to cache the data:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE cache_sample_data LIKE sample_data;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big question is: how do you make the table invalidate itself while &lt;strong&gt;SELECT&lt;/strong&gt;ing from it?&lt;/p&gt;
&lt;p&gt;Here&#39;s the deal. I&#39;ll ask for your patience while I draw the outline, and start with failed solutions. By the end, everything will work.&lt;/p&gt;
&lt;h4&gt;Failed attempt: purge rows from the table even while reading it&lt;/h4&gt;
&lt;p&gt;My idea is to create a stored function which purges the &lt;strong&gt;cache_sample_data&lt;/strong&gt; table, then fills in with fresh data, according to some heuristic. Something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DELIMITER $$

CREATE FUNCTION `revalidate_cache_sample_data`() RETURNS tinyint unsigned
    MODIFIES SQL DATA
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
  if(rand() &amp;gt; 0.1) then
    return 0; -- simplistic heuristic
  end if;

  DELETE FROM cache_sample_data;
  INSERT INTO cache_sample_data SELECT * FROM sample_data;
  RETURN 0;
END $$

DELIMITER ;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the function uses some heuristic. It&#39;s a funny &lt;strong&gt;RAND()&lt;/strong&gt; in our case; you will want to check up on time stamps, or some flags, what have you. But this is not the important part here, and I want to keep the focus on the main logic.&lt;/p&gt;
&lt;p&gt;Upon deciding the table needs refreshing, the function purges all rows, then copies everything from &lt;strong&gt;sample_data&lt;/strong&gt;. Sounds fair enough?&lt;/p&gt;
&lt;p&gt;Let&#39;s try and invoke it. Just write some query by hand:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT revalidate_cache_sample_data();
+--------------------------------+
| revalidate_cache_sample_data() |
+--------------------------------+
|                              &lt;strong&gt;0&lt;/strong&gt; |
+--------------------------------+

mysql&amp;gt; SELECT revalidate_cache_sample_data();
+--------------------------------+
| revalidate_cache_sample_data() |
+--------------------------------+
|                              &lt;strong&gt;0&lt;/strong&gt; |
+--------------------------------+

mysql&amp;gt; SELECT revalidate_cache_sample_data();
+--------------------------------+
| revalidate_cache_sample_data() |
+--------------------------------+
|                              &lt;strong&gt;1&lt;/strong&gt; |
+--------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;First two invocations - nothing. The third one indicated a revalidation of cache data. Let&#39;s verify:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT * FROM cache_sample_data;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK, seems like the function works.&lt;/p&gt;
&lt;p&gt;We now gather some courage, and try combining calling to this function even while SELECTing from the cache table, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  cache_sample_data.*
FROM
  cache_sample_data,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To explain what happens in the above query, consider its &lt;a href=&#34;http://code.openark.org/blog/mysql/slides-from-my-talk-programmatic-queries-things-you-can-code-with-sql&#34;&gt;programmatic nature&lt;/a&gt;: we create a derived table, populated by the function&#39;s result. That means the function is invoked in order to generate the derived table. The derived table itself must be materialized before the query begins execution, and so it is that we first invoke the function, then make the &lt;strong&gt;SELECT&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Don&#39;t open the champagne yet. While the above paragraph is correct, we are deceived: in this last invocation, the function did &lt;strong&gt;not&lt;/strong&gt; attempt a revalidation. The &lt;strong&gt;RAND()&lt;/strong&gt; function just didn&#39;t provide with the right value.&lt;/p&gt;
&lt;p&gt;Let&#39;s try again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  cache_sample_data.*
FROM
  cache_sample_data,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;
&lt;strong&gt;ERROR 1442 (HY000): Can&#39;t update table &#39;cache_sample_data&#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aha! Bad news. The MySQL manual says on &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/stored-program-restrictions.html&#34;&gt;Restrictions on Stored Programs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;A stored function or trigger cannot modify a table that is already being used (for reading or writing) by the statement that invoked the function or trigger.&lt;/blockquote&gt;
&lt;h4&gt;Anyone to the rescue?&lt;/h4&gt;
&lt;p&gt;I was quite upset. Can we not make this work? At sorrow times like these, one reflects back on words of wiser people. What would &lt;a href=&#34;http://rpbouman.blogspot.com/&#34;&gt;Roland Bouman&lt;/a&gt; say on this?&lt;/p&gt;
&lt;p&gt;Oh, yes; he would say: &lt;em&gt;&#34;we can use a &lt;strong&gt;FEDERATED&lt;/strong&gt; table which connect onto itself, thus bypass the above restriction&#34;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;strong&gt;FEDERATED&lt;/strong&gt; is by default disabled nowadays; I cannot rely on its existence. Besides, to use &lt;strong&gt;FEDERATED&lt;/strong&gt; one has to fill in passwords and stuff. Definitely not an out-of-the-box solution in this case.&lt;/p&gt;
&lt;p&gt;Few more days gone by. Decided the problem cannot be solved. And then it hit me.&lt;/p&gt;
&lt;h4&gt;MyISAM to the rescue&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;MyISAM&lt;/strong&gt;&lt;/em&gt;? Really?&lt;/p&gt;
&lt;p&gt;Yes, and not only &lt;strong&gt;MyISAM&lt;/strong&gt;, but also its cousin: it&#39;s long abandoned cousin, forgotten once &lt;strong&gt;views&lt;/strong&gt; and &lt;strong&gt;partitions&lt;/strong&gt; came into MySQL. &lt;strong&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/merge-storage-engine.html&#34;&gt;MERGE&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MERGE&lt;/strong&gt; reflects the data contained within &lt;strong&gt;MyISAM&lt;/strong&gt; tables. Perhaps the most common use for &lt;strong&gt;MERGE&lt;/strong&gt; is to work out partitioned-like table of records, with &lt;strong&gt;MyISAM&lt;/strong&gt; table-per month, and an overlooking &lt;strong&gt;MERGE&lt;/strong&gt; table dynamically adding and removing tables from its view.&lt;/p&gt;
&lt;p&gt;But I intend for &lt;strong&gt;MERGE&lt;/strong&gt; a different use: just be an identical reflection of &lt;strong&gt;cache_sample_data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So we must work out the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;ALTER TABLE &lt;strong&gt;cache_sample_data&lt;/strong&gt; ENGINE=&lt;strong&gt;MyISAM&lt;/strong&gt;;
CREATE TABLE &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt; LIKE cache_sample_data;
ALTER TABLE &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt; ENGINE=&lt;strong&gt;MERGE&lt;/strong&gt; &lt;strong&gt;UNION=(cache_sample_data)&lt;/strong&gt;;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I just want to verify the new table is setup correctly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT * FROM cache_sample_data_wrapper;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems fine.&lt;/p&gt;
&lt;p&gt;So the next step is what makes the difference: the two tables are &lt;em&gt;not the same&lt;/em&gt;. One &lt;em&gt;relies on the other&lt;/em&gt;, but they are distinct. Our function &lt;strong&gt;DELETE&lt;/strong&gt;s from and &lt;strong&gt;INSERT&lt;/strong&gt;s to &lt;strong&gt;cached_sample_data&lt;/strong&gt;, but it does &lt;em&gt;not affect, nor lock&lt;/em&gt;, &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We now rewrite our query to read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  cache_sample_data_wrapper.*
FROM
  &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt;,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This query is perfectly valid. It works. To illustrate, I do:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;-- Try this a few times till RAND() is lucky:

&lt;strong&gt;TRUNCATE&lt;/strong&gt; cache_sample_data;

SELECT
  cache_sample_data_wrapper.*
FROM
  cache_sample_data_wrapper,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa! Where did all this data come from? Didn&#39;t we just &lt;strong&gt;TRUNCATE&lt;/strong&gt; the table?&lt;/p&gt;
&lt;p&gt;The query worked. The function re-populated &lt;strong&gt;cache_sample_data&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;The final touch&lt;/h4&gt;
&lt;p&gt;Isn&#39;t the above query just &lt;em&gt;beautiful&lt;/em&gt;? I suppose not many will share my opinion. What happened to my declaration that &lt;em&gt;&#34;the original query need not be changed, apart from querying a different table&#34;&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Yes, indeed. It&#39;s now time for the final touch. There&#39;s nothing amazing in this step, but we all know the way it is packaged is what makes the sale. We will now use &lt;em&gt;views&lt;/em&gt;. We use two of them since a view must not contain a &lt;em&gt;subquery&lt;/em&gt; in the &lt;strong&gt;FROM&lt;/strong&gt; clause. Here goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE OR REPLACE VIEW &lt;strong&gt;revalidate_cache_sample_data_view&lt;/strong&gt; AS
  SELECT revalidate_cache_sample_data()
;

CREATE OR REPLACE VIEW &lt;strong&gt;autocache_sample_data&lt;/strong&gt; AS
  SELECT
    cache_sample_data_wrapper.*
  FROM
    cache_sample_data_wrapper,
    revalidate_cache_sample_data_view
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, we can make a very simple query like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM &lt;strong&gt;autocache_sample_data&lt;/strong&gt;;
--
-- &lt;strong&gt;&lt;span style=&#34;color: #ff9900;&#34;&gt;Magic in work now!&lt;/span&gt;&lt;/strong&gt;
--
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much as we would query the original &lt;strong&gt;sample_data&lt;/strong&gt; table.&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;So what have we got? A stored routine, a &lt;strong&gt;MyISAM&lt;/strong&gt; table, a &lt;strong&gt;MERGE&lt;/strong&gt; table and two views. Quite a lot of constructs just to cache a table! But a beautiful cache access: &lt;em&gt;plain old SQL queries&lt;/em&gt;. The flow looks like this:&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/11/autocache_flow.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-4463&#34; title=&#34;autocache flow chart&#34; src=&#34;/blog/blog/assets/autocache_flow.png&#34; alt=&#34;&#34; width=&#34;835&#34; height=&#34;625&#34; /&gt;&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Our cache table is a &lt;strong&gt;MyISAM&lt;/strong&gt; table. It can get corrupted, which is bad. But not completely bad: it&#39;s nothing more than a cache; we can throw away its entire data, and revalidate. We can actually ask the function to revalidate (say, pass a parameter).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Documentation in SQL: CALL for help()</title>
      <link>/blog/mysql/documentation-in-sql-call-for-help/</link>
      <pubDate>Wed, 11 Jan 2012 09:01:54 +0000</pubDate>
      
      <guid>/blog/mysql/documentation-in-sql-call-for-help/</guid>
      <description>&lt;p&gt;Documentation is an important part of any project. On the projects I maintain I put a lot of effort on documentation, and, frankly, the majority of time spent on my projects is on documentation.&lt;/p&gt;
&lt;p&gt;The matter of keeping the documentation faithful is a topic of interest. I&#39;d like to outline a few documentation bundling possibilities, and the present the coming new documentation method for &lt;a href=&#34;http://code.google.com/p/common-schema/&#34; rel=&#34;nofollow&#34;&gt;common_schema&lt;/a&gt;. I&#39;ll talk about any bundling that is NOT &lt;em&gt;man pages&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;High level: web docs&lt;/h4&gt;
&lt;p&gt;This is the initial method of documentation I used for &lt;a title=&#34;openark kit&#34; href=&#34;../../forge/openark-kit&#34;&gt;openark kit&lt;/a&gt; and &lt;a title=&#34;mycheckpoint&#34; href=&#34;../../forge/mycheckpoint&#34;&gt;mycheckpoint&lt;/a&gt;. It&#39;s still valid for &lt;em&gt;mycheckpoint&lt;/em&gt;. Documentation is web-based. You need Internet access to read it. It&#39;s in HTML format.&lt;/p&gt;
&lt;p&gt;Well, not exactly HTML format: I wrote it in WordPress. Yes, it&#39;s HTML, but there&#39;s a lot of noise around (theme, menus, etc.) which is not strictly part of the documentation.&lt;/p&gt;
&lt;p&gt;While this is perhaps the easiest way to go, here&#39;s a few drawbacks:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&#39;re bound to some framework (WordPress in this case)&lt;/li&gt;
&lt;li&gt;Docs are split between MySQL database (my underlying WordPRess storage) &amp;amp; WordPress files (themes, style, header, footer etc.)&lt;/li&gt;
&lt;li&gt;Documentation is separate from your code - they&#39;re just not in the same place&lt;/li&gt;
&lt;li&gt;There is no version control over the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is a single source of documentation, which applies to whatever version is latest. It&#39;s impossible to maintain docs for multiple versions. You must manually synchronize your WordPress updates with code commits (or rather - code release!).&lt;/p&gt;
&lt;h4&gt;Mid level: version controlled HTML docs&lt;/h4&gt;
&lt;p&gt;I first saw this approach on Baron&#39;s &lt;a href=&#34;http://www.xaprb.com/blog/2010/09/22/aspersa-gets-a-user-manual/&#34; rel=&#34;bookmark&#34;&gt;Aspersa gets a user manual&lt;/a&gt; post. I loved it: the documentation is HTML, but stored as part of your project&#39;s code, in same version control.&lt;/p&gt;
&lt;p&gt;This means one can &lt;a href=&#34;http://openarkkit.googlecode.com/svn/trunk/openarkkit/doc/html/introduction.html&#34;&gt;browse the documentation&lt;/a&gt; (&lt;em&gt;openark kit&lt;/em&gt; in this example) exactly as it appears in the baseline. Depending on your project hosting, one may be able to do so per version.&lt;/p&gt;
&lt;p&gt;The approach has the great benefit of having the docs tightly coupled with the code in terms of development. Before committing code, one updates documentation for that code, then commits/releases both together.&lt;/p&gt;
&lt;p&gt;You&#39;re also not bound to any development framework. You may edit with &lt;em&gt;vim, emacs, gedit, bluefish, eclipse,&lt;/em&gt; ... any tool of your choice. It&#39;s all down to plain old text files.&lt;/p&gt;
&lt;h4&gt;Mid level #2: documentation bundling&lt;/h4&gt;
&lt;p&gt;One thing I started doing with common_schema is to release a doc bundle with the code. So one can download a compressed bundle of all HTML files. That way one is absolutely certain what&#39;s the right documentation for revision &lt;strong&gt;178&lt;/strong&gt;. There&#39;s no effort about it: the docs are already tightly coupled with code versions. Just compress and distribute.&lt;/p&gt;
&lt;h4&gt;Low level: documentation coupled with your code&lt;/h4&gt;
&lt;p&gt;Perl scripts can be written as Perl modules, in which case they are eligible for using the &lt;em&gt;perldoc&lt;/em&gt; convention. You code your documentation within your script itself, as comment. &lt;em&gt;Perldoc&lt;/em&gt; can extract the documentation and present in man-like format. Same happens with Python&#39;s &lt;em&gt;pydoc&lt;/em&gt;. Baron&#39;s &lt;a href=&#34;http://www.xaprb.com/blog/2011/11/07/when-documentation-is-code/&#34; rel=&#34;bookmark&#34;&gt;When documentation is code&lt;/a&gt; illustrates that approach. &lt;a href=&#34;http://www.maatkit.org/&#34;&gt;Maatkit&lt;/a&gt; (now &lt;em&gt;Percona Toolkit&lt;/em&gt;) has been using it for years.&lt;/p&gt;
&lt;p&gt;This method has the advantage of having the documentation ready right within your shell. You don&#39;t need a browser, nor firewall access. The docs are just there for you in the same environment where you&#39;re executing the code.&lt;/p&gt;
&lt;h4&gt;SQL Low level: CALL for help()&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; is a different type of project. It is merely a schema. There&#39;s no Perl nor Python. One imports the schema into one&#39;s MySQL server.&lt;/p&gt;
&lt;p&gt;What&#39;s the low-level approach for this type of code?&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;common_schema&lt;/em&gt; I use three levels of documentation: the mid-level, where one can &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/introduction.html&#34;&gt;browse through the versioned docs&lt;/a&gt;, the 2nd mid-level, where one can &lt;a href=&#34;http://code.google.com/p/common-schema/downloads/list&#34;&gt;download bundled documentation&lt;/a&gt;, and then a low-level approach: documentation embedded within the code.&lt;/p&gt;
&lt;p&gt;MySQL&#39;s documentation is also built into the server: see the &lt;strong&gt;help_*&lt;/strong&gt; tables within the &lt;strong&gt;mysql&lt;/strong&gt; schema. The &lt;em&gt;mysql&lt;/em&gt; command line client allows one to access help by supporting the help command, e.g.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; help create table;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The client intercepts this command (this is not server side command) and searches through the &lt;strong&gt;mysql.help_*&lt;/strong&gt; docs.&lt;/p&gt;
&lt;p&gt;With &lt;em&gt;common_schema&lt;/em&gt;, I don&#39;t have control over the client; it&#39;s all on server side. But the code being a schema, what with stored routines and tables, it&#39;s easy enough to set up documentation.&lt;/p&gt;
&lt;p&gt;As of the next version of &lt;em&gt;common_schema&lt;/em&gt;, and following MySQL&#39;s method, &lt;em&gt;common_schema&lt;/em&gt; provides a &lt;strong&gt;help&lt;/strong&gt; table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DESC help;
+--------------+-------------+------+-----+---------+-------+
| Field        | Type        | Null | Key | Default | Extra |
+--------------+-------------+------+-----+---------+-------+
| topic        | varchar(32) | NO   | PRI | NULL    |       |
| help_message | text        | NO   |     | NULL    |       |
+--------------+-------------+------+-----+---------+-------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And a &lt;strong&gt;help()&lt;/strong&gt; procedure, so that you can call for &lt;em&gt;help()&lt;/em&gt;. The procedure will look for the best matching document based on your search expression:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mysql-5.1.51&amp;gt; &lt;strong&gt;CALL help(&#39;match&#39;);&lt;/strong&gt;
&lt;strong&gt;+---------------------------------------&lt;/strong&gt;----------------------------------------+
| help                                                                          |
+-------------------------------------------------------------------------------+
|                                                                               |
| NAME                                                                          |
|                                                                               |
| match_grantee(): Match an existing account based on user+host.                |
|                                                                               |
| TYPE                                                                          |
|                                                                               |
| Function                                                                      |
|                                                                               |
| DESCRIPTION                                                                   |
|                                                                               |
| MySQL does not provide with identification of logged in accounts. It only     |
| provides with user + host:port combination within processlist. Alas, these do |
| not directly map to accounts, as MySQL lists the host:port from which the     |
| connection is made, but not the (possibly wildcard) user or host.             |
| This function matches a user+host combination against the known accounts,     |
| using the same matching method as the MySQL server, to detect the account     |
| which MySQL identifies as the one matching. It is similar in essence to       |
| CURRENT_USER(), only it works for all sessions, not just for the current      |
| session.                                                                      |
|                                                                               |
| SYNOPSIS                                                                      |
|                                                                               |
|                                                                               |
|                                                                               |
|        match_grantee(connection_user char(16) CHARSET utf8,                   |
|        connection_host char(70) CHARSET utf8)                                 |
|          RETURNS VARCHAR(100) CHARSET utf8                                    |
|                                                                               |
|                                                                               |
| Input:                                                                        |
|                                                                               |
| * connection_user: user login (e.g. as specified by PROCESSLIST)              |
| * connection_host: login host. May optionally specify port number (e.g.       |
|   webhost:12345), which is discarded by the function. This is to support      |
|   immediate input from as specified by PROCESSLIST.                           |
|                                                                               |
|                                                                               |
| EXAMPLES                                                                      |
|                                                                               |
| Find an account matching the given use+host combination:                      |
|                                                                               |
|                                                                               |
|        mysql&amp;gt; SELECT match_grantee(&#39;apps&#39;, &#39;192.128.0.1:12345&#39;) AS            |
|        grantee;                                                               |
|        +------------+                                                         |
|        | grantee    |                                                         |
|        +------------+                                                         |
|        | &#39;apps&#39;@&#39;%&#39; |                                                         |
|        +------------+                                                         |
|                                                                               |
|                                                                               |
|                                                                               |
| ENVIRONMENT                                                                   |
|                                                                               |
| MySQL 5.1 or newer                                                            |
|                                                                               |
| SEE ALSO                                                                      |
|                                                                               |
| processlist_grantees                                                          |
|                                                                               |
| AUTHOR                                                                        |
|                                                                               |
| Shlomi Noach                                                                  |
|                                                                               |
+-------------------------------------------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I like HTML for documentation. I think it&#39;s a good format, provided you don&#39;t start doing funny things. Perhaps &lt;em&gt;TROFF&lt;/em&gt; is more suitable; certainly more popular on Unix machines. But I already have everything in HTML. So, what do I do?&lt;/p&gt;
&lt;p&gt;My decision was to keep documentation in HTML, and use the handy &lt;em&gt;html2text&lt;/em&gt; tool to do the job. And it does it pretty well! The sample you see above is an automated translation of HTML to plain text.&lt;/p&gt;
&lt;p&gt;I add a few touches of my own: SELECTing long texts is ugly, whether you do it via &#34;&lt;strong&gt;;&lt;/strong&gt;&#34; or &#34;&lt;strong&gt;\G&lt;/strong&gt;&#34;. The &lt;strong&gt;help()&lt;/strong&gt; routine breaks the text by &#39;&lt;strong&gt;\n&lt;/strong&gt;&#39;, returning a multi row result set. The above sample makes for some &lt;strong&gt;60+&lt;/strong&gt; rows, nicely formatted, broken from the original single text appearing in the &lt;strong&gt;help&lt;/strong&gt; table.&lt;/p&gt;
&lt;p&gt;So now you have an internal help method for &lt;em&gt;common_schema&lt;/em&gt;, right where the code is. You don&#39;t have to leave the command line client in order to get help.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://datacharmer.blogspot.com/&#34;&gt;Giuseppe&lt;/a&gt; offered me the idea for this, even while my own thinking about it was in early stages.&lt;/p&gt;
&lt;p&gt;The next version of &lt;em&gt;common_schema&lt;/em&gt; will be available in a few weeks. The code is pretty much ready. I just need to work on, ahem..., the documentation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>common_schema, rev. 178: foreach(), repeat_exec(), Roland Bouman, query analysis</title>
      <link>/blog/mysql/common_schema-rev-178-foreach-repeat_exec-roland-bouman-query-analysis/</link>
      <pubDate>Thu, 01 Dec 2011 11:33:01 +0000</pubDate>
      
      <guid>/blog/mysql/common_schema-rev-178-foreach-repeat_exec-roland-bouman-query-analysis/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/common-schema/&#34; rel=&#34;nofollow&#34;&gt;common_schema&lt;/a&gt;, revision &lt;strong&gt;178&lt;/strong&gt; is now released, with major additions. This revision turns &lt;em&gt;common_schema&lt;/em&gt; into a &lt;em&gt;framework&lt;/em&gt;, rather than a set of views and functions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; provides with query scripting, analysis &amp;amp; informational views, and a function library, allowing for easier administration and diagnostics for MySQL. It introduces SQL based tools which simplify otherwise complex shell and client scripts, allowing the DBA to be independent of operating system, installed packages and dependencies.&lt;/p&gt;
&lt;p&gt;There&#39;s no Perl nor Python, and no dependencies to install. It&#39;s just a &lt;em&gt;schema&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Some highlights for the new revision:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;foreach()&lt;/strong&gt;, aka &lt;strong&gt;$()&lt;/strong&gt;: loop through a collection, execute callback commands per element.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repeat_exec()&lt;/strong&gt;: a repeat-until device: execute queries until some condition holds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec_file()&lt;/strong&gt;: execute files a-la SOURCE, but on server side&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query analysis&lt;/strong&gt;: analyze query text, view or routine definitions to detect dependency objects.&lt;/li&gt;
&lt;li&gt;Improvements to views and routines, new routines introduced.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s take a closer look:&lt;/p&gt;
&lt;h4&gt;rpbouman&lt;/h4&gt;
&lt;p&gt;I&#39;m very happy to have &lt;a href=&#34;http://rpbouman.blogspot.com/&#34;&gt;Roland Bouman&lt;/a&gt; working on this project. He introduced some sophisticated code without which some functionality could not take place. I&#39;m sure I don&#39;t need to introduce his great capabilities; I&#39;ll just pass the note that it is very good working with him!&lt;/p&gt;
&lt;h4&gt;foreach()&lt;/h4&gt;
&lt;p&gt;Introducing a looping device which can iterate a collection and execute callback commands.&lt;/p&gt;
&lt;p&gt;What&#39;s a collection? A range of numbers; a set of constants; the result set of a &lt;strong&gt;SELECT&lt;/strong&gt; query; tables in your database and more.&lt;/p&gt;
&lt;p&gt;What is a callback? A query or set of queries to invoke on the specific elements in the collection. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call &lt;strong&gt;foreach&lt;/strong&gt;(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;table in sakila&#39;&lt;/span&gt;, &lt;span style=&#34;color: #000080;&#34;&gt;&#39;ALTER TABLE ${schema}.${table} ENGINE=InnoDB ROW_FORMAT=COMPRESSED&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ll publish dedicated posts on &lt;em&gt;foreach()&lt;/em&gt;, aka &lt;em&gt;$()&lt;/em&gt;, following this post. Official documentation is &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/foreach.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;repeat_exec()&lt;/h4&gt;
&lt;p&gt;Repeat executing queries in a given interval, until some condition holds.&lt;/p&gt;
&lt;p&gt;What kind of condition? You can loop forever, or until a given time has passed, a given number of iteration has passed.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;You can iterate until no rows are affected by your commands (your callbacks), or until some dynamic condition holds (a query evaluates to &lt;strong&gt;true&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;For example: purge rows from a table until no more rows are affected; in interval of &lt;strong&gt;3&lt;/strong&gt; second:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call &lt;strong&gt;repeat_exec&lt;/strong&gt;(3, &#39;DELETE FROM test.event WHERE ts &amp;lt; CURDATE() ORDER BY id LIMIT 1000&#39;, 0);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Official documentation is &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/repeat_exec.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;exec_file()&lt;/h4&gt;
&lt;p&gt;If you need to execute commands from a file, you usually invoke SOURCE:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SOURCE &#39;/tmp/somefile.sql&#39;;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or you invoke mysql client and redirect its input to read from file:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;bash$ mysql some_db &amp;lt; /tmp/somefile.sql&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SOURCE&lt;/strong&gt; is a MySQL client command. The file must reside on your client. Running the &lt;strong&gt;mysql&lt;/strong&gt; client is great, but you need to work it out from &lt;em&gt;outside&lt;/em&gt; the server.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;call_exec()&lt;/em&gt; will let you import a file &lt;em&gt;on server side&lt;/em&gt;, from &lt;em&gt;within the server&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call &lt;strong&gt;exec_file&lt;/strong&gt;(&#39;/tmp/some_file.sql&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will need to have the file readable; it is limited to 64K at this moment; it may not use DELIMITER, and it may not include dynamic SQL. These are the limitations.&lt;/p&gt;
&lt;p&gt;Official documentation is &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/exec_file.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;exec() / exec_single()&lt;/h4&gt;
&lt;p&gt;All of the above rely on the &lt;em&gt;exec()&lt;/em&gt; / &lt;em&gt;exec_single()&lt;/em&gt; routines, which dynamically execute a set of queries. One one hand, it&#39;s no big deal: they only have to use prepared statements in order to invoke the queries. But then, they knows how to parse multiple queries (find the &#34;;&#34; delimiter correctly), plus they allow for configuration: if you set &lt;strong&gt;@common_schema_dryrun&lt;/strong&gt;, queries are not actually executes; just printed out. If you set &lt;strong&gt;@common_schema_verbose&lt;/strong&gt;, queries are verbosed in addition to being executed. Since all execution routines rely on these,we get a standardized pattern.&lt;/p&gt;
&lt;p&gt;Official documentation &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/exec_single.html&#34;&gt;is&lt;/a&gt; &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/exec.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Query analysis&lt;/h4&gt;
&lt;p&gt;Query parsing routines allow for detection of dependencies within queries. While not full-blown SQL parser, these allow one to realize on which tables or routines a view depends on; or a routines depends on; or an event; or just any query.&lt;/p&gt;
&lt;p&gt;These routines can analyze the text of not only a &lt;strong&gt;SELECT&lt;/strong&gt; query, but also &lt;strong&gt;UPDATE&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;, &lt;strong&gt;CREATE&lt;/strong&gt;, etc. They can read the code of a stored routines, including queries and control flow constructs; thus, they are also able to analyze events and triggers.&lt;/p&gt;
&lt;p&gt;At this stage forward-dependencies resolution is supported. This can eventually lead to dependency graphs or to reverse-dependency resolution (i.e. &#34;which view, routine, trigger or event depend on table &lt;strong&gt;t&lt;/strong&gt;?&#34;)&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; call &lt;strong&gt;get_view_dependencies&lt;/strong&gt;(&#39;sakila&#39;, &#39;actor_info&#39;);
+-------------+---------------+-------------+--------+
| schema_name | object_name   | object_type | action |
+-------------+---------------+-------------+--------+
| sakila      | actor         | table       | select |
| sakila      | category      | table       | select |
| sakila      | film          | table       | select |
| sakila      | film_actor    | table       | select |
| sakila      | film_category | table       | select |
+-------------+---------------+-------------+--------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The query analysis routines are in BETA stage.&lt;/p&gt;
&lt;p&gt;Official documentation is &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_analysis_routines.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Test quite&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; is now tested. Not all code is as yet under tests; all new code is, and some of the older code. Work is in progress to add more and more tests.&lt;/p&gt;
&lt;h4&gt;Further changes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;candidate_keys&lt;/strong&gt; does not give higher score for &lt;strong&gt;PRIMARY KEY&lt;/strong&gt;s any longer. It ranks all unique keys according to its own heuristic; it also provides with the  &lt;strong&gt;is_primary&lt;/strong&gt; and &lt;strong&gt;is_nullable&lt;/strong&gt; columns.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;candidate_keys_recommended&lt;/strong&gt; view, recommending best candidate key per table (while noting whether it qualifies as &lt;strong&gt;PRIMARY KEY&lt;/strong&gt; in terms of &lt;strong&gt;NULL&lt;/strong&gt;able columns).&lt;/li&gt;
&lt;li&gt;Added many text parsing and text manipulation routines, such as better trim, tokenizing, etc. Improved existing code significantly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Get it&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; is &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;available for downloaded&lt;/a&gt;. It is released under the &lt;strong&gt;BSD&lt;/strong&gt; license, and is free.&lt;/p&gt;
&lt;p&gt;I&#39;ve put very hard work into &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/introduction.html&#34;&gt;common_schema&#39;s documentation&lt;/a&gt;. It is very thorough and provides with clear examples. The documentation is also available for download.&lt;/p&gt;
&lt;p&gt;If you encounter problems, &lt;a href=&#34;http://code.google.com/p/common-schema/issues/list&#34;&gt;please report on the issues page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;common_schema&lt;/em&gt; is meant to be downloaded &amp;amp; installed on any MySQL server. It provides with general and essential functionality. Spread the word!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Self throttling MySQL queries</title>
      <link>/blog/mysql/self-throttling-mysql-queries/</link>
      <pubDate>Tue, 01 Nov 2011 09:55:47 +0000</pubDate>
      
      <guid>/blog/mysql/self-throttling-mysql-queries/</guid>
      <description>&lt;p&gt;Recap on the problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A query takes a long time to complete.&lt;/li&gt;
&lt;li&gt;During this time it makes for a lot of I/O.&lt;/li&gt;
&lt;li&gt;Query&#39;s I/O overloads the db, making for other queries run slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I introduce the notion of self-throttling queries: queries that go to sleep, by themselves, throughout the runtime. The sleep period means the query does not perform I/O at that time, which then means other queries can have their chance to execute.&lt;/p&gt;
&lt;p&gt;I present two approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The naive approach: for every &lt;strong&gt;1,000&lt;/strong&gt; rows, the query sleep for &lt;strong&gt;1&lt;/strong&gt; second&lt;/li&gt;
&lt;li&gt;The factor approach: for every &lt;strong&gt;1,000&lt;/strong&gt; rows, the query sleeps for the amount of time it took to iterate those &lt;strong&gt;1,000&lt;/strong&gt; rows (effectively doubling the total runtime of the query).&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Sample query&lt;/h4&gt;
&lt;p&gt;We use a simple, single-table scan. No aggregates (which complicate the solution considerably).&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  rental_id,
  TIMESTAMPDIFF(DAY, rental_date, return_date) AS rental_days
FROM
  sakila.rental
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;The naive solution&lt;/h4&gt;
&lt;p&gt;We need to know every &lt;strong&gt;1,000&lt;/strong&gt; rows. So we need to count the rows. We do that by using a counter, as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  rental_id,
  TIMESTAMPDIFF(DAY, rental_date, return_date) AS rental_days,
  @row_counter := @row_counter + 1
FROM
  sakila.rental,
  (SELECT @row_counter := 0) sel_row_counter
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;A thing that bothers me, is that I wasn&#39;t asking for an additional column. I would like the result set to remain as it were; same result structure. We also want to sleep for &lt;strong&gt;1&lt;/strong&gt; second for each &lt;strong&gt;1,000&lt;/strong&gt; rows. So we merge the two together along with one of the existing columns, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  rental_id +
    IF(
      (@row_counter := @row_counter + 1) % 1000 = 0,
      SLEEP(1), 0
    ) AS rental_id,
  TIMESTAMPDIFF(DAY, rental_date, return_date) AS rental_days
FROM
  sakila.rental,
  (SELECT @row_counter := 0) sel_row_counter
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To remain faithful to &lt;a href=&#34;http://code.openark.org/blog/mysql/slides-from-my-talk-programmatic-queries-things-you-can-code-with-sql&#34;&gt;my slides&lt;/a&gt;, I rewrite as follows, and this is &lt;em&gt;the naive solution&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  rental_id +
    CASE
      WHEN &lt;strong&gt;(@row_counter := @row_counter + 1) % 1000 = 0&lt;/strong&gt; THEN &lt;strong&gt;SLEEP(1)&lt;/strong&gt;
      ELSE &lt;strong&gt;0&lt;/strong&gt;
    END AS rental_id,
  TIMESTAMPDIFF(DAY, rental_date, return_date) AS rental_days
FROM
  sakila.rental,
  (SELECT @row_counter := 0) sel_row_counter
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;WHEN&lt;/strong&gt; clause always returns &lt;strong&gt;0&lt;/strong&gt;, so it does not affect the value of &lt;strong&gt;rental_id&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;The factor approach&lt;/h4&gt;
&lt;p&gt;In the factor approach we wish to keep record of query execution, every &lt;strong&gt;1,000&lt;/strong&gt; rows. I introduce a nested &lt;strong&gt;WHEN&lt;/strong&gt; statement which updates time records. I rely on &lt;strong&gt;SYSDATE()&lt;/strong&gt; to return the true time, and on &lt;strong&gt;NOW()&lt;/strong&gt; to return query execution start time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  rental_id +
    CASE
      WHEN (@row_counter := @row_counter + 1) IS NULL THEN NULL
      WHEN &lt;strong&gt;@row_counter % 1000 = 0&lt;/strong&gt; THEN
        CASE
          WHEN (@time_now := &lt;strong&gt;SYSDATE()&lt;/strong&gt;) IS NULL THEN NULL
          WHEN (@time_diff := (&lt;strong&gt;TIMESTAMPDIFF(SECOND, @chunk_start_time, @time_now)&lt;/strong&gt;)) IS NULL THEN NULL
          WHEN &lt;strong&gt;SLEEP(@time_diff)&lt;/strong&gt; IS NULL THEN NULL
          WHEN (@chunk_start_time := &lt;strong&gt;SYSDATE()&lt;/strong&gt;) IS NULL THEN NULL
          ELSE 0
        END
      ELSE 0
    END AS rental_id,
  TIMESTAMPDIFF(DAY, rental_date, return_date) AS rental_days
FROM
  sakila.rental,
  (SELECT @row_counter := 0) sel_row_counter,
  (SELECT @chunk_start_time := NOW()) sel_chunk_start_time
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Proof&lt;/h4&gt;
&lt;p&gt;How can we prove that the queries do indeed work?&lt;/p&gt;
&lt;p&gt;We can see if the total runtime sums up to the number of sleep calls, in seconds; but how do we know that sleeps do occur at the correct times?&lt;/p&gt;
&lt;p&gt;A solution I offer is to use a stored routines which logs to a MyISAM table (a non transactional table) the exact time (using &lt;strong&gt;SYSDATE()&lt;/strong&gt;) and value per row. The following constructs are introduced:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;CREATE TABLE&lt;/strong&gt; test.proof(
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  dt DATETIME NOT NULL,
  msg VARCHAR(255)
) &lt;strong&gt;ENGINE=MyISAM&lt;/strong&gt;;

DELIMITER $$
&lt;strong&gt;CREATE FUNCTION&lt;/strong&gt; test.prove_it(message VARCHAR(255)) RETURNS TINYINT
DETERMINISTIC
MODIFIES SQL DATA
BEGIN
  &lt;strong&gt;INSERT INTO test.proof (dt, msg) VALUES (SYSDATE(), message); RETURN 0;&lt;/strong&gt;
END $$
DELIMITER ;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;prove_it()&lt;/strong&gt; function records the immediate time and a message into the MyISAM table, which immediately accepts the write, being non-transactional. It returns with &lt;strong&gt;0&lt;/strong&gt;, so we will now embed it within the query. Of course, the function itself incurs some overhead, but it will nevertheless convince you that &lt;strong&gt;SLEEP()&lt;/strong&gt;s do occur at the right time!&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  rental_id +
    CASE
      WHEN (@row_counter := @row_counter + 1) IS NULL THEN NULL
      WHEN @row_counter % 1000 = 0 THEN
        CASE
          WHEN (@time_now := SYSDATE()) IS NULL THEN NULL
          WHEN (@time_diff := (TIMESTAMPDIFF(SECOND, @chunk_start_time, @time_now))) IS NULL THEN NULL
          WHEN SLEEP(@time_diff)&lt;strong&gt; + test.prove_it(CONCAT(&#39;will sleep for &#39;, @time_diff, &#39; seconds&#39;))&lt;/strong&gt; IS NULL THEN NULL
          WHEN (@chunk_start_time := SYSDATE()) IS NULL THEN NULL
          ELSE 0
        END
      ELSE 0
    END AS rental_id,
  TIMESTAMPDIFF(DAY, rental_date, return_date) AS rental_days
FROM
  sakila.rental,
  (SELECT @row_counter := 0) sel_row_counter,
  (SELECT @chunk_start_time := NOW()) sel_chunk_start_time
;

mysql&amp;gt; SELECT * FROM test.proof;
+----+---------------------+--------------------------+
| id | dt                  | msg                      |
+----+---------------------+--------------------------+
|  1 | 2011-11-01 09:22:36 | will sleep for 1 seconds |
|  2 | 2011-11-01 09:22:36 | will sleep for 0 seconds |
|  3 | 2011-11-01 09:22:36 | will sleep for 0 seconds |
|  4 | 2011-11-01 09:22:36 | will sleep for 0 seconds |
|  5 | 2011-11-01 09:22:36 | will sleep for 0 seconds |
|  6 | 2011-11-01 09:22:36 | will sleep for 0 seconds |
|  7 | 2011-11-01 09:22:38 | will sleep for 1 seconds |
|  8 | 2011-11-01 09:22:38 | will sleep for 0 seconds |
|  9 | 2011-11-01 09:22:38 | will sleep for 0 seconds |
| 10 | 2011-11-01 09:22:38 | will sleep for 0 seconds |
| 11 | 2011-11-01 09:22:38 | will sleep for 0 seconds |
| 12 | 2011-11-01 09:22:40 | will sleep for 1 seconds |
| 13 | 2011-11-01 09:22:40 | will sleep for 0 seconds |
| 14 | 2011-11-01 09:22:40 | will sleep for 0 seconds |
| 15 | 2011-11-01 09:22:40 | will sleep for 0 seconds |
+----+---------------------+--------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above query is actually very fast. Try adding &lt;strong&gt;BENCHMARK(1000,ENCODE(&#39;hello&#39;,&#39;goodbye&#39;))&lt;/strong&gt; to rental_id so as to make it slower, or just use it on a really large table, see what happens (this is what I actually used to make the query run for several seconds in the example above).&lt;/p&gt;
&lt;p&gt;Observant reads will note that the &lt;strong&gt;&#34;will sleep...&#34;&lt;/strong&gt; message actually gets written &lt;em&gt;after&lt;/em&gt; the &lt;strong&gt;SLEEP()&lt;/strong&gt; call. I leave this as it is.&lt;/p&gt;
&lt;p&gt;Another very nice treat of the code is that you don&#39;t need sub-second resolution for it to work. If you look at the above, we don&#39;t actually go to sleep every &lt;strong&gt;1,000&lt;/strong&gt; rows (&lt;strong&gt;1,000&lt;/strong&gt; is just too quick in the query -- perhaps I should have used &lt;strong&gt;10,000&lt;/strong&gt; seconds). But we &lt;em&gt;do&lt;/em&gt; make it once a second has &lt;em&gt;elapsed&lt;/em&gt;. Which means it works correctly &lt;em&gt;on average&lt;/em&gt;. Of course, the entire discussion is only of interest when a query executes for a &lt;em&gt;substantial&lt;/em&gt; number of seconds, so this is just an anecdote.&lt;/p&gt;
&lt;h4&gt;And the winner is...&lt;/h4&gt;
&lt;p&gt;Wow, this &lt;a href=&#34;http://code.openark.org/blog/mysql/contest-for-glory-write-a-self-throttling-mysql-query&#34;&gt;contest&lt;/a&gt; was anything but popular. &lt;strong&gt;&lt;a href=&#34;http://marcalff.blogspot.com/&#34;&gt;Marc Alff&lt;/a&gt;&lt;/strong&gt; is the obvious winner: he is the &lt;em&gt;only&lt;/em&gt; one to suggest a solution :)&lt;/p&gt;
&lt;p&gt;But Marc uses a very nice trick: he reads the &lt;strong&gt;PERFORMANCE_SCHEMA&lt;/strong&gt;. Now, I&#39;m not sure how the &lt;strong&gt;PERFORMANCE_SCHEMA&lt;/strong&gt; gets updated. I know that the &lt;strong&gt;INFORMATION_SCHEMA.GLOBAL_STATUS&lt;/strong&gt; table does not get updated by a query until the query completes (so you cannot expect a change in &lt;strong&gt;innodb_rows_read&lt;/strong&gt; throughout the execution of the query). I just didn&#39;t test it (homework, anyone?). If it does get updated, then we can throttle the query based on InnoDB page reads using a simple query. Otherwise, an access to &lt;strong&gt;/proc/diskstats&lt;/strong&gt; is possible, assuming no &lt;em&gt;apparmor&lt;/em&gt; or &lt;em&gt;SELinux&lt;/em&gt; are blocking us.&lt;/p&gt;
&lt;p&gt;Marc also uses a stored function, which is the &lt;em&gt;clean&lt;/em&gt; way of doing it; however I distrust the overhead incurred by s stored routine and prefer my solution (which is, admittedly, not a pretty SQL sight!).&lt;/p&gt;
&lt;p&gt;Happy throttling!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>