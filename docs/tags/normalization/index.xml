<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Normalization on code.openark.org</title>
    <link>/blog/tags/normalization/</link>
    <description>Recent content in Normalization on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 18 Nov 2008 09:37:57 +0000</lastBuildDate>
    <atom:link href="/blog/tags/normalization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Common wrong Data Types compilation</title>
      <link>/blog/mysql/common-data-types-errors-compilation/</link>
      <pubDate>Tue, 18 Nov 2008 09:37:57 +0000</pubDate>
      
      <guid>/blog/mysql/common-data-types-errors-compilation/</guid>
      <description>&lt;p&gt;During my work with companies using MySQL, I have encountered many issues with regard to schema design, normalization and indexing. Of the most common errors are incorrect data types definition. Many times the database is designed by programmers or otherwise non-expert DBAs. Some companies do not have the time and cannot spare the effort of redesigning and refactoring their databases, and eventually face poor performance issues.&lt;/p&gt;
&lt;p&gt;Here&#39;s a compilation of &#34;the right and the wrong&#34; data types.&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;INT(1)&lt;/code&gt;&lt;/strong&gt; is not one byte long. &lt;strong&gt;&lt;code&gt;INT(10)&lt;/code&gt;&lt;/strong&gt; is no bigger than &lt;strong&gt;&lt;code&gt;INT(2)&lt;/code&gt;&lt;/strong&gt;. The number in parenthesis is misleading, and only describes the text alignment of the number, when displayed in an interactive shell. All mentioned types are the same INT, have the same storage capacity, and the same range. If you want a one-byte &lt;strong&gt;&lt;code&gt;INT&lt;/code&gt;&lt;/strong&gt;, use &lt;strong&gt;&lt;code&gt;TINYINT&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;An integer &lt;strong&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/strong&gt; is preferable, especially if you&#39;re using the InnoDB storage engine. If possible, avoid using &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; as &lt;strong&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/strong&gt;. In InnoDB, this will make the clustered index deeper, secondary indexes larger (sometimes much larger) and look ups slower.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; to represent timestamps. It may look like &lt;strong&gt;&lt;code&gt;&#39;2008-11-14 07:59:13&#39;&lt;/code&gt;&lt;/strong&gt; is a textual field, but in fact it&#39;s just an integer counting the seconds elapsed from 1970-01-01. That&#39;s 4 bytes vs. 19 if you&#39;re using &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/strong&gt; charset, or more if you&#39;re using &lt;strong&gt;&lt;code&gt;UTF8&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt; to represent IPv4 addresses. This one is quite common. The IP 192.168.100.255 can be represented with &lt;strong&gt;&lt;code&gt;VARCHAR(15)&lt;/code&gt;&lt;/strong&gt;, true, but could be better represented with a 4-byte int. That&#39;s what IPv4 is: four bytes. Use the &lt;strong&gt;&lt;code&gt;INET_ATON()&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;INET_NTOA()&lt;/code&gt;&lt;/strong&gt; functions to translate between the INT value and textual value.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;This one should be obvious, but I&#39;ve seen it in reality, where the schema was auto generated by some naive generator: do not represent numbers as text. Yes, I have seen integer columns represented by &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;. Don&#39;t ask how the performance was.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MD5()&lt;/code&gt;&lt;/strong&gt; columns shouldn&#39;t be &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;. Use &lt;strong&gt;&lt;code&gt;CHAR(32)&lt;/code&gt;&lt;/strong&gt; instead. It&#39;s always 32 bytes long, so no need for &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;&#39;s additional byte overhead. If your tables or database are &lt;strong&gt;&lt;code&gt;UTF8&lt;/code&gt;&lt;/strong&gt; by default, make sure the MD5 column&#39;s charset is &lt;strong&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/strong&gt;, or it will consume 96 bytes instead of just 32. I also suggest the case-sensitive &lt;strong&gt;&lt;code&gt;ascii_bin&lt;/code&gt;&lt;/strong&gt; collation, but that&#39;s a more minor issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PASSWORD()&lt;/code&gt;&lt;/strong&gt; columns shouldn&#39;t be &lt;strong&gt;&lt;code&gt;VARCHAR&lt;/code&gt;&lt;/strong&gt;, but &lt;strong&gt;&lt;code&gt;CHAR&lt;/code&gt;&lt;/strong&gt;. The length depends on whether you&#39;re using &lt;strong&gt;&lt;code&gt;old-passwords&lt;/code&gt;&lt;/strong&gt; variable (for some strange reason, this variable always appears in the MySQL sample configuration files - though you really don&#39;t want it unless it&#39;s for backward compatibility with older MySQL versions). As in the MD5 note, use &lt;strong&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/strong&gt; charset.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Better use &lt;strong&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt;&lt;/strong&gt; than &lt;strong&gt;&lt;code&gt;INT&lt;/code&gt;&lt;/strong&gt; to count seconds, as MySQL has many supportive functions for this data type.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;code&gt;TINYINT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;SMALLINT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;MEDIUMINT&lt;/code&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;code&gt;INT&lt;/code&gt;&lt;/strong&gt; when possible. Do you expect to have 4000000000 customers? No? Then a &#34;&lt;strong&gt;&lt;code&gt;id SMALLINT&lt;/code&gt;&lt;/strong&gt;&#34; may suffice as &lt;strong&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;code&gt;CHARACTER SET&lt;/code&gt;&lt;/strong&gt;s with care. More on this on future posts.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>