<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configuration on code.openark.org</title>
    <link>/blog/tags/configuration/</link>
    <description>Recent content in Configuration on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Fri, 07 Aug 2015 14:39:59 +0000</lastBuildDate>
    <atom:link href="/blog/tags/configuration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Baffling 5.7 global/status variables issues, unclean migration path</title>
      <link>/blog/mysql/baffling-5-7-globalstatus-variables-issues-unclean-migration-path/</link>
      <pubDate>Fri, 07 Aug 2015 14:39:59 +0000</pubDate>
      
      <guid>/blog/mysql/baffling-5-7-globalstatus-variables-issues-unclean-migration-path/</guid>
      <description>&lt;p&gt;MySQL &lt;strong&gt;5.7&lt;/strong&gt; introduces a change in the way we query for global variables and status variables: the &lt;strong&gt;INFORMATION_SCHEMA.(GLOBAL|SESSION)_(VARIABLES|STATUS)&lt;/strong&gt; tables are now deprecated and empty. Instead, we are to use the respective &lt;strong&gt;performance_schema.(global|session)_(variables|status)&lt;/strong&gt; tables.&lt;/p&gt;
&lt;p&gt;But the change goes farther than that; there is also a security change. Oracle created a pitfall of &lt;strong&gt;2&lt;/strong&gt; changes at the same time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variables/status moved to a different table&lt;/li&gt;
&lt;li&gt;Privileges required on said table&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an example, my non-root user gets:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; show session variables like &#39;tx_isolation&#39;;
ERROR 1142 (42000): SELECT command denied to user &#39;normal_user&#39;@&#39;my_host&#39; for table &#39;session_variables&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Who gets affected by this? Nearly &lt;em&gt;everyone and everything&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your Nagios will not be able to read status variables&lt;/li&gt;
&lt;li&gt;Your ORM will not be able to determine session variables&lt;/li&gt;
&lt;li&gt;Your replication user will fail connecting (see &lt;a href=&#34;http://datacharmer.blogspot.nl/2015/08/mysql-578-features-bugs-and-rumors.html&#34;&gt;this post by Giuseppe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;And most everyone else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with the above is that involves two unrelated changes to your setup, which are not entirely simple to coordinate:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change your app code to choose the correct schema (information_schema vs. performance_schema)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GRANT&lt;/strong&gt; the permissions on your database&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Perhaps at this point you still do not consider this to be a problem. You may be thinking: &lt;em&gt;well, let&#39;s first prepare by creating the GRANTs, and once that is in place, we can, at our leisure, modify the code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Not so fast. Can you really that simply create those GRANTs?&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;Migration woes&lt;/h3&gt;
&lt;p&gt;How do you migrate to a new MySQL version? You do not reinstall all your servers. You want an easy migration path, and that path is: introduce one or two slaves of a newer version, see that everything works to your satisfaction, slowly upgrade all your other slaves, eventually switchover/upgrade your master.&lt;/p&gt;
&lt;p&gt;This should not be any different for &lt;strong&gt;5.7&lt;/strong&gt;. We would like to provision a &lt;strong&gt;5.7&lt;/strong&gt; slave in our topologies and just see that everything works. Well, we have, and things don&#39;t just work. Our Nagios stops working for that &lt;strong&gt;5.7&lt;/strong&gt; slave. &lt;em&gt;Orchestrator&lt;/em&gt; started complaining (by this time I&#39;ve &lt;a href=&#34;https://github.com/outbrain/orchestrator/releases/tag/v1.4.291&#34;&gt;already fixed it&lt;/a&gt; to be more tolerant for the &lt;strong&gt;5.7&lt;/strong&gt; problems so no crashes here).&lt;/p&gt;
&lt;p&gt;I hope you see the problem by now.&lt;/p&gt;
&lt;blockquote&gt;You cannot issue a &lt;strong&gt;GRANT SELECT ON performance_schema.global_variables TO &#39;...&#39;&lt;/strong&gt; on your &lt;strong&gt;5.6&lt;/strong&gt; master.&lt;/blockquote&gt;
&lt;p&gt;The table simply does not exist there, which means the statement will not go to binary logs, which means it will not replicate on your &lt;strong&gt;5.7&lt;/strong&gt; slave, which means you will not be able to &lt;strong&gt;SHOW GLOBAL VARIABLES&lt;/strong&gt; on your slave, which means everything remains broken.&lt;/p&gt;
&lt;p&gt;Yes, you can issue this directly on your &lt;strong&gt;5.7&lt;/strong&gt; slaves. It&#39;s &lt;em&gt;doable&lt;/em&gt;, but &lt;em&gt;undesired&lt;/em&gt;. It&#39;s ugly in terms of automation (and will quite possibly break some assumptions and sanity checks your automation uses); in terms of validity testing. It&#39;s unfriendly to GTID (make sure to &lt;strong&gt;SET SQL_LOG_BIN=0&lt;/strong&gt; before that).&lt;/p&gt;
&lt;h3&gt;WHY in the first place?&lt;/h3&gt;
&lt;p&gt;It seems like a security thing. I&#39;m not sure whether this was intended. So you prevent a &lt;strong&gt;SHOW GLOBAL VARIABLES&lt;/strong&gt; for a normal user. Makes sense. And yet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; show global variables like &#39;hostname&#39;;
ERROR 1142 (42000): SELECT command denied to user &#39;normal_user&#39;@&#39;my_host&#39; for table &#39;global_variables&#39;

mysql&amp;gt; select @@global.hostname;
+---------------------+
| @@global.hostname   |
+---------------------+
| myhost.mydomain.com |
+---------------------+

mysql&amp;gt; select @@version;
+--------------+
| @@version    |
+--------------+
| 5.7.8-rc-log |
+--------------+

&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems like I&#39;m allowed access to that info after all. So it&#39;s not strictly a security design decision. For status variable, I admit, I don&#39;t have a similar workaround.&lt;/p&gt;
&lt;h3&gt;Solutions?&lt;/h3&gt;
&lt;p&gt;The following are meant to be solutions, but do not really solve the problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SHOW&lt;/strong&gt; commands. &lt;strong&gt;SHOW GLOBAL|SESSION VARIABLES|STATUS&lt;/strong&gt; will work properly, and will implicitly know whether to provide the results via &lt;strong&gt;information_schema&lt;/strong&gt; or &lt;strong&gt;performance_schema&lt;/strong&gt; tables.
&lt;ul&gt;
&lt;li&gt;But, aren&#39;t we meant to be happier with &lt;strong&gt;SELECT&lt;/strong&gt; queries? So that I can really do stuff that is smarter than &lt;strong&gt;LIKE &#39;variable_name%&#39;&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;And of course you cannot use &lt;strong&gt;SHOW&lt;/strong&gt; in server side cursors. Your stored routines are in a mess now.&lt;/li&gt;
&lt;li&gt;This does not solve the GRANTs problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_show_compatibility_56&#34;&gt;show_compatibility_56&lt;/a&gt;&lt;/strong&gt;: an introduced variable in &lt;strong&gt;5.7&lt;/strong&gt;, boolean. It truly is a time-travel-paradox novel in disguise, in multiple respects.
&lt;ul&gt;
&lt;li&gt;Documentation introduces it, and says it is deprecated.
&lt;ul&gt;
&lt;li&gt;time-travel-paradox :O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;But it actually works in &lt;strong&gt;5.7.8&lt;/strong&gt; (latest)
&lt;ul&gt;
&lt;li&gt;time-travel-paradox plot thickens&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your automation scripts do not know in advance whether your MySQL has this variable
&lt;ul&gt;
&lt;li&gt;Hence &lt;strong&gt;SELECT @@global.show_compatibility_56&lt;/strong&gt; will produce an error on &lt;strong&gt;5.6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;But the &#34;safe&#34; way of &lt;strong&gt;SHOW GLOBAL VARIABLES LIKE &#39;show_compatibility_56&#39;&lt;/strong&gt; will fail on a privilege error on &lt;strong&gt;5.7&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;time-travel-paradox :O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actually advised by my colleague Simon J. Mudd, &lt;strong&gt;show_compatibility_56&lt;/strong&gt; defaults to &lt;strong&gt;OFF&lt;/strong&gt;. I &lt;em&gt;support&lt;/em&gt; this line of thought. Or else it&#39;s &lt;strong&gt;old_passwords=1&lt;/strong&gt; all over again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;show_compatibility_56&lt;/strong&gt; doesn&#39;t solve the GRANTs problem.&lt;/li&gt;
&lt;li&gt;This does not solve any migration path. It just postpones the moment when I will hit the same problem. When I flip the variable from &lt;strong&gt;&#34;1&#34;&lt;/strong&gt; to &lt;strong&gt;&#34;0&#34;&lt;/strong&gt;, I&#39;m back at square one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Suggestion&lt;/h3&gt;
&lt;p&gt;I claim security is not the issue, as presented above. I claim Oracle will yet again fall into the trap of no-easy-way-to-migrate-to-GTID in &lt;strong&gt;5.6&lt;/strong&gt; if the current solution is unchanged. I claim that there have been too many changes at once. Therefore, I suggest one of the alternative two flows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flow 1&lt;/strong&gt;: keep &lt;strong&gt;information_schema&lt;/strong&gt;, later migration into &lt;strong&gt;performance_schema&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;5.7&lt;/strong&gt;, &lt;strong&gt;information_schema&lt;/strong&gt; tables should still produce the data.&lt;/li&gt;
&lt;li&gt;No security constraints on &lt;strong&gt;information_schema&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Generate WARNINGs on reading from &lt;strong&gt;information_schema&lt;/strong&gt; (&#34;...this will be deprecated...&#34;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;performance_schema &lt;/strong&gt;&lt;em&gt;also available&lt;/em&gt;. With security constraints, whatever.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;5.8&lt;/strong&gt; remove &lt;strong&gt;information_schema&lt;/strong&gt; tables; we are left with &lt;strong&gt;performance_schema&lt;/strong&gt; only.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flow 2&lt;/strong&gt;: easy migration into &lt;strong&gt;performance_schema&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;5.7&lt;/strong&gt;, &lt;strong&gt;performance_schema&lt;/strong&gt; tables should not require any special privileges. Any user can read from them.&lt;/li&gt;
&lt;li&gt;Keep &lt;strong&gt;show_compatibility_56 &lt;/strong&gt;as it is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SHOW&lt;/strong&gt; commands choose between &lt;strong&gt;information_schema&lt;/strong&gt; or &lt;strong&gt;performance_schema&lt;/strong&gt; on their own -- just as things are done now.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;5.8&lt;/strong&gt;, &lt;strong&gt;performance_schema&lt;/strong&gt; tables will require &lt;strong&gt;SELECT&lt;/strong&gt; privileges.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As always, I love the work done by the engineers; and I love how they listen to the community.&lt;/p&gt;
&lt;p&gt;Comments are most welcome. Have I missed the simple solution here? Are there even more complications to these features? Thoughts on my suggested two flows?&lt;/p&gt;
&lt;h3&gt;[UPDATE 2015-08-19]&lt;/h3&gt;
&lt;p&gt;Please &lt;a href=&#34;http://www.tocker.ca/2015/08/18/a-followup-on-show_compatibility_56.html&#34;&gt;see this followup&lt;/a&gt; by Morgan Tocker of Oracle.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TokuDB configuration variables of interest</title>
      <link>/blog/mysql/tokudb-configuration-variables-of-interest/</link>
      <pubDate>Wed, 23 Oct 2013 19:42:12 +0000</pubDate>
      
      <guid>/blog/mysql/tokudb-configuration-variables-of-interest/</guid>
      <description>&lt;p&gt;During our experiments I came upon a few TokuDB variables of interest; if you are using TokuDB you might want to look into these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;tokudb_analyze_time&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;This is a boundary on the number of seconds an &lt;strong&gt;ANALYZE TABLE&lt;/strong&gt; will operate on each index on each partition on a TokuDB table.&lt;/p&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;That is, if &lt;strong&gt;tokudb_analyze_time = 5&lt;/strong&gt;, and your table has &lt;strong&gt;4&lt;/strong&gt; indexes (including &lt;strong&gt;PRIMARY&lt;/strong&gt;) and &lt;strong&gt;7&lt;/strong&gt; partitions, then the total runtime is limited to &lt;strong&gt;5*4*7 = 140&lt;/strong&gt; seconds.&lt;/p&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Default in &lt;strong&gt;7.1.0&lt;/strong&gt;: &lt;strong&gt;5&lt;/strong&gt; seconds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;tokudb_cache_size&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Similar to &lt;strong&gt;innodb_buffer_pool_size&lt;/strong&gt;, this variable sets the amount of memory allocated by TokuDB for caching pages. Like InnoDB the table is clustered within the index, so the cache includes pages for both indexes and data.&lt;/p&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Default: &lt;strong&gt;50%&lt;/strong&gt; of total memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;tokudb_directio&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Boolean, values are &lt;strong&gt;0/1&lt;/strong&gt;. Setting &lt;strong&gt;tokudb_directio = 1&lt;/strong&gt; is like specifying &lt;strong&gt;innodb_flush_method = O_DIRECT&lt;/strong&gt;. Which in turn means the OS should not cache pages requested by TokuDB. Default: &lt;strong&gt;0&lt;/strong&gt;.&lt;/p&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Now here&#39;s the interesting part: we are used to tell InnoDB to get the most memory we can provide (because we want it to cache as much as it can) and to avoid OS caching (because that would mean a page would appear both in the buffer pool and in OS memory, which is a waste). So the following setup is common:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote style=&#34;padding-left: 30px;&#34;&gt;
&lt;pre style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;innodb_buffer_pool_size&lt;/strong&gt; = [as much as you can allocate while leaving room for connection memory]G
&lt;strong&gt;innodb_flush_method&lt;/strong&gt; = O_DIRECT&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;And my first instinct was to do the same for TokuDB. But after speaking to Gerry Narvaja of Tokutek, I realized it was not that simple. The reason TokuDB&#39;s default memory allocation is &lt;strong&gt;50%&lt;/strong&gt; and not, say, &lt;strong&gt;90%&lt;/strong&gt;, is that OS cache caches the data in compressed form, while TokuDB cache caches data in uncompressed form. Which means if you limit the TokuDB cache, you allow for more cache to the OS, that is used to cache compressed data, which means &lt;em&gt;more data&lt;/em&gt; (hopefully, pending duplicates) in memory.&lt;/p&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;I did try both options and did not see an obvious difference, but did not test this thoroughly. My current setup is:&lt;/p&gt;
&lt;blockquote style=&#34;padding-left: 30px;&#34;&gt;
&lt;pre style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;#No setup. just keep to the default for both:&lt;/strong&gt;
#tokudb_cache_size
#tokudb_directio&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;tokudb_commit_sync&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;tokudb_fsync_log_period&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;These two variable are similar in essence to &lt;strong&gt;innodb_flush_log_at_trx_commit&lt;/strong&gt;, but allow for finer tuning. With &lt;strong&gt;innodb_flush_log_at_trx_commit&lt;/strong&gt; you choose between syncing the transaction log to disk upon each commit and once per second. With &lt;strong&gt;tokudb_commit_sync = 1&lt;/strong&gt; (which is default) you get transaction log sync to disk per commit. When &lt;strong&gt;tokudb_commit_sync = 0&lt;/strong&gt;, then &lt;strong&gt;tokudb_fsync_log_period&lt;/strong&gt; dictates the interval between flushes. So a value of &lt;strong&gt;tokudb_fsync_log_period = 1000&lt;/strong&gt; means once per second.&lt;/p&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Since our original InnoDB installation used &lt;strong&gt;innodb_flush_log_at_trx_commit = 2&lt;/strong&gt;, our TokuDB setup is:&lt;/p&gt;
&lt;blockquote style=&#34;padding-left: 30px;&#34;&gt;
&lt;pre style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;tokudb_commit_sync&lt;/strong&gt; = 0
&lt;strong&gt;tokudb_fsync_log_period&lt;/strong&gt; = 1000&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;tokudb_load_save_space&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;Turned on (value &lt;strong&gt;1&lt;/strong&gt;) by default as of TokuDB &lt;strong&gt;7.1.0&lt;/strong&gt;, this parameter decides whether temporary file created on bulk load operations (e.g. ALTER TABLE) are compressed or uncompressed. Do yourself a big favour (why? &lt;a href=&#34;http://code.openark.org/blog/mysql/converting-an-olap-database-to-tokudb-part-2-the-process-of-migration&#34;&gt;read here&lt;/a&gt;) and keep it on. Our setup is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;tokudb_load_save_space&lt;/strong&gt; = 1&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;TokuDB&#39;s general recommendation is: don&#39;t change the variables; the engine should work well right out of the box. I like the approach (by MySQL &lt;strong&gt;5.5&lt;/strong&gt; I already lost count of InnoDB variables that can have noticeable impact; with &lt;strong&gt;5.6&lt;/strong&gt; I&#39;m all but lost). The complete list of configuration variables is found in &lt;a href=&#34;http://www.tokutek.com/wp-content/uploads/2013/10/mysql-5.5.30-tokudb-7.1.0-users-guide.pdf&#34;&gt;TokuDB&#39;s Users Guide&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On MySQL plugin configuration</title>
      <link>/blog/mysql/on-mysql-plugin-configuration/</link>
      <pubDate>Tue, 01 Oct 2013 08:50:08 +0000</pubDate>
      
      <guid>/blog/mysql/on-mysql-plugin-configuration/</guid>
      <description>&lt;p&gt;MySQL offers &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/plugin-api.html&#34;&gt;plugin API&lt;/a&gt;, with which you can add &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/plugin-types.html&#34;&gt;different types&lt;/a&gt; of plugins to the server. The API is roughly the same for all plugin types: you implement an init() function, a deinit(); you declare status variables and global variables associated with your plugin, and of course you implement the particular implementation of plugin call.&lt;/p&gt;
&lt;p&gt;I wish to discuss the creation and use of global variables for plugins.&lt;/p&gt;
&lt;p&gt;Consider the following declaration of a global variable in &lt;a href=&#34;https://github.com/outbrain/audit_login&#34;&gt;audit_login&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;static MYSQL_SYSVAR_BOOL(enabled, plugin_enabled, PLUGIN_VAR_NOCMDARG,
&#34;enable/disable the plugin&#39;s operation, namely writing to file&#34;, NULL, NULL, 1);

static struct st_mysql_sys_var * audit_login_sysvars[] = {
    MYSQL_SYSVAR(enabled),
    NULL
};&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above creates a new global variables called &lt;strong&gt;&#34;simple_login_audit_enabled&#34;&lt;/strong&gt;: it is composed of the plugin name (known to be &lt;strong&gt;&#34;simple_login_audit&#34;&lt;/strong&gt; in our example) and declared name (&lt;strong&gt;&#34;enabled&#34;&lt;/strong&gt;). It is a boolean, defaults to &lt;strong&gt;1&lt;/strong&gt;, and is associated with the internal &lt;strong&gt;plugin_enabled&lt;/strong&gt; variable.&lt;/p&gt;
&lt;p&gt;Once this variable is declared, you can expect to be able to:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; show global variables like &#39;%audit%&#39;;
+----------------------------+-------+
| Variable_name              | Value |
+----------------------------+-------+
| simple_login_audit_enabled | ON    |
+----------------------------+-------+

mysql&amp;gt; set global simple_login_audit_enabled := 0;
Query OK, 0 rows affected (0.00 sec)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and you can expect using the following in your &lt;strong&gt;my.cnf&lt;/strong&gt; file:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;[mysqld]
...
simple_login_audit_enabled=1&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Assuming your server agrees to start&lt;/h4&gt;
&lt;p&gt;Here&#39;s the catch: the &lt;strong&gt;simple_login_audit_enabled&lt;/strong&gt; variable is &lt;em&gt;only recognized as long as the plugin is installed&lt;/em&gt;. As you may know, plugins can be loaded upon startup time using an explicit &lt;strong&gt;my.cnf&lt;/strong&gt; entry such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;plugin_load=audit_login.so&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But you may also, at any given time, &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/install-plugin.html&#34;&gt;INSTALL&lt;/a&gt; or &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/uninstall-plugin.html&#34;&gt;UNINSTALL&lt;/a&gt; the plugin dynamically.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;install plugin SIMPLE_LOGIN_AUDIT soname &#39;audit_login.so&#39;;
uninstall plugin SIMPLE_LOGIN_AUDIT;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact there are good reasons to do so: you may be upgrading your plugin. You can&#39;t just throw in the new binary (it&#39;s a guaranteed crash on next server shutdown). You need to first &lt;strong&gt;UNINSTALL&lt;/strong&gt; it; you then put the new binary, and re-&lt;strong&gt;INSTALL&lt;/strong&gt;. This works well, and the price is some downtime for your plugin.&lt;/p&gt;
&lt;p&gt;But what happens if you restart the server while your plugin is uninstalled? Yep: the global variable is unrecognised, and your MySQL server refuses to start:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;130919  8:11:30 [ERROR] /usr/bin/mysqld: &lt;strong&gt;unknown variable &#39;simple_login_audit_enabled=1&#39;&lt;/strong&gt;
130919  8:11:30 [ERROR] &lt;strong&gt;Aborting&lt;/strong&gt;
130919  8:11:30  InnoDB: Starting shutdown...
130919  8:11:31  InnoDB: Shutdown completed; log sequence number 40185651
130919  8:11:31 [Note] /usr/bin/mysqld: Shutdown complete&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did happen on this case a couple times; it is frustrating.&lt;/p&gt;
&lt;h4&gt;What are the alternatives?&lt;/h4&gt;
&lt;p&gt;So adding variables to my.cnf may prevent MySQL from starting. In my dictionary, this spells &lt;strong&gt;&#34;NO GO&#34;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;audit_login&lt;/strong&gt; I chose to (additionally) support an external config file, &lt;strong&gt;audit_login.cnf&lt;/strong&gt;, expected to be found in the &lt;strong&gt;@@datadir&lt;/strong&gt;. It is similar in essence to the &lt;strong&gt;master.info&lt;/strong&gt; file which is expected by replication. The plugin reads this file (if existing) upon init(), which makes it execute upon server startup or upon &lt;strong&gt;INSTALL PLUGIN&lt;/strong&gt;. I can&#39;t argue that this is the best solution, but it is a solution that does not interfere with anyone. The file is ignored by all and does not disturb the public peace. The plugin does not require it to exist.&lt;/p&gt;
&lt;p&gt;I was hoping to be able to directly read from &lt;strong&gt;my.cnf&lt;/strong&gt;, but am unsure if there is a definitive way to do so from within the plugin. I did not go deep into this.&lt;/p&gt;
&lt;h4&gt;What would be best?&lt;/h4&gt;
&lt;p&gt;Hopefully I&#39;m not missing on anything. But it would be nice to have plugin-dedicated variables in my.cnf which are ignored by the server. These could take the form of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;[mysql_plugin]
simple_login_audit_enabled=0&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or similar. It would be the server&#39;s responsibility to pass these declarations to the plugins, but ignore them itself (or just pass warning).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoughts on MySQL 5.6 new replication features</title>
      <link>/blog/mysql/thoughts-on-mysql-5-6-new-replication-features/</link>
      <pubDate>Mon, 15 Oct 2012 09:50:39 +0000</pubDate>
      
      <guid>/blog/mysql/thoughts-on-mysql-5-6-new-replication-features/</guid>
      <description>&lt;p&gt;After playing a little bit with MySQL &lt;strong&gt;5.6&lt;/strong&gt; (RC), and following closely on Giuseppe&#39;s &lt;a href=&#34;http://datacharmer.blogspot.co.il/2012/08/mysql-56-replication-gotchas-and-bugs.html&#34;&gt;MySQL 5.6 replication gotchas (and bugs)&lt;/a&gt;, I was having some thoughts.&lt;/p&gt;
&lt;p&gt;These are shared for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maybe I didn&#39;t understand it well, and someone could correct me&lt;/li&gt;
&lt;li&gt;Or I understood it well, and my input could be of service to the developers&lt;/li&gt;
&lt;li&gt;Or it could be of service to the users&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;InnoDB tables in mysql schema&lt;/h4&gt;
&lt;p&gt;The introduction of InnoDB tables in &lt;strong&gt;mysql&lt;/strong&gt; makes for crash-safe replication information: the exact replication position (master log file+pos, relay log file+pos etc.) is updated on InnoDB tables; with &lt;strong&gt;innodb_flush_logs_at_trx_commit=1&lt;/strong&gt; this means replication status is durable and consistent with server data. This is great news!&lt;/p&gt;
&lt;p&gt;However, the introduction of InnoDB tables to the mysql schema also breaks some common usage on installation and setup of MySQL servers. You can&#39;t just drop your &lt;strong&gt;ib_data1&lt;/strong&gt; file upon dump+restore, since it also contains internal data. Giuseppe outlines the workaround for that.&lt;/p&gt;
&lt;p&gt;I was thinking: would it be possible to have a completely different tablespace for MySQL&#39;s internal InnoDB tables? That could be a single tablespace file (who cares about file-per-table on a few internal tables). And I&#39;m throwing an idea without being intimate with the internals: you know how it is possible to span the shared tablespace across multiple files, as in:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;[mysqld]
innodb_data_file_path=ibdata1:50M;ibdata2:50M:autoextend&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Would it be possible to, for example, force the first file in this setup to be the internal database? It would look like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;[mysqld]
innodb_data_file_path=&lt;strong&gt;ibdata_internal_do_not_touch&lt;/strong&gt;:2M;&lt;strong&gt;ibdata1_this_one_is_yours&lt;/strong&gt;:50M:autoextend&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Only the user would not have to actually set this thing up: the internal tablespace would be there by default (and always first).&lt;/p&gt;
&lt;p&gt;Then we would be able to drop our own table space as much as we would like to, but never touch the internal tablespace. It would always extend into our own &lt;strong&gt;ibdata1&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;I&#39;m wondering if I&#39;m making sense at all and if this is possible.&lt;/p&gt;
&lt;h4&gt;GTID and settings&lt;/h4&gt;
&lt;p&gt;The fact that you have to specify both &lt;strong&gt;gtid_mode=ON&lt;/strong&gt; as well as &lt;strong&gt;disable-gtid-unsafe-statements&lt;/strong&gt; is a bit of a bummer. I wouldn&#39;t mind as much if error messages would be informative. But as it turned out, when I wanted to test GTID I did the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; STOP SLAVE;
mysql&amp;gt; change master to MASTER_AUTO_POSITION=1;
ERROR 1777 (HY000): CHANGE MASTER TO MASTER_AUTO_POSITION = 1 can only be executed when GTID_MODE = ON.

-- OK, setting &lt;strong&gt;gtid_mode=ON&lt;/strong&gt; in config file, restarting server.
--
-- &lt;strong&gt;Oooops&lt;/strong&gt;, server won&#39;t restart!
-- Getting this error message in log: &lt;strong&gt;&#34;--gtid-mode=UPGRADE_STEP_1 or --gtid-mode=UPGRADE_STEP_2 are not yet supported&#34;&lt;/strong&gt;
-- What?&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Checking up on Giuseppe&#39;s post I realized I didn&#39;t set the &lt;strong&gt;disable-gtid-unsafe-statements&lt;/strong&gt; param. But this was not mentioned on the above &lt;strong&gt;ERROR 1777&lt;/strong&gt;, and the log error was quite cryptic.&lt;/p&gt;
&lt;p&gt;TODO: just mention this &lt;em&gt;other&lt;/em&gt; variable.&lt;/p&gt;
&lt;h4&gt;GTID, internal InnoDB tables &amp;amp; wreckage&lt;/h4&gt;
&lt;p&gt;OK, I managed to completely crash my replication setup. I setup GTID, and then:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;set global master_info_repository:=&#39;table&#39;;
set global relay_log_info_repository=&#39;table&#39;;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then shut down mysql; I wanted to see how reverting back to &lt;strong&gt;gtid_mode=OFF&lt;/strong&gt; works. Oh, I didn&#39;t set the two params in the config file, so their effect was lost.&lt;/p&gt;
&lt;p&gt;Starting mysql, I get:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;ERROR 1794 (HY000) at line 1: Slave is not configured or failed to initialize properly. You must at least set --server-id to enable either a master or a slave. Additional error messages can be found in the MySQL error log.&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The error log says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;121015  9:38:58 [ERROR] Error creating master info: Multiple replication metadata repository instances found with data in them. Unable to decide which is the correct one to choose.
121015  9:38:58 [ERROR] Failed to create or recover replication info repository.
121015  9:38:58 [Note] Check error log for additional messages. You will not be able to start replication until the issue is resolved and the server restarted.&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&#39;s interesting is that the data is still in the tables:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; select * from mysql.slave_master_info\G
*************************** 1. row ***************************
       Number_of_lines: 23
       Master_log_name: mysql-bin.000003
        Master_log_pos: 2623
                  Host: 127.0.0.1
             User_name: rsandbox
         User_password: rsandbox
                  Port: 14701
         Connect_retry: 60
           Enabled_ssl: 0
                Ssl_ca: 
            Ssl_capath: 
              Ssl_cert: 
            Ssl_cipher: 
               Ssl_key: 
Ssl_verify_server_cert: 0
             Heartbeat: 1800
                  Bind: 
    Ignored_server_ids: 0
                  Uuid: 10fa73da-13ac-11e2-bdcd-0024e8cd3122
           Retry_count: 86400
               Ssl_crl: 
           Ssl_crlpath: 
 Enabled_auto_position: 1&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve tried restarting, setting variables in the config file, changing them dynamically. To no avail.&lt;/p&gt;
&lt;p&gt;No, I haven&#39;t filed a bug report yet.&lt;/p&gt;
&lt;p&gt;These are still my first steps into 5.6 replication and my very first impressions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Useful sed / awk liners for MySQL</title>
      <link>/blog/mysql/useful-sed-awk-liners-for-mysql/</link>
      <pubDate>Wed, 06 Jul 2011 08:41:00 +0000</pubDate>
      
      <guid>/blog/mysql/useful-sed-awk-liners-for-mysql/</guid>
      <description>&lt;p&gt;Listing some useful &lt;strong&gt;sed&lt;/strong&gt; / &lt;strong&gt;awk&lt;/strong&gt; liners to use with MySQL. I use these on occasion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sed&lt;/strong&gt;, &lt;strong&gt;awk&lt;/strong&gt; &amp;amp; &lt;strong&gt;grep&lt;/strong&gt; have many overlapping features. Some simple tasks can be performed by either. For example, stripping empty lines can be performed by either:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;grep&lt;/strong&gt; &#39;.&#39;
&lt;strong&gt;awk&lt;/strong&gt; &#39;/./&#39;
&lt;strong&gt;sed&lt;/strong&gt; &#39;/./!d&#39;
&lt;strong&gt;grep&lt;/strong&gt; -v &#39;^$&#39;
&lt;strong&gt;awk&lt;/strong&gt; &#39;!/^$/&#39;
&lt;strong&gt;sed&lt;/strong&gt; &#39;/^$/d&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s a matter of taste &amp;amp; convention which tool and variation to use. So for any script I suggest, there may be many variations, possibly cleaner, shorter; feel free to comment.&lt;/p&gt;
&lt;h4&gt;mysqldump&lt;/h4&gt;
&lt;p&gt;The output of &lt;em&gt;mysqldump&lt;/em&gt; is in particular useful when one wishes to make transformation on data or metadata.&lt;span id=&#34;more-3685&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert MyISAM tables to InnoDB:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysqldump | sed -e &#39;s/^) ENGINE=MyISAM/) ENGINE=InnoDB/&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve had several occasion when people said this type of conversion assumes no &lt;strong&gt;&#39;ENGINE=MyISAM&#39;&lt;/strong&gt; snippet exists within row data. This is not so. The &lt;strong&gt;&#39;^) ENGINE=MyISAM/&#39;&lt;/strong&gt; pattern strictly requires that this text is outside row data. No row data begins with a &lt;strong&gt;&#39;)&#39;&lt;/strong&gt;. This is a safe conversion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert InnoDB to InnoDB plugin, compressed tables:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysqldump | sed -e &#39;s/^) ENGINE=InnoDB/) ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8/&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slice out a specific database (assumes existence of the &lt;strong&gt;USE&lt;/strong&gt; statement):&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;sed -n &#34;/^USE \`employees\`/,/^USE \`/p&#34;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slice out a specific table:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;sed -n &#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Combine the above two statements to slice a specific table from a specific database:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;sed -n &#34;/^USE \`employees\`/,/^USE \`/p&#34; | sed -n &#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;See also &lt;a rel=&#34;bookmark&#34; href=&#34;http://code.openark.org/blog/mysql/on-restoring-a-single-table-from-mysqldump&#34;&gt;On restoring a single table from mysqldump&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;my.cnf&lt;/h4&gt;
&lt;p&gt;Some &lt;em&gt;my.cnf&lt;/em&gt; files are just a mess to read. Here&#39;s some normalizing scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strip a &lt;em&gt;my.cnf&lt;/em&gt; file from comments, remove blank lines, normalize spaces:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | sed &#39;/^#/d&#39; | sed &#39;/^$/d&#39; | sed -e &#39;s/[ \t]\+//g&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Same, but only present &lt;strong&gt;[mysqld]&lt;/strong&gt; section parameters:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | sed -n &#39;/^\[mysqld\]/,/^\[/p&#39; | sed &#39;/^\[/d&#39; | sed &#39;/^#/d&#39; | sed &#39;/^$/d&#39; | sed -e &#39;s/[ \t]\+//g&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Only present &lt;strong&gt;[mysqld]&lt;/strong&gt; section parameters, tab delimited (this is useful in exporting and comparing instance parameters):&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | sed -n &#39;/^\[mysqld\]/,/^\[/p&#39; | sed &#39;/^\[/d&#39; | sed &#39;/^#/d&#39; | sed &#39;/^$/d&#39; | sed -e &#39;s/[ \t]\+//g&#39; | sed -e &#39;s/=/\t/&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Multi-word parameters in &lt;em&gt;my.cnf&lt;/em&gt; can be written with either hyphens or underscores. &lt;strong&gt;innodb_file_per_&lt;/strong&gt;table is the same as &lt;strong&gt;innodb-file-per-table&lt;/strong&gt;, as well as &lt;strong&gt;innodb_file-per_table&lt;/strong&gt;. The following normalizes the parameter names to using underscores only, keeping from changing values (e.g. &lt;strong&gt;&#39;mysql-bin&#39; &lt;/strong&gt;parameter value should not change). It isn&#39;t pretty!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | awk -F &#34;=&#34; &#39;NF &amp;lt; 2 {print} sub(&#34;=&#34;, &#34;=~placeholder~=&#34;) {print}&#39; | awk -F &#34;=~placeholder~=&#34; &#39;NF &amp;lt; 2 {gsub(&#34;-&#34;, &#34;_&#34;, $0); print} NF==2 {gsub(&#34;-&#34;, &#34;_&#34;, $1); print $1 &#34;=&#34; $2}&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;_mcePaste&#34; class=&#34;mcePaste&#34; style=&#34;position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;&#34;&gt;grep &#34;.&#34;&lt;br&gt;
awk &#39;/./&#39;&lt;br&gt;
sed &#39;/./!d&#39;&lt;br&gt;
grep -v &#39;^$&#39;&lt;br&gt;
awk &#39;!/^$/&#39;&lt;br&gt;
sed &#39;/^$/d&#39;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Recovering a MySQL `root` password: the fourth solution</title>
      <link>/blog/mysql/recovering-a-mysql-root-password-the-fourth-solution/</link>
      <pubDate>Tue, 22 Mar 2011 09:47:46 +0000</pubDate>
      
      <guid>/blog/mysql/recovering-a-mysql-root-password-the-fourth-solution/</guid>
      <description>&lt;p&gt;Have just read Darren Cassar&#39;s &lt;a title=&#34;Permanent Link to Recovering a MySQL `root` password – Three solutions&#34; rel=&#34;bookmark&#34; href=&#34;http://mysqlpreacher.com/wordpress/2011/03/recovering-a-mysql-root-password-three-solutions/&#34;&gt;Recovering a MySQL `root` password – Three solutions&lt;/a&gt;. There&#39;s a fourth solution: using an &lt;strong&gt;init-file&lt;/strong&gt;, which leads to just one restart of the database instead of two. It also avoids the security issue involved with using &lt;strong&gt;skip-grant-tables&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ve written all about it before on &lt;a title=&#34;Permanent Link to Dangers of skip-grant-tables&#34; rel=&#34;bookmark&#34; href=&#34;http://code.openark.org/blog/mysql/dangers-of-skip-grant-tables&#34;&gt;Dangers of skip-grant-tables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Darren&#39;s 1st advice (look for password ini files, scripts, etc.) is a very good one. One password that can always be looked up in files is the replication&#39;s password.&lt;/p&gt;
&lt;p&gt;Replication&#39;s password is easily forgotten: you only set it once and never use it again; never script it nor manually login with. When setting up new slaves, though, you suddenly need it.&lt;/p&gt;
&lt;p&gt;Apparently not many realize that the replication password is written in plaintext in the &lt;strong&gt;master.info&lt;/strong&gt; file. This file tells the slave all about it&#39;s master connection: host, port, user &amp;amp; password are all there for you to read.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Upgrading passwords from old_passwords to &#34;new passwords&#34;</title>
      <link>/blog/mysql/upgrading-passwords-from-old_passwords-to-new-passwords/</link>
      <pubDate>Mon, 28 Feb 2011 15:50:52 +0000</pubDate>
      
      <guid>/blog/mysql/upgrading-passwords-from-old_passwords-to-new-passwords/</guid>
      <description>&lt;p&gt;You have &lt;strong&gt;old_passwords=1&lt;/strong&gt; in your &lt;strong&gt;my.cnf&lt;/strong&gt;. I&#39;m guessing this is because you used one of the &lt;strong&gt;my-small.cnf&lt;/strong&gt;, &lt;strong&gt;my-large.cnf&lt;/strong&gt; etc. templates provided with your MySQL distribution.&lt;/p&gt;
&lt;p&gt;These files can easily win the &#34;most outdated sample configuration file contest&#34;.&lt;/p&gt;
&lt;p&gt;Usually it&#39;s no big deal: if some parameter isn&#39;t right, you just go and change it. Some variables, though, have a long-lasting effect, and are not easily reversed.&lt;/p&gt;
&lt;h4&gt;What&#39;s the deal with old_passwords?&lt;/h4&gt;
&lt;p&gt;No one should be using these anymore. This variable makes the password hashing algorithm compatible with that of MySQL &lt;strong&gt;4.0&lt;/strong&gt;. I&#39;m pretty sure &lt;strong&gt;4.0&lt;/strong&gt; was released &lt;strong&gt;9&lt;/strong&gt; years ago. I don&#39;t know of anyone still using it (or &lt;strong&gt;4.0&lt;/strong&gt; client libraries).&lt;/p&gt;
&lt;p&gt;The deal is this: with old_passwords you get a &lt;strong&gt;16&lt;/strong&gt; hexadecimal digits (&lt;strong&gt;64&lt;/strong&gt; bit) hashing of your passwords. With so called &lt;em&gt;&#34;new passwords&#34;&lt;/em&gt; you get &lt;strong&gt;40&lt;/strong&gt; hexadecimal digits (plus extra &#34;&lt;strong&gt;*&lt;/strong&gt;&#34;). So this is about better encryption of your password. Read more on the &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/password-hashing.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;How do I upgrade to new password format?&lt;/h4&gt;
&lt;p&gt;You can&#39;t just put a comment on the &#34;&lt;strong&gt;old_passwords=1&lt;/strong&gt;&#34; entry in the configuration file. If you do so, the next client to connect will attempt to match a &lt;strong&gt;41&lt;/strong&gt; characters hashed password to your existing &lt;strong&gt;16&lt;/strong&gt; characters entry in the &lt;strong&gt;mysql.users&lt;/strong&gt; table. So you need to make a simultaneous change: both remove the &lt;strong&gt;old_passwords&lt;/strong&gt; entry and set a new password. You must know all accounts&#39; passwords before you begin.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;Interestingly, &lt;strong&gt;old_passwords&lt;/strong&gt; is both a global and a session variable. To work out an example, let&#39;s assume the account &lt;strong&gt;&#39;webuser&#39;@&#39;localhost&#39;&lt;/strong&gt; enters with &#39;123456&#39;. Take a look at the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mysql-5.1.51&amp;gt; SET SESSION old_passwords=0;
Query OK, 0 rows affected (0.00 sec)

root@mysql-5.1.51&amp;gt; SELECT PASSWORD(&#39;123456&#39;);
+-------------------------------------------+
| PASSWORD(&#39;123456&#39;)                        |
+-------------------------------------------+
| *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |
+-------------------------------------------+
1 row in set (0.00 sec)

root@mysql-5.1.51&amp;gt; SET SESSION old_passwords=1;
Query OK, 0 rows affected (0.00 sec)

root@mysql-5.1.51&amp;gt; SELECT PASSWORD(&#39;123456&#39;);
+--------------------+
| PASSWORD(&#39;123456&#39;) |
+--------------------+
| 565491d704013245   |
+--------------------+
1 row in set (0.00 sec&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the &lt;strong&gt;PASSWORD()&lt;/strong&gt; function consults the &lt;strong&gt;old_passwords&lt;/strong&gt; session variable.&lt;/p&gt;
&lt;p&gt;To upgrade &lt;strong&gt;&#39;webuser&#39;@&#39;localhost&#39;&lt;/strong&gt;&#39;s password we do:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mysql-5.1.51&amp;gt; SET SESSION old_passwords=0;
Query OK, 0 rows affected (0.00 sec)

root@mysql-5.1.51&amp;gt; SET PASSWORD FOR &#39;webuser&#39;@&#39;localhost&#39; = PASSWORD(&#39;123456&#39;)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go ahead and see the &lt;strong&gt;password&lt;/strong&gt; entry on the &lt;strong&gt;mysql.users&lt;/strong&gt; table.&lt;/p&gt;
&lt;p&gt;What we&#39;ve just done is to set a &lt;strong&gt;41&lt;/strong&gt; characters password hash for that account. Now, the next time the client wishes to connect, it must know in advance it is to expect a new password, otherwise it will encode a &lt;strong&gt;16&lt;/strong&gt; characters hash, and try to match it with our new &lt;strong&gt;41&lt;/strong&gt; characters hash. It is now time to perform:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;root@mysql-5.1.51&amp;gt; SET GLOBAL old_passwords=0;
Query OK, 0 rows affected (0.00 sec&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will apply to all new connections made from that moment on (not affecting any existing connections). So, make sure you have updated passwords for all accounts.&lt;/p&gt;
&lt;p&gt;To wrap it up, don&#39;t forget to set &lt;strong&gt;old_passwords=0&lt;/strong&gt; in the &lt;strong&gt;my.cnf&lt;/strong&gt; file, or, better yet, completely remove the entry.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Upgrading to Barracuda &amp; getting rid of huge ibdata1 file</title>
      <link>/blog/mysql/upgrading-to-barracuda-getting-rid-of-huge-ibdata1-file/</link>
      <pubDate>Tue, 15 Feb 2011 10:01:15 +0000</pubDate>
      
      <guid>/blog/mysql/upgrading-to-barracuda-getting-rid-of-huge-ibdata1-file/</guid>
      <description>&lt;p&gt;Some of this is old stuff, but more people are now converting to InnoDB plugin, so as to enjoy table compression, performance boosts. Same holds for people converting to Percona&#39;s XtraDB. InnoDB plugin requires &lt;strong&gt;innodb_file_per_table&lt;/strong&gt;. No more shared tablespace file.&lt;/p&gt;
&lt;p&gt;So your &lt;strong&gt;ibdata1&lt;/strong&gt; file is some &lt;strong&gt;150GB&lt;/strong&gt;, and it won&#39;t reduce. Really, it won&#39;t reduce. You set &lt;strong&gt;innodb_file_per_table=1&lt;/strong&gt;, do &lt;strong&gt;ALTER TABLE t ENGINE=InnoDB&lt;/strong&gt; (optionally &lt;strong&gt;ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8&lt;/strong&gt;), and you get all your tables in file-per-table &lt;strong&gt;.ibd&lt;/strong&gt; files.&lt;/p&gt;
&lt;p&gt;But the original &lt;strong&gt;ibdata1&lt;/strong&gt; file is still there. It has to be there, don&#39;t delete it! It contains more than your old data.&lt;/p&gt;
&lt;p&gt;InnoDB tablespace files never reduce in size, it&#39;s an old-time annoyance. The only way to go round it, if you need the space, is to completely drop them and start afresh. That&#39;s one of the things so nice about file-per-table: an &lt;strong&gt;ALTER TABLE&lt;/strong&gt; actually creates a new tablespace file and drops the original one.&lt;/p&gt;
&lt;h4&gt;The procedure&lt;/h4&gt;
&lt;p&gt;The procedure is somewhat painful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dump everything logically (either use &lt;em&gt;mysqldump&lt;/em&gt;, &lt;a href=&#34;http://www.maatkit.org/doc/mk-parallel-dump.html&#34;&gt;mk-parallel-dump&lt;/a&gt;, or do it your own way)&lt;/li&gt;
&lt;li&gt;Erase your data (literally, delete everything under your &lt;strong&gt;datadir&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Generate a new empty database&lt;/li&gt;
&lt;li&gt;Load your dumped data.&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Using replication&lt;/h4&gt;
&lt;p&gt;Replication makes this less painful. Set up a slave, have it follow up on the master.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stop your slave.&lt;/li&gt;
&lt;li&gt;Make sure to backup the replication position (e.g. write &lt;strong&gt;SHOW SLAVE STATUS&lt;/strong&gt; on a safe location, or copy &lt;strong&gt;master.info&lt;/strong&gt; file).&lt;/li&gt;
&lt;li&gt;Work out the dump-erase-generate-load steps on the slave.&lt;/li&gt;
&lt;li&gt;Reattach the slave to the master using saved data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this to succeed you must keep enough binary logs on the master for the entire dump-load period, which could be lengthy.&lt;/p&gt;
&lt;h4&gt;Upgrading to barracuda&lt;/h4&gt;
&lt;p&gt;If you wish to upgrade your InnoDB tables to &lt;em&gt;Barracuda&lt;/em&gt; format, my advice is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow the steps above to generate a file-per-table working slave&lt;/li&gt;
&lt;li&gt;Stop the slave&lt;/li&gt;
&lt;li&gt;Configure &lt;strong&gt;skip_slave_start&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Restart MySQL&lt;/li&gt;
&lt;li&gt;One by one do the &lt;strong&gt;ALTER TABLE&lt;/strong&gt; into &lt;em&gt;Barracuda&lt;/em&gt; format (&lt;strong&gt;ROW_FORMAT=COMPACT&lt;/strong&gt; or &lt;strong&gt;ROW_FORMAT=COMPRESSED&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that if you&#39;re about to do table compression, the &lt;strong&gt;ALTER&lt;/strong&gt; statements become &lt;em&gt;considerably&lt;/em&gt; slower the better the compression is.&lt;/p&gt;
&lt;p&gt;If your dataset is very large, and you can&#39;t keep so many binary logs, you may wish to break step &lt;strong&gt;5&lt;/strong&gt; above into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALTER a large table&lt;/li&gt;
&lt;li&gt;Restart MySQL&lt;/li&gt;
&lt;li&gt;Start slave, wait for it to catch up&lt;/li&gt;
&lt;li&gt;Restart MySQL again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and do the same for all large tables.&lt;/p&gt;
&lt;h4&gt;Why all these restarts?&lt;/h4&gt;
&lt;p&gt;I&#39;ve been upgrading to Barracuda for a long time now. I have clearly noticed that &lt;strong&gt;ALTER&lt;/strong&gt; into a &lt;strong&gt;COMPRESSED&lt;/strong&gt; format works considerably slower after the slave has done some &#34;real work&#34;. This in particular relates to the last &#34;renaming table&#34; stage. There was a bug with earlier InnoDB plugin versions which made this stage hang. It was solved. But it still takes some time for this last, weird stage, where the new replacement table is complete, and it&#39;s actually been renamed in place of the old table, and the old table renamed into something like &#34;#sql-12345.ibd&#34;, and all that needs to be done is have it dropped, and... Well, it takes time.&lt;/p&gt;
&lt;p&gt;My observation is it works faster on a freshly started server. Which is why I take the bother to restart MySQL before each large table conversion.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Where&#39;s my cnf file?</title>
      <link>/blog/mysql/wheres-my-cnf-file/</link>
      <pubDate>Tue, 07 Dec 2010 12:24:44 +0000</pubDate>
      
      <guid>/blog/mysql/wheres-my-cnf-file/</guid>
      <description>&lt;p&gt;So you have a running MySQL server, it&#39;s working well and everyone&#39;s happy. You want to make a minor change to the configuration file, so you edit the file, restart MySQL - but the change doesn&#39;t catch!&lt;/p&gt;
&lt;p&gt;Or maybe you want to check that some global variable has not been dynamically changed without an update to the configuration file. But the configuration file doesn&#39;t make any sense -- it looks like nothing is common between the file and the server.&lt;/p&gt;
&lt;p&gt;Wait, which &lt;strong&gt;my.cnf&lt;/strong&gt; file does MySQL read? Rather, which &lt;strong&gt;my.cnf&lt;/strong&gt; &lt;em&gt;files&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Ever happened to you? If you&#39;re well organized, and only keep a single &lt;strong&gt;/etc/my.cnf&lt;/strong&gt; file, you know exactly where everything is. But some systems are messier, with &lt;em&gt;lots&lt;/em&gt; of configuration files hanging around. Which ones apply?&lt;/p&gt;
&lt;p&gt;Let&#39;s find out which configuration files apply.&lt;/p&gt;
&lt;h4&gt;No direct information&lt;/h4&gt;
&lt;p&gt;It would all be easier if we could just &lt;strong&gt;SHOW GLOBAL VARIABLES LIKE &#39;configuration_files_that_this_server_has_read_list&#39;&lt;/strong&gt;. There isn&#39;t such an option.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;The MySQL documentation &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/option-files.html&#34;&gt;explains&lt;/a&gt; about the configuration files search path, and that&#39;s one path you can follow. Also, you can detect another estimated search path by invoking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;root@myhost:~# mysqld --verbose --help | head -n 20
&lt;/strong&gt;100927 19:53:06 [ERROR] Fatal error: Please read &#34;Security&#34; section of the manual to find out how to run mysqld as root!

mysqld  Ver 5.1.41 for unknown-linux-gnu on x86_64 (MySQL Community Server (GPL))
Copyright (C) 2000-2008 MySQL AB, by Monty and others
Copyright (C) 2008 Sun Microsystems, Inc.
This software comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to modify and redistribute it under the GPL license

Starts the MySQL database server

Usage: mysqld [OPTIONS]

Default options are read from the following files in the given order:
&lt;strong&gt;/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf&lt;/strong&gt;
The following groups are read: mysqld server mysqld-5.1
The following options may be given as the first argument:
...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Easy enough, right? Just walk through that search path and you&#39;ve covered it all. Better yet, see which of these even exist!&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;root@myhost:~# ls -l /etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf&lt;/strong&gt;
ls: cannot access /etc/my.cnf: No such file or directory
ls: cannot access /etc/mysql/my.cnf: No such file or directory
ls: cannot access /usr/local/mysql/etc/my.cnf: No such file or directory
-rw-r--r-- 1 shlomi shlomi 32 2010-03-03 15:21 &lt;strong&gt;/home/shlomi/.my.cnf&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems like we got it. The &lt;strong&gt;mysqld&lt;/strong&gt; process only reads &lt;strong&gt;/home/shlomi/.my.cnf&lt;/strong&gt;. Right?&lt;/p&gt;
&lt;h4&gt;Wrong!&lt;/h4&gt;
&lt;p&gt;There are two running instances of MySQL running on my machine. Neither of the primary &lt;strong&gt;my.cnf&lt;/strong&gt; files used by these instances is listed above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;root@myhost:~# ps aux | grep mysqld
&lt;/strong&gt;shlomi   12092  0.0  0.0   4096   352 pts/1    S    Sep26   0:00 /bin/sh /home/shlomi/sandboxes/5.1/5.1.50/bin/mysqld_safe &lt;strong&gt;--defaults-file=/home/shlomi/sandboxes/msb_5_1_50/my.sandbox.cnf&lt;/strong&gt;
shlomi   12167  0.0 14.5 765520 587924 pts/1   Sl   Sep26   1:12 /home/shlomi/sandboxes/5.1/5.1.50/bin/mysqld &lt;strong&gt;--defaults-file=/home/shlomi/sandboxes/msb_5_1_50/my.sandbox.cnf&lt;/strong&gt; --basedir=/home/shlomi/sandboxes/5.1/5.1.50 --datadir=/home/shlomi/sandboxes/msb_5_1_50/data --log-error=/home/shlomi/sandboxes/msb_5_1_50/data/msandbox.err --pid-file=/home/shlomi/sandboxes/msb_5_1_50/data/mysql_sandbox5150.pid --socket=/tmp/mysql_sandbox5150.sock --port=5150
root     22827  0.0  0.0   4096   668 pts/3    S    16:50   0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/usr/local/mysql/data --pid-file=/usr/local/mysql/data/eeyore.pid
mysql    22960  0.1  2.2 274584 90188 pts/3    Sl   16:50   0:18 /usr/local/mysql/bin/mysqld &lt;strong&gt;--defaults-extra-file=/usr/local/mysql/data/my.cnf&lt;/strong&gt; --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --user=mysql --log-error=/usr/local/mysql/data/eeyore.err --pid-file=/usr/local/mysql/data/eeyore.pid --socket=/tmp/mysql.sock --port=3306&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can you see the mess above?&lt;/p&gt;
&lt;p&gt;The first two lines refer to a MySQL instance running under &lt;a href=&#34;http://mysqlsandbox.net/&#34;&gt;mysqlsandbox&lt;/a&gt;. The &lt;em&gt;mysqld_safe&lt;/em&gt; script is passed the defaults-file parameter, and passes it on to the &lt;em&gt;mysqld&lt;/em&gt; service.&lt;/p&gt;
&lt;p&gt;However the next couple of lines refer to a MySQL server installed as a service; installed from a binary tarball, this instance reads configuration from the &lt;strong&gt;datadir&lt;/strong&gt;. This time the &lt;em&gt;mysqld_safe&lt;/em&gt; instance is passed nothing, but invokes &lt;em&gt;mysqld&lt;/em&gt; with &lt;strong&gt;default-extra-file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To be fair, I wasn&#39;t expecting the &lt;strong&gt;&#34;mysqld --verbose --help&#34;&lt;/strong&gt; invocation to find the &lt;em&gt;mysqlsandbox&lt;/em&gt; configuration files. I did expect it to find the &lt;strong&gt;/usr/local/mysql/data/my.cnf&lt;/strong&gt; file which it eventually used.&lt;/p&gt;
&lt;p&gt;That&#39;s nice &amp;amp; ugly. I can see the &lt;strong&gt;my.cnf&lt;/strong&gt; file used by peeking at &lt;em&gt;ps&lt;/em&gt;. A bit overkill.&lt;/p&gt;
&lt;h4&gt;Not quite there yet...&lt;/h4&gt;
&lt;p&gt;Because there&#39;s still my private configuration file (resides on &lt;strong&gt;/home/shlomi/.my.cnf&lt;/strong&gt; on my account). Now I do not expect this file to be read by my standard MySQL server, since it does not run as user &#34;shlomi&#34;. However my command line clients do actually read this file, and so I am affected by its settings.&lt;/p&gt;
&lt;p&gt;I can verify whether such files have been used on a file system which is configured to support the &lt;strong&gt;atime&lt;/strong&gt; option:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;root@myhost:~# ls -lt --time=atime $(locate *my.cnf)
&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I usually keep the &lt;strong&gt;atime&lt;/strong&gt; option enabled for my &lt;em&gt;&#34;/&#34;&lt;/em&gt; and &lt;em&gt;&#34;/home&#34;&lt;/em&gt; partitions, but disable it on data partitions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL terminology: processes, threads &amp; connections</title>
      <link>/blog/mysql/mysql-terminology-processes-threads-connections/</link>
      <pubDate>Wed, 03 Nov 2010 08:38:03 +0000</pubDate>
      
      <guid>/blog/mysql/mysql-terminology-processes-threads-connections/</guid>
      <description>&lt;p&gt;There&#39;s some confusion in the MySQL terminology for processes, threads &amp;amp; connections, which I will try to resolve. I can&#39;t explain the full nature of what processes and threads are; please see Wikipedia &lt;a href=&#34;http://en.wikipedia.org/wiki/Process_%28computing%29&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Thread_%28computer_science%29&#34;&gt;[2]&lt;/a&gt; for that. But here&#39;s some basics with regard to MySQL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL server is a single process application.&lt;/li&gt;
&lt;li&gt;It is multithreaded.&lt;/li&gt;
&lt;li&gt;It (usually) acts as a TCP/IP server, accepting connections.&lt;/li&gt;
&lt;li&gt;Each connection gets a dedicated thread.&lt;/li&gt;
&lt;li&gt;These threads are sometimes named processes, and sometimes they&#39;re referred to as connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part is where confusion arises, so let me discuss again the use of threads and connections in MySQL.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;MySQL truly is a single process server. It is multi threaded, in that there are many obvious and less obvious threads comprising the server. Such threads are the InnoDB I/O threads, the DELAYED INSERT thread, etc. Oh, and of course: the connection threads. More on this in a short while.&lt;/p&gt;
&lt;p&gt;On older Linux versions or on glibc-static versions, one may view MySQL as a multi-process server. This is not so: it is merely because threads are mapped to OS processes. For the sake of this discussion this is irrelevant. mysqld is a single process.&lt;/p&gt;
&lt;p&gt;So, every new connection gets its own thread. Assuming no thread pool is in use, every new connection makes for the creation of a new thread, and a disconnect causes for that thread&#39;s destruction. Hence, there is a 1-1 mapping between connections and active threads. But then, there &lt;em&gt;is&lt;/em&gt; a thread pool, which means there can be threads which are not associated with any connection. So, the number of threads is greater than or equal to the number of connections.&lt;/p&gt;
&lt;p&gt;Here&#39;s where terminology gets confusing. When you want to see what&#39;s executing on the server, you issue &lt;strong&gt;SHOW PROCESSLIST&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SHOW PROCESSLIST\G
*************************** 1. row ***************************
     Id: 4
   User: root
   Host: localhost
     db: mycheckpoint
Command: Query
   Time: 0
  State: NULL
   Info: SHOW PROCESSLIST
1 row in set (0.02 sec)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps this should have been called SHOW THREADLIST; the acting queries are not really processes.&lt;/p&gt;
&lt;p&gt;OK, so there&#39;s process #4 which is executing a query. What&#39;s &lt;em&gt;my&lt;/em&gt; process id? Turns out I don&#39;t have a process id. I do get to have a &lt;strong&gt;CONNECTION_ID()&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT CONNECTION_ID();
+-----------------+
| CONNECTION_ID() |
+-----------------+
|               4 |
+-----------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So how many processes or connections are now actually doing anything? We now must check for &lt;strong&gt;&#39;Threads_running&#39;&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SHOW GLOBAL STATUS LIKE &#39;Threads_running&#39;;
+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| Threads_running | 1     |
+-----------------+-------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so we have &lt;strong&gt;&#39;Threads_cached&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;Threads_connected&#39;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&#39;Max_used_connections&#39;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Confusing?&lt;/p&gt;
&lt;p&gt;Most of the time one can simply think of processes, threads and connections as 1-1-1 mapped, and not bother with it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MMM for MySQL single reader role</title>
      <link>/blog/mysql/mmm-for-mysql-single-reader-role/</link>
      <pubDate>Thu, 12 Aug 2010 14:12:16 +0000</pubDate>
      
      <guid>/blog/mysql/mmm-for-mysql-single-reader-role/</guid>
      <description>&lt;p&gt;The standard documentation and tutorials on &lt;a href=&#34;http://mysql-mmm.org/&#34;&gt;MMM for MySQL&lt;/a&gt;, for master-master replication setup, suggest one Virtual IP for the &lt;em&gt;writer&lt;/em&gt; role, and two Virtual IPs for the &lt;em&gt;reader&lt;/em&gt; role. It can be desired to only have a single virtual IP for the reader role, as explained below.&lt;/p&gt;
&lt;h4&gt;The two IPs for the reader role&lt;/h4&gt;
&lt;p&gt;A simplified excerpt from the &lt;strong&gt;mmm_common.conf&lt;/strong&gt; sample configuration file, as can be found on the project&#39;s site and which is most quoted:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;...
&amp;lt;host db1&amp;gt;
  ip                      192.168.0.11
  mode                    master
  peer                    db2
&amp;lt;/host&amp;gt;

&amp;lt;host db2&amp;gt;
  ip                      192.168.0.12
  mode                    master
  peer                    db1
&amp;lt;/host&amp;gt;
...
&amp;lt;role writer&amp;gt;
  hosts                   db1, db2
  ips                     192.168.0.100
  mode                    exclusive
&amp;lt;/role&amp;gt;

&amp;lt;role reader&amp;gt;
  hosts                   db1, db2
  ips                     192.168.0.101, 192.168.0.102
  mode                    balanced
&amp;lt;/role&amp;gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above setup &lt;strong&gt;db1&lt;/strong&gt; &amp;amp; &lt;strong&gt;db2&lt;/strong&gt; participate in master-master active-passive replication. Whenever you need to write something, you use &lt;strong&gt;192.18.0.100&lt;/strong&gt;, which is the virtual IP for the writer role. Whenever you need to read something, you use either &lt;strong&gt;192.168.0.101&lt;/strong&gt; or &lt;strong&gt;192.168.0.102&lt;/strong&gt;, which are the virtual IPs of the two machines, this time in read role. Logic says one wishes to distribute reads between the two machines.&lt;/p&gt;
&lt;h4&gt;One IP for reader role&lt;/h4&gt;
&lt;p&gt;I have a few cases where the above setup is not satisfactory: there is a requirement to know the IP of the passive (read-only) master. Reason? There are queries which we only want to execute on the slave (reporting, long analysis), and only execute on the active master when this isn&#39;t possible. Sometimes we might even prefer waiting for a slave to come back up rather than execute a query on the master.&lt;/p&gt;
&lt;p&gt;This may involve an application level solution, or a connection-pool level solution (&#34;get me a slave&#39;s connection, or, if that&#39;s not possible, get me the master&#39;s&#34;).&lt;/p&gt;
&lt;p&gt;Anyway, neither &lt;strong&gt;192.168.0.101&lt;/strong&gt; nor &lt;strong&gt;192.168.0.102&lt;/strong&gt; relate to a particular machine&#39;s role status. That is, the fact that one of the machines is in &lt;em&gt;writer&lt;/em&gt; mode or not does not affect these virtual IPs.&lt;/p&gt;
&lt;p&gt;The solution is a minor change to the configuration file. Real minor:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&amp;lt;role reader&amp;gt;
  hosts                   db1, db2
  ips                     192.168.0.101
  mode                    balanced
&amp;lt;/role&amp;gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this new setup the two nodes compete for a single &lt;em&gt;reader&lt;/em&gt; role virtual IP. There is no &lt;strong&gt;192.168.0.102&lt;/strong&gt; anymore. Although it does not reflect from the configuration file, it turns out MMM acts in a smart way; the way you would expect it to run.&lt;/p&gt;
&lt;p&gt;There is nothing to suggest in the above that the IPs &lt;strong&gt;192.168.0.100&lt;/strong&gt; &amp;amp; &lt;strong&gt;192.168.0.101&lt;/strong&gt; will be distributed between the two machines. But you would &lt;em&gt;like&lt;/em&gt; them to. And MMM does that. It makes sure that, if possible, one of the machines (say &lt;strong&gt;db1&lt;/strong&gt;) gets the &lt;em&gt;writer&lt;/em&gt; role, hence &lt;strong&gt;192.168.0.100&lt;/strong&gt;, and the other (&lt;strong&gt;db2&lt;/strong&gt;) the &lt;em&gt;reader&lt;/em&gt; role, hence &lt;strong&gt;192.168.0.101&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, it prefers that situation over a current known situation: say &lt;strong&gt;db1&lt;/strong&gt; went down. The &lt;em&gt;writer&lt;/em&gt; role moves to &lt;strong&gt;db2&lt;/strong&gt;. When &lt;strong&gt;db1&lt;/strong&gt; is up again, MMM acts smartly: it does &lt;em&gt;not&lt;/em&gt; give it back the &lt;em&gt;writer&lt;/em&gt; role (since moving the active master around is costly, after all), but &lt;em&gt;does&lt;/em&gt; give it the &lt;em&gt;reader&lt;/em&gt; role, along with the &lt;strong&gt;192.168.2.101&lt;/strong&gt; IP. So it takes care not to leave a server without a role, while preferring to move the &lt;em&gt;writer&lt;/em&gt; role as little as possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Verifying GROUP_CONCAT limit without using variables</title>
      <link>/blog/mysql/verifying-group_concat-limit-without-using-variables/</link>
      <pubDate>Thu, 10 Jun 2010 09:16:14 +0000</pubDate>
      
      <guid>/blog/mysql/verifying-group_concat-limit-without-using-variables/</guid>
      <description>&lt;p&gt;I have a case where I must know if &lt;strong&gt;group_concat_max_len&lt;/strong&gt; is at its default value (&lt;strong&gt;1024&lt;/strong&gt;), which means there are some operation I cannot work out. I&#39;ve ranted on this &lt;a href=&#34;http://code.openark.org/blog/mysql/those-oversized-undersized-variables-defaults&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Normally, I would simply:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
SELECT @@group_concat_max_len
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;However, I am using views, where session variables are not allowed. Using a stored function can &lt;a href=&#34;http://code.openark.org/blog/mysql/views-better-performance-with-condition-pushdown&#34;&gt;do the trick&lt;/a&gt;, but I wanted to avoid stored routines. So here&#39;s a very simple test case: is the current &lt;strong&gt;group_concat_max_len&lt;/strong&gt; long enough or not? I&#39;ll present the long version and the short version.&lt;/p&gt;
&lt;h4&gt;The long version&lt;/h4&gt;
&lt;blockquote&gt;&lt;pre&gt;
SELECT
  CHAR_LENGTH(
    GROUP_CONCAT(
      COLLATION_NAME SEPARATOR &#39;&#39;
    )
  )
FROM
  INFORMATION_SCHEMA.COLLATIONS;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;If the result is &lt;strong&gt;1024&lt;/strong&gt;, we are in a bad shape. I happen to know that the total length of collation names is above &lt;strong&gt;1800&lt;/strong&gt;, and so it is trimmed down. Another variance of the above query would be:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
SELECT
  CHAR_LENGTH(
    GROUP_CONCAT(
      COLLATION_NAME SEPARATOR &#39;&#39;
    )
  ) = SUM(CHAR_LENGTH(COLLATION_NAME))
    AS group_concat_max_len_is_long_enough
FROM
  INFORMATION_SCHEMA.COLLATIONS;
+-------------------------------------+
| group_concat_max_len_is_long_enough |
+-------------------------------------+
|                                   0 |
+-------------------------------------+
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;COLLATIONS&lt;/strong&gt;, &lt;strong&gt;CHARACTER_SETS&lt;/strong&gt; or &lt;strong&gt;COLLATION_CHARACTER_SET_APPLICABILITY&lt;/strong&gt; tables provide with known to exist variables (assuming you did not compile MySQL with particular charsets). It&#39;s possible to &lt;strong&gt;CONCAT&lt;/strong&gt;, &lt;strong&gt;UNION&lt;/strong&gt; or &lt;strong&gt;JOIN&lt;/strong&gt; columns and tables to detect longer than &lt;strong&gt;1800&lt;/strong&gt; characters in &lt;strong&gt;group_concat_max_len&lt;/strong&gt;. I admit this is becoming ugly, so let&#39;s move on.&lt;/p&gt;
&lt;h4&gt;The short version&lt;/h4&gt;
&lt;p&gt;Don&#39;t want to rely on existing tables? Not sure what values to expect? Look at this:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
SELECT CHAR_LENGTH(GROUP_CONCAT(REPEAT(&#39;0&#39;, 1025))) FROM DUAL
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; doesn&#39;t really care about the number of rows. In the above example, I&#39;m using a single row (retrieved from the &lt;strong&gt;DUAL&lt;/strong&gt; virtual table), making sure it is long enough. Type in any number in place of &lt;strong&gt;1025&lt;/strong&gt;, and you have a metric for your &lt;strong&gt;group_concat_max_len&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;
SELECT
  CHAR_LENGTH(GROUP_CONCAT(REPEAT(&#39;0&#39;, 32768))) &amp;gt;= 32768 As group_concat_max_len_is_long_enough
FROM
  DUAL;
+-------------------------------------+
| group_concat_max_len_is_long_enough |
+-------------------------------------+
|                                   0 |
+-------------------------------------+
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;The above makes a computation with &lt;strong&gt;REPEAT&lt;/strong&gt;. One can replace this with a big constant.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Those oversized, undersized variables defaults</title>
      <link>/blog/mysql/those-oversized-undersized-variables-defaults/</link>
      <pubDate>Wed, 09 Jun 2010 06:35:08 +0000</pubDate>
      
      <guid>/blog/mysql/those-oversized-undersized-variables-defaults/</guid>
      <description>&lt;p&gt;Some &lt;strong&gt;mysqld&lt;/strong&gt; parameters are far from having reasonable defaults. Most notable are the engine-specific values, and in particular the InnoDB parameters.&lt;/p&gt;
&lt;p&gt;Some of these variables have different defaults as of MySQL 5.4. &lt;strong&gt;innodb_buffer_pool_size&lt;/strong&gt;, for example, is &lt;strong&gt;128M&lt;/strong&gt; on 5.4. &lt;strong&gt;innodb_log_file_size&lt;/strong&gt;, however, has changed back and forth, as far as I understand, and is down to &lt;strong&gt;5M&lt;/strong&gt; again. These settings are still the same on 5.5.&lt;/p&gt;
&lt;p&gt;I wish to present some not-so-obvious parameters which, in my opinion, have poor defaults, for reasons I will explain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;group_concat_max_len&lt;/strong&gt;: This parameter limits the maximum text length of a &lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; concatenation result. It defaults to &lt;strong&gt;1024&lt;/strong&gt;. I think this is a very low value. I have been using &lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; more and more, recently, to solve otherwise difficult problems. And in most cases, &lt;strong&gt;1024&lt;/strong&gt; was just too low, resulting in &lt;a href=&#34;http://code.openark.org/blog/mysql/but-i-do-want-mysql-to-say-error&#34;&gt;silent&lt;/a&gt; (&lt;em&gt;Argh!&lt;/em&gt;) truncating of the result, thus returning incorrect results. It is interesting to learn that the maximum value for this parameter is limited by &lt;strong&gt;max_packet_size&lt;/strong&gt;. I would suggest, then, that this parameter should be altogether removed, and have the &lt;strong&gt;max_packet_size&lt;/strong&gt; limitation as the only limitation. Otherwise, I&#39;d like it to have a very large default value, in the order of a few MB.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wait_timeout&lt;/strong&gt;: Here&#39;s a parameter whose default value is over permissive. &lt;strong&gt;wait_timeout&lt;/strong&gt; enjoys an &lt;strong&gt;8 hour&lt;/strong&gt; default. I usually go for &lt;strong&gt;5-10 minutes&lt;/strong&gt;. I don&#39;t see a point in letting idle connections waste resources for 8 hours. Applications which hold up such connections should be aware that they&#39;re doing something wrong, in the form of a forced disconnection. Connection pools work beautifully with low settings, and can themselves do keepalives, if they choose to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sql_mode&lt;/strong&gt;: I&#39;ve &lt;a href=&#34;http://code.openark.org/blog/mysql/do-we-need-sql_mode&#34;&gt;discussed this&lt;/a&gt; in length before. My opinion unchanged.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;open_files_limit&lt;/strong&gt;: What with the fact connections, threads, table descriptors, table file descriptors (depending on how you use InnoDB), temporary file tables -- all are files on unix-like systems, and considering this is an inexpensive payment, I think &lt;strong&gt;open_files_limit&lt;/strong&gt; should default to a few thousands. Why risk the crash of &#34;too many open files&#34;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!--more--&gt;No setting will ever be perfect for everyone, I know. But there are those parameters which you automatically set values for when you do a new install. These should be at focus and their defaults change.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Replication configuration checklist</title>
      <link>/blog/mysql/replication-configuration-checklist/</link>
      <pubDate>Tue, 18 May 2010 09:27:06 +0000</pubDate>
      
      <guid>/blog/mysql/replication-configuration-checklist/</guid>
      <description>&lt;p&gt;This post lists the essential and optional settings for a replication environment.&lt;/p&gt;
&lt;p&gt;It does not explain how to create replicating slaves. See &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html&#34;&gt;How To Setup Replication&lt;/a&gt; for that. However, not all configuration options are well understood, and their roles in varying architectures can change.&lt;/p&gt;
&lt;p&gt;Here are the settings for a basic Master/Slave(s) replication architecturee.&lt;/p&gt;
&lt;h4&gt;Essential&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;log-bin&lt;/strong&gt;: enable binary logs on the master. Replication is based on the master logging all modifying queries (&lt;strong&gt;INSERT&lt;/strong&gt;/&lt;strong&gt;CREATE&lt;/strong&gt;/&lt;strong&gt;ALTER&lt;/strong&gt;/&lt;strong&gt;GRANT&lt;/strong&gt; etc.), and the slaves being able to replicate them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server-id&lt;/strong&gt;: each machine must have a &lt;em&gt;unique&lt;/em&gt; &lt;strong&gt;server-id&lt;/strong&gt;. A slave will not replay queries originating from a server with the same &lt;strong&gt;server-id&lt;/strong&gt; as its own.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GRANT&lt;/strong&gt;: grant a user with &lt;strong&gt;REPLICATION SLAVE&lt;/strong&gt;. The host list must include all replication slave hosts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expire-logs-days&lt;/strong&gt;: automatically clean up master&#39;s binary logs older than given value. By default, binary logs are never removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When working with Master/Slaves replication, one should be prepared to master failure and slave promotion to master. It may be desirable to identify a particular slave as primary candidate for promotion.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;Just setting up the &lt;strong&gt;log-bin&lt;/strong&gt; will yield with warnings in the MySQL&#39;s error log. The binary logs are named, by default, after the host&#39;s name. If that should change - MySQL will not be able to find the binary logs anymore (expecting a name which does previous logs did not use). It is therefore recommended to use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;log-bin=mychachine-bin&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;log-bin=mysql-bin&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Essential/Optional&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;log-bin&lt;/strong&gt;: enable on a slave, so that in case it is promoted to master, the rest of the slaves can replicate using its binary logs. Enabling binary logging cannot be done on a live server: this parameter requires MySQL restart.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GRANT&lt;/strong&gt;: include the master&#39;s host, so that when a slave promotes to master, the master can become a slave and continue replicating.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log-slave-updates&lt;/strong&gt;: together with &lt;strong&gt;log-bin&lt;/strong&gt;, enable on slave so that master&#39;s binary logs are propagated and logged by the slave. This is required if the slave takes the role of a master in a chained replication setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expire-logs-days&lt;/strong&gt;: set this flag on slave as well [tnx Sheeri].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;read-only&lt;/strong&gt;: set on slave(s). Refuses any modifying query (INSERT, DELETE, ALTER, DROP etc.) for non-&lt;strong&gt;SUPER&lt;/strong&gt; privileged users [tnx Ryan].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sync-binlog&lt;/strong&gt;: flush binary log to disk per transaction commit. Use this on master for safer replication; however note that increased I/O is expected [tnx Harrison].&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Extra&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;report-host&lt;/strong&gt;, &lt;strong&gt;report-port&lt;/strong&gt;: the host and port identifying the slave when looking at SHOW SLAVE HOSTS on master. Set this up on all hosts. See &lt;a href=&#34;http://code.openark.org/blog/mysql/the-importance-of-report_host-report_port&#34;&gt;further discussion here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max-binlog-size&lt;/strong&gt;: the maximum size for a binary log / relay log file, after which it is rotated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Expert&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;binlog-do-db&lt;/strong&gt;, &lt;strong&gt;binlog-do-table&lt;/strong&gt;, &lt;strong&gt;replicate-do-db&lt;/strong&gt;, &lt;strong&gt;...&lt;/strong&gt;: filter queries by either not writing them to binary log, or not reading them from the logs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason I list the above as &#34;Expert&#34; is not because one must have a super-brain to set them up. That part is easy enough. But they lead to some dangerous situations, sometimes seemingly harmless. It takes great care to control the application and developers from creating those situations. See &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/replication-rules.html&#34;&gt;documentation here&lt;/a&gt;. See also discussion &lt;a href=&#34;http://code.openark.org/blog/mysql/quick-reminder-avoid-using-binlog-do-db&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.mysqlperformanceblog.com/2009/05/14/why-mysqls-binlog-do-db-option-is-dangerous/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>But I DO want MySQL to say &#34;ERROR&#34;!</title>
      <link>/blog/mysql/but-i-do-want-mysql-to-say-error/</link>
      <pubDate>Fri, 12 Mar 2010 06:53:28 +0000</pubDate>
      
      <guid>/blog/mysql/but-i-do-want-mysql-to-say-error/</guid>
      <description>&lt;p&gt;MySQL is known for its willingness to accept invalid queries, data values. It can silently commit your transaction, truncate your data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; with a small &lt;strong&gt;group_concat_max_len&lt;/strong&gt; setting? Your result will be silently truncated (make sure to check the warnings though).&lt;/li&gt;
&lt;li&gt;Calling &lt;strong&gt;CREATE &lt;span style=&#34;text-decoration: line-through;&#34;&gt;TEMPORARY&lt;/span&gt; TABLE&lt;/strong&gt;? You get &lt;a href=&#34;http://www.joinfu.com/2010/03/a-follow-up-on-the-sql-puzzle/&#34;&gt;silent commit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Issuing a &lt;strong&gt;ROLLBACK&lt;/strong&gt; on non-transactional involved engines? Have a warning; no error.&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;LOCK IN SHARE MODE&lt;/strong&gt; on non transactional tables? Not a problem. Nothing reported.&lt;/li&gt;
&lt;li&gt;Adding a &lt;strong&gt;FOREIGN KEY&lt;/strong&gt; on a MyISAM table? Good for you; no action actually taken.&lt;/li&gt;
&lt;li&gt;Inserting &lt;strong&gt;300&lt;/strong&gt; to a &lt;strong&gt;TINYINT&lt;/strong&gt; column in a relaxed &lt;strong&gt;sql_mode&lt;/strong&gt;? Give me &lt;strong&gt;255&lt;/strong&gt;, I&#39;ll silently drop the remaining &lt;strong&gt;45&lt;/strong&gt;. I owe you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Warnings and errors&lt;/h4&gt;
&lt;p&gt;It would be nice to:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have an &lt;strong&gt;auto_propagate_warning_to_error&lt;/strong&gt; server variable (global/session/both) which, well, does what it says.&lt;/li&gt;
&lt;li&gt;Have an &lt;strong&gt;i_am_really_not_a_dummy&lt;/strong&gt; server variable which implies stricter checks for all the above and prevents you from doing with &lt;em&gt;anything&lt;/em&gt; that may be problematic (or rolls back your transactions on your invalid actions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connectors may be nice enough to propagate warnings to errors - that&#39;s good. But not enough: since data is already committed in MySQL.&lt;/p&gt;
&lt;p&gt;If I understand correctly, and maybe it&#39;s just a myth, it all relates to the times where MySQL had interest in a widespread adoption across the internet, in such way that it does not interfere too much with the users (hence leading to the common myth that &#34;MySQL just works out of the box and does not require me to configure or understand anything&#34;).&lt;/p&gt;
&lt;p&gt;MySQL is a database system, and is now widespread, and is used by serious companies and products. It is time to stop play nice to everyone and provide with strict integrity -- or, be nice to everyone, just allow me to specify what &#34;nice&#34; means for me.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>