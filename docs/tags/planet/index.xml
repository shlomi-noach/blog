<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet on code.openark.org</title>
    <link>/blog/tags/planet/</link>
    <description>Recent content in Planet on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 18 May 2011 10:00:14 +0000</lastBuildDate>
    <atom:link href="/blog/tags/planet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tales of the trade #5: How to author a super successful MySQL blog</title>
      <link>/blog/mysql/tales-of-the-trade-4-how-to-author-a-super-successful-mysql-blog/</link>
      <pubDate>Wed, 18 May 2011 10:00:14 +0000</pubDate>
      
      <guid>/blog/mysql/tales-of-the-trade-4-how-to-author-a-super-successful-mysql-blog/</guid>
      <description>&lt;p&gt;Check out the following tutorial that teaches you how to become a popular MySQL blog author:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/05/How-to-author-a-super-successful-MySQL-blog-strip_1-strip_1.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-3645&#34; title=&#34;How-to-author-a-super-successful-MySQL-blog-strip_1&#34; src=&#34;/blog/blog/assets/strip_1.png&#34; alt=&#34;How-to-author-a-super-successful-MySQL-blog-strip_1&#34; width=&#34;800&#34; height=&#34;1103&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. This comment hopefully makes aggregating readers skip the rest of the images in this post. --&gt;&lt;br /&gt;
&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/05/How-to-author-a-super-successful-MySQL-blog-strip_1-strip_2.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-3646&#34; title=&#34;How-to-author-a-super-successful-MySQL-blog-strip_1-strip_2&#34; src=&#34;/blog/blog/assets/strip_2.png&#34; alt=&#34;How-to-author-a-super-successful-MySQL-blog-strip_1-strip_2&#34; width=&#34;800&#34; height=&#34;1061&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/05/How-to-author-a-super-successful-MySQL-blog-strip_1-strip_3.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-3647&#34; title=&#34;How-to-author-a-super-successful-MySQL-blog-strip_1-strip_3&#34; src=&#34;/blog/blog/assets/strip_3.png&#34; alt=&#34;How-to-author-a-super-successful-MySQL-blog-strip_1-strip_3&#34; width=&#34;800&#34; height=&#34;1005&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Complete strip: &lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/05/tales-of-the-trade-make-your-mysql-blog-popular-full.png&#34;&gt;tales-of-the-trade-make-your-mysql-blog-popular-full.png&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Impressions from MySQL conf 2011, part IV</title>
      <link>/blog/mysql/impressions-from-mysql-conf-2011-part-iv/</link>
      <pubDate>Tue, 19 Apr 2011 14:08:40 +0000</pubDate>
      
      <guid>/blog/mysql/impressions-from-mysql-conf-2011-part-iv/</guid>
      <description>&lt;p&gt;This post concludes my impressions from some of the talks Iâ€™ve been to.&lt;/p&gt;
&lt;h4&gt;Thursday&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.oreilly.com/mysql2011/public/schedule/detail/17189&#34;&gt;OQGRAPH: Dealing with Graphs and Hierarchies in Plain SQL&lt;/a&gt; / &lt;em&gt;Antony Curtis (Blizzard Entertainment)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I opened this day&#39;s sessions with a smile.&lt;/p&gt;
&lt;p&gt;Antony Curtis and Arjen Lentz have authored the OQGraph storage engine a while back. I had every intention to try it out, but never got round to it. Which is why I was happy to find this session in the conference. OQGraph is a specialized engine, and comes to solve hierarchal or otherwise graph-related queries, such as: &lt;em&gt;&#34;who are the descendants of a given node&#34;&lt;/em&gt;, &lt;em&gt;&#34;find a route from a to b&#34;&lt;/em&gt;, etc. MySQL does not support the &lt;strong&gt;RECURSIVE&lt;/strong&gt; syntax as Oracle does, and does not provide out-of-the-box solution for that.&lt;/p&gt;
&lt;p&gt;The syntax is just excellent: you just write something like &lt;strong&gt;SELECT * FROM my_graph WHERE from_node = &#39;empusa fasciata&#39; AND to_node = &#39;homo sapiens&#39;&lt;/strong&gt; to find a route. Otherwise just use &lt;strong&gt;WHERE from_node = &#39;Heathrow Central&#39;&lt;/strong&gt; to find all outgoing links. So this is just plain old SQL, no new syntax involved.&lt;/p&gt;
&lt;p&gt;I rounded corners. It is also possible (and required) to specify an algorithm. Do you want Djekstra? BFS? You specify it in the query. The result of a route query is a rowset, where each row is a step in the route, along with its sequence within the route. So you can do your &lt;strong&gt;ORDER BY&lt;/strong&gt;, &lt;strong&gt;LIMIT&lt;/strong&gt; etc. I find that syntax-wise, &lt;em&gt;OQGraph&lt;/em&gt; is very intuitive!&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Implementation-wise, there are two versions: &lt;strong&gt;2&lt;/strong&gt; (stable) and &lt;strong&gt;3&lt;/strong&gt; (testing), which are very different. In version &lt;strong&gt;2&lt;/strong&gt; you must create and populate an OQGraph table. You must populate it with &lt;em&gt;from-to;weight&lt;/em&gt; values. The entire table is stored in memory a-la MEMORY engine. In version &lt;strong&gt;3&lt;/strong&gt; the OQGraph is not directly populated. Instead, you use the &lt;strong&gt;CONNECTION&lt;/strong&gt; table property to identify a real table where the data resides, along with the names of the relevant columns. So your data can reside within your normal InnoDB table, and your queries will follow your normal isolation-level rules.&lt;/p&gt;
&lt;p&gt;Graph search implementation is done via the &lt;em&gt;boost()&lt;/em&gt; library. This means that information must be loaded in memory. Tests show that up to a million or a few million edges are as much as &lt;em&gt;OQGraph&lt;/em&gt; can take. So right now it may not fit your requirements is you need larger datasets.&lt;/p&gt;
&lt;p&gt;Antony seemed like he was enjoying every minute of writing OQGraph, was very aware of current limitations, and offered great ideas on improvement. The version &lt;strong&gt;3&lt;/strong&gt; design is a huge improvement over version &lt;strong&gt;2&lt;/strong&gt;, and I can&#39;t wait to see how it evolves!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.oreilly.com/mysql2011/public/schedule/detail/17524&#34;&gt;Error Detection and Correction with MySQL Replication&lt;/a&gt; / &lt;em&gt;Daniel Peek (Facebook)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An interesting view into Facebook&#39;s attempt to locate &amp;amp; define data drifts within MySQL replication. Apparently, Facebook guys realized there were some inconsistencies between masters and slaves. They embarked on a mission to find out what exactly was inconsistent, and why.&lt;/p&gt;
&lt;p&gt;Daniel Peek described their method of detecting changes. In similar manner to Maatkit&#39;s &lt;em&gt;mk-table-checksum&lt;/em&gt;, they use hash codes over chunks of rows. To be more specific: in order to detect the differences (if any) between master &amp;amp; slaves on a given table, they iterate said table in chunks, such that first line of any chunk overlaps with last line of previous chunk. This is easily done when there&#39;s unique key, less so when there isn&#39;t. They copy rows to a utility table a chunk at a time (e.g. &lt;strong&gt;1,000&lt;/strong&gt; rows at a time), and take checksum. Their script then compared checksum on master &amp;amp; slaves. If it equals, they conclude (at very high probability) that tested chunk is identical. Otherwise they take action to detect the exact row that is changed.&lt;/p&gt;
&lt;p&gt;When the two chunks do not have the same number of rows, then there&#39;s at the very least a missing or extra row in either master or slave. Otherwise, there&#39;s a change in column&#39;s data. Apparently, nearly all data drifts are changes in column data, not missing or extra rows.&lt;/p&gt;
&lt;p&gt;To make a long story short, they realized most of their data drift related to TIMESTAMPs. After realizing some timezone settings were incorrect, they were still left with &lt;strong&gt;0.00056%&lt;/strong&gt; (if my memory serves me right) worth of data drift. How often do they do this test? &lt;em&gt;Once&lt;/em&gt;, is the reply. What is the meaning of &lt;strong&gt;0.00056%&lt;/strong&gt;? &lt;em&gt;We don&#39;t know&lt;/em&gt;, is the answer.&lt;/p&gt;
&lt;p&gt;And, although we are left with unanswered questions: &lt;em&gt;Why does that happen? How can we detect such changes in reasonable time? What should we do once we realize there is a drift? Whom shall we trust?&lt;/em&gt; We have gone to length to recognize a way to detect such drifts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.oreilly.com/mysql2011/public/schedule/detail/17146&#34;&gt;Summary Tables, Aggregate Tables and Materialized Views Using Flexviews&lt;/a&gt; / &lt;em&gt;Justin Swanhart (Percona)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The conference had to end with a bang. In the last three years (hopefully with some sleep), Justin Swanhart has been working on what seems to me like an utterly (positively) crazy project: Flexviews: a materialized views solution for MySQL.&lt;/p&gt;
&lt;p&gt;MySQL&#39;s native views are immaterialized. There is no data in them. When you access the view, you directly query the tables beneath. Justin&#39;s code allows you to create a materialized view (implemented as an actual MySQL table), which can utilize almost any type of SELECT you would want to use. It can only SELECT tables (including other materialized views).&lt;/p&gt;
&lt;p&gt;How does this work? You don&#39;t directly create your materialized view. You get a set of stored routines with which you create the view. Each provides with a simple step in the creation of the view (e.g. JOIN to this table, return this column, etc.). You don&#39;t have to worry too much about this, since Justin provides with a PHP script which translates a SQL query to the required invocation sequence of said routines.&lt;/p&gt;
&lt;p&gt;OK, view is created. What then? &lt;em&gt;Flexviews&lt;/em&gt; reads binary logs (must be in ROW binlog format), and decides whether logged action manipulates tables used by any materialized table. If so, it logs that action into a special log table.&lt;/p&gt;
&lt;p&gt;What have we got so far? SQL parser which generates sequence of stored routines; sequence of stored routines which creates a table, while storing structure; Binlog reader, capable of recognizing relevant events, associating them with relevant materialized views; and, most importantly, some brains which can figure out &lt;em&gt;just how&lt;/em&gt; said event affects data. Think about it: say our query did some aggregation, with COUNT(*) or SUM(column). To be able to update the aggregated result based on the fact a few rows have been added/deleted/updated sounds to me like very hard work.&lt;/p&gt;
&lt;p&gt;Flexviews do not get updated immediately, but rather on demand. It&#39;s all in the logs, it&#39;s just a matter of when to apply the logs. We had a very nice &amp;amp; simple demonstration of this.&lt;/p&gt;
&lt;p&gt;I don&#39;t mean to be too superlative, but this was a very impressive session, and myself, as well as other people, all had an occasional &lt;em&gt;&#34;wow&#34;&lt;/em&gt; slip during and concluding this talk.&lt;/p&gt;
&lt;h4&gt;Throughout the week&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Planet MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During conference, &lt;a href=&#34;http://planet.mysql.com/&#34;&gt;Planet MySQL&lt;/a&gt; was swamped with various announcements. Little were technical    announcements, like &#34;X.X has been released&#34;, and most were purely    marketing announcements. This is to be expected; everyone wants to make a    living. I think it is quite all right that for &lt;strong&gt;4&lt;/strong&gt; days a year, the    planet is mostly marketing stuff. I personally mostly ignore the planet    during these days.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tales of the Trade #4: new home for the MySQL dolphins</title>
      <link>/blog/mysql/tales-of-the-trade-4-new-home-for-the-mysql-dolphins/</link>
      <pubDate>Mon, 05 Jul 2010 14:18:55 +0000</pubDate>
      
      <guid>/blog/mysql/tales-of-the-trade-4-new-home-for-the-mysql-dolphins/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2010/07/tales-of-the-trade-new-home-for-dolphins.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-2654&#34; title=&#34;tales-of-the-trade-new-home-for-dolphins&#34; src=&#34;/blog/blog/assets/tales-of-the-trade-new-home-for-dolphins.png&#34; alt=&#34;&#34; width=&#34;640&#34; height=&#34;2235&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tales of the Trade #2: The Oracle-Sun deal</title>
      <link>/blog/mysql/tales-of-the-trade-2-the-oracle-sun-deal/</link>
      <pubDate>Sun, 03 Jan 2010 14:31:23 +0000</pubDate>
      
      <guid>/blog/mysql/tales-of-the-trade-2-the-oracle-sun-deal/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-1855&#34; title=&#34;tales-of-the-trade-orace-sun-deal&#34; src=&#34;/blog/blog/assets/tales-of-the-trade-orace-sun-deal2.png&#34; alt=&#34;&#34; width=&#34;700&#34; height=&#34;691&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On free and open blog posts: this post is free</title>
      <link>/blog/mysql/on-free-and-open-blog-posts-this-post-is-free/</link>
      <pubDate>Wed, 21 Oct 2009 08:46:58 +0000</pubDate>
      
      <guid>/blog/mysql/on-free-and-open-blog-posts-this-post-is-free/</guid>
      <description>&lt;p&gt;I&#39;d like to criticize and stress some opinions on free and open blog posts, including such appearing on planet MySQL.&lt;/p&gt;
&lt;h4&gt;Some rants follow; skip if you&#39;re only after technical stuff&lt;/h4&gt;
&lt;h3&gt;1. On free reading&lt;/h3&gt;
&lt;p&gt;This post is completely free. You don&#39;t need to pay or register to read it, not will you require to pass personal details to comment.&lt;/p&gt;
&lt;p&gt;If you happen to see this post on some website, which only provides you with 1st couple of sentences, then asks you to login in order to view the complete text -- &lt;em&gt;you should know you need no registration to read this&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;Apparently some websites do human aggregation of articles. This in itself is just fine: it is a service. But I don&#39;t like the way they work: they publicly publish the headlines and snippets of aggregated articles, but upon clicking the title, you&#39;re asked to login. There is no reference to the original post; nor to the website where the post has been published; nor to the author.&lt;/p&gt;
&lt;p&gt;I&#39;ve noticed some of my articles get this treatment. I have no idea if website owners then make money by use of ad-words or whatever. I don&#39;t mind aggregating my posts - on the contrary: I&#39;m glad they&#39;re being circulated. But:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you&#39;re going to require login to read my posts:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either provide additional link to original posting, thereby giving free access&lt;/li&gt;
&lt;li&gt;Or only let your clients know about this post if they&#39;re already logged in; then too: respect the author by providing credit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&#39;t like the bait, where you publicly publish the title, then ask for login for the content. It makes the random reader confused, thinking the article is some super-secret-paying-gold-members-only stuff.&lt;/p&gt;
&lt;p&gt;It is not so. My posts are free for all to read, with great respect to the open source community and model, who made these posts possible in the first place.&lt;/p&gt;
&lt;h3&gt;2. On Planet MySQL non-open aggregation&lt;/h3&gt;
&lt;p&gt;I would sincerely appreciate it if &lt;a href=&#34;http://planet.mysql.com/&#34;&gt;Planet MySQL&lt;/a&gt; would only aggregate non-registration-required feeds. It feels very odd when I click a planet feed and then asked to fill in some details. In my opinion planet posts should be completely in the open.&lt;/p&gt;
&lt;p&gt;These posts are published by companies pushing commercial products. Rest assured this does not do good service to those companies: instead of openly telling me about their products (which is just fine, as long as it is related to general content the planet is all about), they lose me by asking for login. I encourage these companies to remove this requirement.&lt;/p&gt;
&lt;h3&gt;3. On Planet MySQL participating blogs, commenting closed, or closed for members&lt;/h3&gt;
&lt;p&gt;IÂ  encourage blogs aggregated in planet MySQL to allow for as open platform for commenting as possible. I think there are many common ways to allow for user comments: some use Google accounts, some OpenID, other yet only require an email address, and some just ask for CAPTCHA. These are all fine!&lt;/p&gt;
&lt;p&gt;Most will alow you to &lt;em&gt;choose&lt;/em&gt; from the most popular platforms. I wish to encourage websites participating in Planet to allow for this choice. If you&#39;re using the &#34;blog-a-dog-a-mob&#34; platform, please do not require that I be a member of this desolate platform; allow me to use my popular platform&#39;s account to comment.&lt;/p&gt;
&lt;p&gt;That is, there&#39;s nothing wrong with such websites, it&#39;s their right to be like that! (and perhaps their platform will not allow anything else). But then - I would rather not see them aggregated within planet MySQL. I already have accounts at MySQL, Google, WordPress, others. These are general-purpose accounts. I wouldn&#39;t want to create a website-specific account just for sake of commenting.&lt;/p&gt;
&lt;p&gt;And commenting is important. If someone publishes an article, aggregated on planet MySQL, that someone &lt;em&gt;expects&lt;/em&gt; the community to read through the article. But if he/she does not allow for &lt;em&gt;free and open feedback&lt;/em&gt;, what&#39;s the point?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With respect to anyone who is doing hard work to build, maintain and promote the Planet.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[UPDATE: I&#39;ve had a chat with one of the Planet&#39;s maintainers, who promised to check up on those websites closed by registration. Thank you!]&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#34;Vote for me...&#34; how to embed in WordPress</title>
      <link>/blog/mysql/vote-for-me-how-to-embed-in-wordpress/</link>
      <pubDate>Tue, 11 Aug 2009 06:55:14 +0000</pubDate>
      
      <guid>/blog/mysql/vote-for-me-how-to-embed-in-wordpress/</guid>
      <description>&lt;p&gt;[&lt;strong&gt;Clarification&lt;/strong&gt;: &lt;em&gt;I&#39;m not actually asking you to vote for me :D, the title just follows a previous post&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;Diego Medina has &lt;a href=&#34;http://fmpwizard.blogspot.com/2009/08/vote-for-me-widget-for-your-blog.html?showComment=1249965433072#c6520785617042085252&#34;&gt;published&lt;/a&gt; a JavaScript code that can be embedded in your blog posts, and which allows for voting on Planet MySQL from within your blog.&lt;/p&gt;
&lt;p&gt;Shared below is how to set this up for WordPress users. This is &lt;em&gt;not&lt;/em&gt; a WordPress plugin, mind you. You&#39;ll need to manually edit the WordPress template files (can be done from the &lt;strong&gt;Dashboard&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Appearance&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Editor&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Single post&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;The page you&#39;re likely to edit is &lt;strong&gt;single.php&lt;/strong&gt;, but depending on your template this can change. The explanation below assumes a single post page. This can also be worked out for your blog&#39;s home page, which lists several entries.&lt;/p&gt;
&lt;p&gt;Since there is no point in presenting the Planet MySQL voting widget for entries which do not relate to MySQL, the code verifies that the post is in the &lt;strong&gt;&#39;MySQL&#39;&lt;/strong&gt; category. You need to change this if your categorization differs. Mind that the category&#39;s name is case sensitive.&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&amp;lt;?php if ( in_category( &#39;MySQL&#39; )) { ?&amp;gt;
        &amp;lt;script language=&#34;JavaScript&#34;&amp;gt;&amp;lt;!--
        var planet = &#34;http://planet.mysql.com/entry/vote/?apivote=1&amp;amp;&#34;;
        var lk=encodeURIComponent(document.location);
        var thumb_up=&#34;&amp;lt;img src=\&#34;http://planet.mysql.com/images/thumbs_up_blue.jpg\&#34; border=\&#34;0\&#34; /&amp;gt;&#34;;
        var thumb_down=&#34;&amp;lt;img src=\&#34;http://planet.mysql.com/images/thumbs_down_blue.jpg\&#34; border=\&#34;0\&#34; /&amp;gt;&#34;;
        document.write(&#39;Vote on the &amp;lt;br /&amp;gt;&amp;lt;a href=\&#34;http://planet.mysql.com/\&#34; &amp;gt;Planet MySQL&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#39;);
        document.write(&#39;&amp;lt;a title=\&#34;Vote me Up on the Planet MySQL\&#34; href=\&#34;&#39; + planet + &#39;vote=1&amp;amp;url=&#39; + lk  +  &#39;\&#34;&amp;gt;&#39; + thumb_up + &#39;&amp;lt;/a&amp;gt;&#39;);
        document.write(&#39;&amp;amp;nbsp;&#39;);
        document.write(&#39;&amp;lt;a title=\&#34;Vote me Down on the Planet MySQL\&#34; href=\&#34;&#39; + planet + &#39;vote=-1&amp;amp;url=&#39; + lk  +  &#39;\&#34;&amp;gt;&#39; + thumb_down + &#39;&amp;lt;/a&amp;gt;&#39;);
        // --&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;?php } ?&amp;gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;in_category( &#39;MySQL&#39; )&lt;/strong&gt; function determines if the current post is relevant. You may also choose to show the widget based on tags, in which case you&#39;ll need to use &lt;strong&gt;get_the_tags()&lt;/strong&gt;, and verify your MySQL tag is in the resulting array.&lt;/p&gt;
&lt;p&gt;I chose to embed this just before the comments area.&lt;/p&gt;
&lt;p&gt;Good luck&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>