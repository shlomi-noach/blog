<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on code.openark.org</title>
    <link>/blog/tags/refactoring/</link>
    <description>Recent content in Refactoring on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 30 May 2012 09:03:18 +0000</lastBuildDate>
    <atom:link href="/blog/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting rid of huge ibdata file, no dump required, part II</title>
      <link>/blog/mysql/getting-rid-of-huge-ibdata-file-no-dump-required-part-ii/</link>
      <pubDate>Wed, 30 May 2012 09:03:18 +0000</pubDate>
      
      <guid>/blog/mysql/getting-rid-of-huge-ibdata-file-no-dump-required-part-ii/</guid>
      <description>&lt;p&gt;This post continues &lt;a href=&#34;http://code.openark.org/blog/mysql/getting-rid-of-huge-ibdata-file-no-dump-required&#34;&gt;Getting rid of huge ibdata file, no dump required, part I&lt;/a&gt;, where I describe way of converting your single-tablespace InnoDB database into a file-per-table one, without the pain of exporting and importing &lt;em&gt;everything at once&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In previous part we put aside the issue of foreign keys. We address this issue now.&lt;/p&gt;
&lt;h4&gt;What if my InnoDB tables have foreign keys?&lt;/h4&gt;
&lt;p&gt;MyISAM does not support them, so you can&#39;t just &lt;strong&gt;ALTER&lt;/strong&gt; an InnoDB table to MyISAM and back into InnoDB, and expect everything to work.&lt;/p&gt;
&lt;p&gt;Alas, this calls for additional steps (i.e. additional &lt;strong&gt;ALTER&lt;/strong&gt; commands). However, these still fall well under the concept of &lt;em&gt;&#34;do it one table at a time, then take time to recover your breath and replication lag&#34;&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Save , drop and restore your Foreign Keys setup&lt;/h4&gt;
&lt;p&gt;You can use &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt;&#39;s  &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/sql_foreign_keys.html&#34;&gt;sql_foreign_keys&lt;/a&gt; to get the full listing and create definition of your foreign keys. For example, assume we use the &lt;strong&gt;sakila&lt;/strong&gt; database:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT create_statement FROM common_schema.sql_foreign_keys WHERE TABLE_SCHEMA=&#39;sakila&#39; INTO OUTFILE &#39;/somewhere/safe/create_foreign_keys.sql&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;(replace &lt;strong&gt;TABLE_SCHEMA=&#39;sakila&#39;&lt;/strong&gt; with whatever you want).&lt;/p&gt;
&lt;p&gt;A sample output would be something like this (&lt;em&gt;note: no semicolon on end of line&lt;/em&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;ALTER TABLE `sakila`.`address` ADD CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `sakila`.`city` (`city_id`) ON DELETE RESTRICT ON UPDATE CASCADE
ALTER TABLE `sakila`.`city` ADD CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `sakila`.`country` (`country_id`) ON DELETE RESTRICT ON UPDATE CASCADE
ALTER TABLE `sakila`.`customer` ADD CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `sakila`.`address` (`address_id`) ON DELETE RESTRICT ON UPDATE CASCADE
ALTER TABLE `sakila`.`customer` ADD CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `sakila`.`store` (`store_id`) ON DELETE RESTRICT ON UPDATE CASCADE
ALTER TABLE `sakila`.`film` ADD CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `sakila`.`language` (`language_id`) ON DELETE RESTRICT ON UPDATE CASCADE
ALTER TABLE `sakila`.`film` ADD CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `sakila`.`language` (`language_id`) ON DELETE RESTRICT ON UPDATE CASCADE
...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once the above is in a safe place, you will want to DROP all of your foreign keys. Again, using &lt;em&gt;common_schema&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT drop_statement FROM common_schema.sql_foreign_keys WHERE TABLE_SCHEMA=&#39;sakila&#39;;
+-----------------------------------------------------------------------------------+
| drop_statement                                                                    |
+-----------------------------------------------------------------------------------+
| ALTER TABLE `sakila`.`address` DROP FOREIGN KEY `fk_address_city`                 |
| ALTER TABLE `sakila`.`city` DROP FOREIGN KEY `fk_city_country`                    |
| ALTER TABLE `sakila`.`customer` DROP FOREIGN KEY `fk_customer_address`            |
| ALTER TABLE `sakila`.`customer` DROP FOREIGN KEY `fk_customer_store`              |
| ALTER TABLE `sakila`.`film` DROP FOREIGN KEY `fk_film_language`                   |
| ALTER TABLE `sakila`.`film` DROP FOREIGN KEY `fk_film_language_original`          |
| ...                                                                               |
+-----------------------------------------------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You don&#39;t want to issue all these at once: do them one at a time, and wait for your slave to catch up.&lt;/p&gt;
&lt;p&gt;Once this is done, you can move on to the steps described in Part I of this post: converting tables to MyISAM, shutting down, removing InnoDB files, then converting back to InnoDB.&lt;/p&gt;
&lt;p&gt;And then, taking breath again, you must re-import the foreign keys. Use the &lt;strong&gt;ADD CONSTRAINT&lt;/strong&gt; commands you have saved earlier on. Again, one at a time, wait for slave to catch up.&lt;/p&gt;
&lt;p&gt;To reiterate, for each table you would take the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure the FK definition is safely stored somewhere&lt;/li&gt;
&lt;li&gt;STOP SLAVE&lt;/li&gt;
&lt;li&gt;Drop all table&#39;s foreign keys: ALTER TABLE ... DROP FOREIGN KEY ..., DROP FOREIGN KEY ...&lt;/li&gt;
&lt;li&gt;START SLAVE&lt;/li&gt;
&lt;li&gt;Wait for slave to catch up&lt;/li&gt;
&lt;li&gt;STOP SLAVE&lt;/li&gt;
&lt;li&gt;ALTER TABLE ... ENGINE=MyISAM (*)&lt;/li&gt;
&lt;li&gt;START SLAVE&lt;/li&gt;
&lt;li&gt;Wait for slave to catch up&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(*) Altering to MyISAM drops FK constraints, so the above could actually be done in one step. I&#39;m cautious and illustrate in two.&lt;/p&gt;
&lt;p&gt;Once all tables are altered, and InnoDB tablespace is removed, restoration is as follows: for each table,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;STOP SLAVE&lt;/li&gt;
&lt;li&gt;ALTER TABLE ... ENGINE=InnoDB [create options]&lt;/li&gt;
&lt;li&gt;START SLAVE&lt;/li&gt;
&lt;li&gt;Wait for slave to catch up&lt;/li&gt;
&lt;li&gt;STOP SLAVE&lt;/li&gt;
&lt;li&gt;ALTER TABLE ... ADD CONSTRAINT ..., ADD CONSTRAINT ...(+)&lt;/li&gt;
&lt;li&gt;START SLAVE&lt;/li&gt;
&lt;li&gt;Wait for slave to catch up&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(+) Alas, you can&#39;t convert to InnoDB and add constraints at the same time...&lt;/p&gt;
&lt;h4&gt;This is not entirely safe&lt;/h4&gt;
&lt;p&gt;A MyISAM slave to an InnoDB master with foreign keys is a tricky business. It really depends on the type of foreign keys you have and the use you make of them. See &lt;a title=&#34;Link to Impact of foreign keys absence on replicating slaves&#34; href=&#34;http://code.openark.org/blog/mysql/impact-of-foreign-keys-absence-on-replicating-slaves&#34; rel=&#34;bookmark&#34;&gt;Impact of foreign keys absence on replicating slaves&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting rid of huge ibdata file, no dump required</title>
      <link>/blog/mysql/getting-rid-of-huge-ibdata-file-no-dump-required/</link>
      <pubDate>Tue, 22 May 2012 07:33:05 +0000</pubDate>
      
      <guid>/blog/mysql/getting-rid-of-huge-ibdata-file-no-dump-required/</guid>
      <description>&lt;p&gt;You &lt;a href=&#34;http://code.openark.org/blog/mysql/upgrading-to-barracuda-getting-rid-of-huge-ibdata1-file&#34;&gt;have&lt;/a&gt; been &lt;a href=&#34;http://ronaldbradford.com/blog/leveraging-the-innodb-plugin-2011-02-11/&#34;&gt;told&lt;/a&gt; (guilty as charged), that the only way to get rid of the huge InnoDB tablespace file (commonly named &lt;strong&gt;ibdata1&lt;/strong&gt;), when moving to &lt;strong&gt;innodb_file_per_table&lt;/strong&gt;, is to do a logical dump of your data, completely erase everything, then import the dump.&lt;/p&gt;
&lt;p&gt;To quickly reiterate, you can only delete the &lt;strong&gt;ibdata1&lt;/strong&gt; file when no InnoDB tables exist. Delete this file with an existing InnoDB table, even a table in its own tablespace, and nothing ever works anymore.&lt;/p&gt;
&lt;h4&gt;The problem with the dump-based solution&lt;/h4&gt;
&lt;p&gt;The impact of doing a logical dump is often overwhelming. Well, the dump may be tolerable, but the restore is much longer. The real pain is that you can&#39;t do this one table at a time: you have to destroy everything before dropping the &lt;strong&gt;ibdata1&lt;/strong&gt; file; you then have to import everything.&lt;/p&gt;
&lt;p&gt;Perhaps the most common scenario is that we do the changes on a slave, so as not to completely shut down our database. This is nice; no one is aware of the shutdown process. However, Huston, we have a problem: we need to make sure we can keep up the binary logs on the master for the duration of the &lt;em&gt;entire process&lt;/em&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;A semi-solution for binary logs&lt;/h4&gt;
&lt;p&gt;You may get by by keeping the &lt;strong&gt;SQL_IO_THREAD&lt;/strong&gt; running on the slave while dump is taken (SQL thread is better turned off). If you&#39;re careful, you could do the same after restarting the database: you should still be able to acquire relay logs. With row based replication becoming more common, the problem of binary logs disk space returns: the logs (rather, log entries) are just so much larger!&lt;/p&gt;
&lt;p&gt;Either way, the process can takes long days, at the end of which your slave is up, but lags for long days behind.&lt;/p&gt;
&lt;h4&gt;Wishful thought: do it one table at a time&lt;/h4&gt;
&lt;p&gt;If we could do it one table at a time, and assuming our dataset is fairly split among several tables (i.e. not all of our &lt;strong&gt;500GB&lt;/strong&gt; of data is in one huge table), life would be easier: we could work on a single table, resume replication, let the slave catch up, then do the same for the next table.&lt;/p&gt;
&lt;p&gt;How? Didn&#39;t we just say one can only drop the &lt;strong&gt;ibdata1&lt;/strong&gt; file when no InnoDB tables exist?&lt;/p&gt;
&lt;h4&gt;Solution: do it one table at a time&lt;/h4&gt;
&lt;p&gt;I&#39;m going to illustrate what seems like a longer procedure. I will later show why it is not, in fact, longer.&lt;/p&gt;
&lt;p&gt;The idea is to first convert all your tables to MyISAM (Yay! A use for MyISAM!). That is, convert your tables one table at a time, using normal &lt;strong&gt;ALTER TABLE t ENGINE=MyISAM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please let go of the foreign keys issue right now. I will address it later, there&#39;s a lot to be addressed.&lt;/p&gt;
&lt;p&gt;So, on a slave:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;STOP SLAVE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;One &lt;strong&gt;ALTER TABLE ... ENGINE=MyISAM&lt;br /&gt;
&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;START SLAVE&lt;/strong&gt; again&lt;/li&gt;
&lt;li&gt;Wait for slave catch up&lt;/li&gt;
&lt;li&gt;GOTO &lt;strong&gt;1&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What do we end up with? A MyISAM only database. What do we do with it? Why, convert it back to InnoDB, of course!&lt;/p&gt;
&lt;p&gt;But, before that, we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Shut MySQL down&lt;/li&gt;
&lt;li&gt;Delete &lt;strong&gt;ibdata1&lt;/strong&gt; file, &lt;strong&gt;ib_logfile[01]&lt;/strong&gt; (i.e. delete all InnoDB files)&lt;/li&gt;
&lt;li&gt;Start MySQL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A new &lt;strong&gt;ibdata1&lt;/strong&gt; file, and new transaction log files will be created. Note: the new ibdata1 file is &lt;em&gt;small&lt;/em&gt;. Mission almost accomplished.&lt;/p&gt;
&lt;p&gt;We then:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;STOP SLAVE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Do one &lt;strong&gt;ALTER TABLE ... ENGINE=InnoDB [ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8 ...]&lt;br /&gt;
&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;START SLAVE&lt;/strong&gt; again&lt;/li&gt;
&lt;li&gt;Wait for slave catch up&lt;/li&gt;
&lt;li&gt;GOTO &lt;strong&gt;1&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What do we end up with? An InnoDB only database, with true file per table, and a small &lt;strong&gt;ibdata1&lt;/strong&gt; file. Space recovered!&lt;/p&gt;
&lt;h4&gt;The advantage of this method&lt;/h4&gt;
&lt;p&gt;The thing is, we resume replication after each table alteration. This means breaking the lag period into many smaller periods. While the &lt;em&gt;total&lt;/em&gt; runtime does not reduce, we do reduce the maximum lag time. And this makes for easier recovery: no need to store multitudes of binary logs!&lt;/p&gt;
&lt;h4&gt;So what about the foreign keys?&lt;/h4&gt;
&lt;p&gt;Phew. Continued next post.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>