<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ant on code.openark.org</title>
    <link>/blog/tags/ant/</link>
    <description>Recent content in Ant on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 20 Oct 2011 19:55:04 +0000</lastBuildDate>
    <atom:link href="/blog/tags/ant/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test-driven SQL development</title>
      <link>/blog/mysql/test-driven-sql-development/</link>
      <pubDate>Thu, 20 Oct 2011 19:55:04 +0000</pubDate>
      
      <guid>/blog/mysql/test-driven-sql-development/</guid>
      <description>&lt;p&gt;I&#39;m having a lot of fun writing &lt;a href=&#34;http://code.google.com/p/common-schema/&#34; rel=&#34;nofollow&#34;&gt;common_schema&lt;/a&gt;, an SQL project which includes views, tables and stored routines.&lt;/p&gt;
&lt;p&gt;As the project grows (and it&#39;s taking some interesting directions, in my opinion) more dependencies are being introduced, and a change to one routine or view may affect many others. This is why I&#39;ve turned the development on &lt;em&gt;common_schema&lt;/em&gt; to be &lt;em&gt;test driven&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, just how do you test drive an SQL project?&lt;/p&gt;
&lt;p&gt;Well, much like the way you test any other project in your favorite programming language. If its functions you&#39;re testing, that&#39;s all too familiar: functions get some input and provide some output. Hmmm, they might be changing SQL data during that time. With procedures it&#39;s slightly more complex, since they do not directly return output but result sets.&lt;/p&gt;
&lt;p&gt;Here&#39;s the testing scheme I use:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tests are divided to families. For example, there is a family of tests for the &lt;em&gt;eval()&lt;/em&gt; function.&lt;/li&gt;
&lt;li&gt;Each test in a family is responsible for checking the simplest, most &#34;atomic&#34; issue. This means many small tests.&lt;/li&gt;
&lt;li&gt;Each test can have a &lt;em&gt;&#34;pre-test&#34;&lt;/em&gt; step, which prepares the ground (for example, create a table and populate it)&lt;/li&gt;
&lt;li&gt;Likewise, a test can have a &lt;em&gt;&#34;post-test&#34;&lt;/em&gt; step, which is typically just cleanup code (since the test is already complete by the time the post step is invoked).&lt;/li&gt;
&lt;li&gt;Each test is an SQL file: a set of commands to be executed.&lt;/li&gt;
&lt;li&gt;A test may have an &lt;em&gt;&#34;expected output&#34;&lt;/em&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If no explicit &lt;em&gt;expected&lt;/em&gt; exists, the test is expected to return &lt;strong&gt;&#34;1&#34;&lt;/strong&gt; (just as the most basic &lt;em&gt;JUnit&lt;/em&gt; test assumes an &#34;assert true&#34;)&lt;/li&gt;
&lt;li&gt;A test family may also have &lt;em&gt;pre-&lt;/em&gt; and &lt;em&gt;post-&lt;/em&gt; steps.&lt;/li&gt;
&lt;li&gt;Any failure in any step fails the entire process. Failures may include:
&lt;ul&gt;
&lt;li&gt;Failure to prepare the grounds for a test or family of tests&lt;/li&gt;
&lt;li&gt;Failure in executing the test&lt;/li&gt;
&lt;li&gt;Mismatch between test&#39;s output and expected result.&lt;/li&gt;
&lt;li&gt;Failure in executing the &lt;em&gt;post-&lt;/em&gt; step (may indicate yet invalid test result not intercepted by the test)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;An example&lt;/h4&gt;
&lt;p&gt;The following image presents a single test family: the &lt;em&gt;eval&lt;/em&gt; family, testing the &lt;em&gt;eval()&lt;/em&gt; routine.&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/10/test-driven-sql-development-01.png&#34;&gt;&lt;img class=&#34;size-full wp-image-4205 alignnone&#34; title=&#34;test-driven-sql-development-01&#34; src=&#34;/blog/blog/assets/test-driven-sql-development-01.png&#34; alt=&#34;Test driven SQL development - sample&#34; width=&#34;198&#34; height=&#34;258&#34; /&gt;&lt;/a&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In this family, there are two tests.&lt;/li&gt;
&lt;li&gt;In both tests, we have a &lt;em&gt;pre-test&lt;/em&gt; step, and a test.&lt;/li&gt;
&lt;li&gt;We have no &lt;em&gt;post-test&lt;/em&gt; here.&lt;/li&gt;
&lt;li&gt;Nor do we have an &lt;em&gt;expected-output&lt;/em&gt; sample, which means the tests expect to return with &lt;strong&gt;&#34;1&#34;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;p&gt;But how are tests conducted? Via &lt;em&gt;mysql&lt;/em&gt;, of course. While tests are plain SQL text file, they are being executed against a running MySQL server using the &lt;em&gt;mysql&lt;/em&gt; client. It is given the test files as input, and its output is directed to file as well.&lt;/p&gt;
&lt;p&gt;This makes it very easy to code the test using a simple shell script. It takes a small measure of file iteration, process invocation, exit code check, and &lt;em&gt;diff&lt;/em&gt; execution.&lt;/p&gt;
&lt;p&gt;For example, to test &lt;em&gt;eval()&lt;/em&gt;&#39;s &lt;strong&gt;01&lt;/strong&gt; test, we first execute &lt;em&gt;mysql&lt;/em&gt; with &lt;strong&gt;01/pre.sql&lt;/strong&gt; as input. Assuming success, we execute &lt;em&gt;mysql&lt;/em&gt; again, this time with &lt;strong&gt;01/test.sql&lt;/strong&gt;. We capture the output of this execution, and compare it with &lt;em&gt;expected-output&lt;/em&gt;, or with &lt;strong&gt;&#34;1&#34;&lt;/strong&gt; when no &lt;em&gt;expected-output&lt;/em&gt; specified.&lt;/p&gt;
&lt;h4&gt;Tests pass, or no code!&lt;/h4&gt;
&lt;p&gt;Some &lt;strong&gt;12&lt;/strong&gt; years ago, I worked with a less-known version system called &lt;a href=&#34;http://aegis.sourceforge.net/documents.html&#34;&gt;aegis&lt;/a&gt;. The thing I remember most from &lt;em&gt;aegis&lt;/em&gt; was that it had a good tests infrastructure. Long before &#34;test-driven development&#34; was coined, or was even commonly practiced, &lt;em&gt;aegis&lt;/em&gt; supported tests right into your version control. &#34;Right into&#34;, in the sense that &lt;em&gt;you could not merge your code back to the baseline&lt;/em&gt; if it didn&#39;t pass all of the tests.&lt;/p&gt;
&lt;p&gt;I work with SVN for &lt;em&gt;common_schema&lt;/em&gt;, and I do not know of such an option in SVN. But I also use &lt;em&gt;ant&lt;/em&gt; to build this project, and the dependency is clear there: &lt;strong&gt;ant dist&lt;/strong&gt;, my target which creates the distribution files, is dependent on &lt;strong&gt;ant test&lt;/strong&gt;, the target which works out the tests.&lt;/p&gt;
&lt;p&gt;That is, you cannot generate the distribution files when tests fail.&lt;/p&gt;
&lt;h4&gt;Further notes&lt;/h4&gt;
&lt;p&gt;Since I&#39;m now retroactively patching tests for already existing functionality, calling it &lt;em&gt;test-driven&lt;/em&gt; development is an overstatement; nevertheless new tests are already proving invaluable when I keep changing and improving existing code. Suddenly dependent functionality no longer works as expected. What fun!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/common-schema/source/browse/trunk/common_schema/tests/test_all.sh&#34;&gt;The code&lt;/a&gt; for the testing suite is actually much shorter than this blog post.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>