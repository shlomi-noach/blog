<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on code.openark.org</title>
    <link>/blog/tags/sql/</link>
    <description>Recent content in Sql on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 28 Sep 2016 14:22:14 +0000</lastBuildDate>
    <atom:link href="/blog/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Three wishes for a new year</title>
      <link>/blog/mysql/three-wishes-for-a-new-year-4</link>
      <pubDate>Wed, 28 Sep 2016 14:22:14 +0000</pubDate>
      
      <guid>/blog/mysql/three-wishes-for-a-new-year-4</guid>
      <description>&lt;p&gt;(Almost) another new year by Jewish calendar. What do I wish for the following year?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;World peace&lt;/li&gt;
&lt;li&gt;Good health to all&lt;/li&gt;
&lt;li&gt;Relaxed GTID constraints&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;m still not using GTID, and still see operational issues with working with GTID. As a latest example, our new schema migration solution, gh-ost, allows us to test migrations in production, on replicas. The GTID catch? &lt;code&gt;gh-ost&lt;/code&gt;&amp;nbsp;has to write something to the binary log. Thus, it &#34;corrupts&#34; the replica with a bogus GTID entry that will never be met in another server, thus making said replica unsafe to promote. We can work around this, but...&lt;/p&gt;
&lt;p&gt;I understand the idea and need for the &lt;code&gt;Executed GTID Set&lt;/code&gt;. It will&amp;nbsp;certainly come in handy with multi-writer InnoDB Cluster. However for most use cases GTID poses a burden. The reason is that our topologies are imperfect, and we as humans are imperfect, and operations are most certainly imperfect. We may wish to operate on a replica: test something, by intention or mistake. We may wish to use a subchain as the seed for a new cluster split. We may wish to be able to write to downstream replicas. We may use a 3rd party tool that issues a &lt;code&gt;flush tables with read lock&lt;/code&gt;&amp;nbsp;without disabling &lt;code&gt;sql_log_bin&lt;/code&gt;. Things just happen.&lt;/p&gt;
&lt;p&gt;For that, I would like to suggest GTID control levels, such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Strict&lt;/em&gt;: same as Oracle&#39;s existing&amp;nbsp;implementation. Executed sets, purged sets, whatnot.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last executed&lt;/em&gt;: a mode where the only thing that counts is the last executed GTID value. If I repoint replica,&amp;nbsp;all it needs to check is &#34;hey this is my last executed GTID entry, give me the coordinates of yours. And, no, I don&#39;t care about comparing executed and purged sets, I will trust you and keep running from that point on&#34;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Declarative&lt;/em&gt;: GTIDs are generated, are visible in each and every binary log entry, but are completely ignored.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I realize Oracle MySQL GTID is out for some over 3 years now, but I&#39;m sorry - I still have reservations and see&amp;nbsp;use cases where I fear it will not serve me right.&lt;/p&gt;
&lt;p&gt;How about my previous years wishes? World peace and good health never came through, however:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My &lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year-2015&#34;&gt;2015 wish&lt;/a&gt; for &#34;decent, operations friendly built in online table refactoring&#34; was unmet, however &lt;code&gt;gh-ost&lt;/code&gt;&amp;nbsp;is a thing now and exceeds my expectations. No, really. Please come see &lt;a href=&#34;https://www.percona.com/live/plam16/sessions/introducing-gh-ost-triggerless-painless-trusted-online-schema-migrations&#34;&gt;Tom &amp;amp; myself present gh-ost&lt;/a&gt; and how it changed our migration paradigm.&lt;/li&gt;
&lt;li&gt;My &lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year-201&#34;&gt;2012 wish&lt;/a&gt; for &#34;decent, long waited for, implementation of &lt;a href=&#34;http://en.wikipedia.org/wiki/Window_function_%28SQL%29#Window_function&#34;&gt;Window Functions&lt;/a&gt; (aka Analytic Functions) for MySQL&#34; was met by&amp;nbsp;MariaDB&#39;s &lt;a href=&#34;https://mariadb.com/kb/en/mariadb/window-functions/&#34;&gt;window functions&lt;/a&gt;.&lt;br&gt;
Not strictly Window Functions, but Oracle MySQL 8.0 will &lt;a href=&#34;http://mysqlserverteam.com/mysql-8-0-labs-recursive-common-table-expressions-in-mysql-ctes/&#34;&gt;support CTE&lt;/a&gt; (hierarchial/recursive), worth a mention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you in Amsterdam!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL mini hack of the day, inverted IN clause</title>
      <link>/blog/2015/11/13/sql-mini-hack-of-the-day-inverted-in-clause/</link>
      <pubDate>Fri, 13 Nov 2015 17:28:09 +0000</pubDate>
      
      <guid>/blog/2015/11/13/sql-mini-hack-of-the-day-inverted-in-clause/</guid>
      <description>&lt;p&gt;We are used to issue queries with an &lt;strong&gt;IN&lt;/strong&gt; clause of the form:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;pre&gt;... where state in (&#39;started&#39;, &#39;completed&#39;, &#39;failed&#39;) ...&lt;/pre&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However I&#39;ve had a few cases where I used an inverted format. Here&#39;s one use case followed by an inverted &lt;strong&gt;IN&lt;/strong&gt; clause.&lt;/p&gt;
&lt;h3&gt;Dynamic query building&lt;/h3&gt;
&lt;p&gt;Say we have this function:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[code lang=&#34;golang&#34;]GetLaggingSlaves(clusterName string)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which, based on whether given &lt;strong&gt;clusterName&lt;/strong&gt; is empty or not, would return list of all lagging slaves, or only those in the given cluster, respectively:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT hostname FROM database_instance WHERE slave_lag_seconds &amp;gt; 60&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT hostname FROM database_instance WHERE cluster_name = &#39;mycluster:3306&#39; AND slave_lag_seconds &amp;gt; 60&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To avoid SQL injection you would create a prepared statement, but you don&#39;t want to copy+paste everything, and so you build your query dynamically based on the value of &lt;strong&gt;clusterName&lt;/strong&gt;. You want to end up with either:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT hostname FROM database_instance WHERE slave_lag_seconds &amp;gt; ?&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;, acceptableLag&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT hostname FROM database_instance WHERE cluster_name = ? AND slave_lag_seconds &amp;gt; ?&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;, clusterName, acceptableLag&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Dynamic query building is good practice, but a little pain (BTW I&#39;m designing a new, simple &amp;amp; non intrusive query builder for golang). Is there a way to just get away with one query that has it all?&lt;/p&gt;
&lt;p&gt;This is one option:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT hostname FROM database_instance WHERE (cluster_name = ? OR ? = &#39;&#39;) AND slave_lag_seconds &amp;gt; ?&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;,clusterName, clusterName, acceptableLag&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;and it is somewhat painful to list clusterName twice in the arguments list. This is where the inverted &lt;strong&gt;IN&lt;/strong&gt; clause kicks in. It will negate usage of an index, and may look strange at first glance, but as you get used to it it just becomes another pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT hostname FROM database_instance WHERE ? IN (cluster_name, &#39;&#39;) AND slave_lag_seconds &amp;gt; ?&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;, clusterName, acceptableLag&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;So when &lt;strong&gt;clusterName&lt;/strong&gt; is empty, all rows where &lt;strong&gt;slave_lag_seconds &amp;gt; acceptableLag&lt;/strong&gt; are fetched; when non empty, only those where &lt;strong&gt;cluster_name&lt;/strong&gt; equals our value.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Leader election using MySQL</title>
      <link>/blog/2015/10/14/leader-election-using-mysql/</link>
      <pubDate>Wed, 14 Oct 2015 07:52:21 +0000</pubDate>
      
      <guid>/blog/2015/10/14/leader-election-using-mysql/</guid>
      <description>&lt;p&gt;Being a stateful, centralized datastore, MySQL can serve in negotiating leadership: a mechanism to elect a single service out of multiple services; moreover, a mechanism to promote a new leader should the existing leader cease to function.&lt;/p&gt;
&lt;h3&gt;What of Zookeeper?&lt;/h3&gt;
&lt;p&gt;Zookeeper makes for an excellent leader election mechanism. This is one of the most recognized uses for Zookeeper. It has HA via multiple nodes &amp;amp; quorum,  ephemeral nodes, all you need. To achieve similar benefits with MySQL you&#39;d need to use Galera or NDB Cluster; so why not use Zk?&lt;/p&gt;
&lt;p&gt;The use case at hand is &lt;strong&gt;&lt;a href=&#34;https://github.com/outbrain/orchestrator&#34;&gt;orchestrator&lt;/a&gt;&lt;/strong&gt;, a multi-node, mostly stateless service that happens to use MySQL as backend datastore. Ir relies on MySQL to exist in backend. It already &lt;em&gt;expects it to be there&lt;/em&gt;. If the MySQL server is down, so is the service, effectively. In such case it doesn&#39;t hurt adding another dependency on MySQL; this does not reduce HA. You need to take care of MySQL HA anyhow so there&#39;s no additional cost. In fact, going to Zookeeper makes the additional cost as you introduce a new component to the system that can be avoided.&lt;/p&gt;
&lt;h3&gt;Terms of the solution&lt;/h3&gt;
&lt;p&gt;Our proposed solution offers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single leader election out of multiple nodes&lt;/li&gt;
&lt;li&gt;Leader actively reaffirms its leadership periodically&lt;/li&gt;
&lt;li&gt;Timeout based re-election: decision to re-elect new leader based on the fact current leader has not reaffirmed its leadership over X seconds&lt;/li&gt;
&lt;li&gt;A way to forcibly assume leadership for a specific node&lt;/li&gt;
&lt;li&gt;A way to forcibly call for re-elections by demoting existing leader&lt;/li&gt;
&lt;li&gt;A node/service can easily tell whether it&#39;s the leader or not&lt;/li&gt;
&lt;li&gt;Anyone can tell who the leader is&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQL solution&lt;/h3&gt;
&lt;p&gt;The solution is composed of a single table and a set of queries which implement the above offers. We assume a service can uniquely identify itself; this is easy to achieve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If services are running from different hosts (as should be the case, this is service HA), use hostname for ID
&lt;ul&gt;
&lt;li&gt;But what if the service restarts? Are you good with calling this &#34;the same service&#34; or is this now a new service running on the same host?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In such case use combination of hostname &amp;amp; OS process ID
&lt;ul&gt;
&lt;li&gt;Or generate a random token upon startup&lt;/li&gt;
&lt;li&gt;Or use startup timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever solution you pick, make sure it is human readable, such that it is easy to tell &lt;em&gt;which service is the leader&lt;/em&gt;. This helps operations. We note this as &lt;strong&gt;service_id&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Table&lt;/h4&gt;
&lt;p&gt;The following table will have a single row; the &lt;strong&gt;service_id&lt;/strong&gt; in that row is the active leader.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;
CREATE TABLE service_election (
  anchor tinyint(3) unsigned NOT NULL,
  service_id varchar(128) NOT NULL,
  last_seen_active timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (anchor)
) ENGINE=InnoDB
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Attempt election&lt;/h4&gt;
&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;All services issue the following, periodically. Say every service issues this once per second:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;insert ignore into service_election (
	anchor, service_id, last_seen_active
) values (
	1, &#39;my_service_number_7&#39;, now()
) on duplicate key update
	service_id = if(last_seen_active &amp;amp;lt; now() - interval 20 second, values(service_id), service_id),
	last_seen_active = if(service_id = values(service_id), values(last_seen_active), last_seen_active)
;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Replace &lt;strong&gt;&#39;my_service_number_7&#39;&lt;/strong&gt; with specific &lt;strong&gt;service_id&lt;/strong&gt; per service.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above is the most complex query in our solution; breakdown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume timeout is set for &lt;strong&gt;20&lt;/strong&gt; seconds&lt;/li&gt;
&lt;li&gt;The first ever service (&lt;strong&gt;my_service_number_7&lt;/strong&gt;) succeeds in registering (inserting its own &lt;strong&gt;service_id&lt;/strong&gt; into the table)&lt;/li&gt;
&lt;li&gt;The next time this service issues the query, it finds that it is already the owner, hence updates &lt;strong&gt;last_seen_active&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;And while it is alive and keeps on polling, it remains the leader.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Immediately following, another service (&lt;strong&gt;my_service_number_12&lt;/strong&gt;) does not update anything: since &lt;strong&gt;last_seen_active &amp;lt; now() - interval 20 second&lt;/strong&gt; is &lt;strong&gt;false&lt;/strong&gt;, &lt;strong&gt;service_id&lt;/strong&gt; is unchanged, nor is &lt;strong&gt;last_seen_active&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Assuming said service (&lt;strong&gt;my_service_number_7&lt;/strong&gt;) has died and hasn&#39;t injected anything in the last &lt;strong&gt;20&lt;/strong&gt; seconds, a different service will inject its own &lt;strong&gt;service_id&lt;/strong&gt; as well as update &lt;strong&gt;last_seen_active&lt;/strong&gt;. It will become the leader.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Forcibly assume leadership&lt;/h4&gt;
&lt;p&gt;Make a certain service the leader:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;replace into service_election (
        anchor, service_id, last_seen_active
    ) values (
        1, &#39;my_service_number_12&#39;, now()
    )
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next time &lt;strong&gt;my_service_number_12&lt;/strong&gt; attempts to register its own leadership, it finds out it&#39;s &lt;em&gt;already&lt;/em&gt; the leader and updates &lt;strong&gt;last_seen_active&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Force re-elections&lt;/h4&gt;
&lt;p&gt;The next service to attempt election will succeed after this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;delete from service_election;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Am I the leader?&lt;/h4&gt;
&lt;p&gt;A service can query as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;select count(*) as is_leader from service_election where anchor=1 and service_id=&#39;my_service_number_7&#39;;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Who is the leader?&lt;/h4&gt;
&lt;p&gt;This is of course very simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;select max(service_id) as leader from service_election where anchor=1;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3&gt;What of GET_LOCK()?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html#function_get-lock&#34;&gt;GET_LOCK()&lt;/a&gt; allows one to acquire a helper-lock of arbitrary name; this lock is reserved as long as the connection that acquired it lives. No other connection can acquire lock of same name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT GET_LOCK(&amp;quot;my_service_leadership&amp;quot;, 0)&lt;/pre&gt;&lt;br /&gt;
Returns &lt;strong&gt;1&lt;/strong&gt; on success, &lt;strong&gt;0&lt;/strong&gt; on failure to obtain lock.&lt;/blockquote&gt;
&lt;p&gt;This supposedly makes a much simpler leader election mechanism. However I don&#39;t like it for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You must allocate a dedicated connection that lives for the duration of your service
&lt;ul&gt;
&lt;li&gt;This doesn&#39;t play too well with ORMs or typical connection pools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no visibility (&amp;lt; MySQL 5.7) into &lt;em&gt;who&lt;/em&gt; is holding the lock. You only know that it&#39;s being held.&lt;/li&gt;
&lt;li&gt;If your service hangs (but does not die), the lock is still being held. There is no &#34;keepalive&#34; requirement on the lock&#39;s side.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tool of the day: q</title>
      <link>/blog/2013/08/08/tool-of-the-day-q/</link>
      <pubDate>Thu, 08 Aug 2013 11:26:02 +0000</pubDate>
      
      <guid>/blog/2013/08/08/tool-of-the-day-q/</guid>
      <description>&lt;p&gt;If you work with command line and know your SQL, &lt;strong&gt;q&lt;/strong&gt; is a great tool to use:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/harelba/q&#34;&gt;&lt;strong&gt;q&lt;/strong&gt;&lt;/a&gt; allows you to query your text files or standard input with SQL. You can:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT c1, COUNT(*) FROM /home/shlomi/tmp/my_file.csv GROUP BY c1&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you can:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT all.c2 FROM /tmp/all_engines.txt AS all LEFT JOIN /tmp/innodb_engines.txt AS inno USING (c1, c2) WHERE inno.c3 IS NULL&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you can also combine with your favourite shell commands and tools:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;grep &#34;my_term&#34; /tmp/my_file.txt | q &#34;SELECT c4 FROM - JOIN /home/shlomi/static.txt USING (c1)&#34; | xargs touch&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some of &lt;strong&gt;q&lt;/strong&gt;&#39;s functionality (and indeed, SQL functionality) can be found in command line tools. You can use &lt;strong&gt;grep&lt;/strong&gt; for pseudo &lt;strong&gt;WHERE&lt;/strong&gt; filtering, or &lt;strong&gt;cut&lt;/strong&gt; for projecting, but you can only get so far with &lt;strong&gt;cat my_file.csv | sort | uniq -c | sort -n&lt;/strong&gt;. SQL is way more powerful for working with tabulated data, and so &lt;strong&gt;q&lt;/strong&gt; makes for a great addition into one&#39;s toolbox.&lt;/p&gt;
&lt;p&gt;The tool is authored by my colleague &lt;a href=&#34;https://github.com/harelba&#34;&gt;Harel Ben-Attia&lt;/a&gt;, and is in daily use over at our company (it is in fact installed on all production servers).&lt;/p&gt;
&lt;p&gt;It is of course free and open source (&lt;a href=&#34;https://github.com/harelba/q&#34;&gt;get it on GitHub&lt;/a&gt;, where you can also find documentation), and very easy to setup. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Merging tables with INSERT...ON DUPLICATE KEY UPDATE</title>
      <link>/blog/2013/02/21/merging-tables-with-insert-on-duplicate-key-update/</link>
      <pubDate>Thu, 21 Feb 2013 14:12:48 +0000</pubDate>
      
      <guid>/blog/2013/02/21/merging-tables-with-insert-on-duplicate-key-update/</guid>
      <description>&lt;p&gt;Had a case recently where I had to merge data from two identically structured tables containing nearly identical data.&lt;/p&gt;
&lt;p&gt;&#34;Nearly identical&#34; meaning most table data is identical in both; sometimes a row is missing from one of the tables; sometimes same row (according to PK) appears in both, but some columns are NULL is one tables (while others can be NULL in the second).&lt;/p&gt;
&lt;p&gt;Otherwise no contradicting data: it was not possible for some data to be &#34;3&#34; in one table and &#34;4&#34; in the other.&lt;/p&gt;
&lt;h4&gt;How do you create a merge of the tables, such that all missing rows are completed, and NULLs replaced by actual values when possible?&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://www.percona.com/doc/percona-toolkit/2.1/pt-table-sync.html&#34;&gt;pt-table-sync&lt;/a&gt; comes to mind: one can do a bidirectional syncing of two tables, and actually stating how to resolve ambiguities (like &#34;greater value wins&#34;). Very powerful! An example would be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;pt-table-sync --bidirectional --conflict-column=a --conflict-comparison=greatest --tables ...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;However I didn&#39;t actually have any problem with the tables themselves. The two tables were just fine as they were; missing or NULL data does not indicate an error on their part. I wanted to get their merge. &lt;em&gt;pt-table-sync&lt;/em&gt; is still up for the job: we can duplicate them, merge on the copy... But I prefer a query over an external script when possible.&lt;/p&gt;
&lt;h4&gt;INSERT...ON DUPLICATE KEY UPDATE&lt;/h4&gt;
&lt;p&gt;This &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/insert-on-duplicate.html&#34;&gt;MySQL-specific syntax&lt;/a&gt; is actually quite powerful. It basically says &#34;if the insert fails due to unique constraint, you get a chance to update the row causing the failure&#34;. But it also allows for smart setting of the column via the &lt;strong&gt;VALUES()&lt;/strong&gt; clause. Let&#39;s present some sample data and then see the solution.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Assume the following table definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;create table t1 (
  pkdt datetime,
  pki int,
  a int,
  b int,
  c int,
  primary key (pkdt, pki)
);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Same structure holds for &lt;strong&gt;t1&lt;/strong&gt;, &lt;strong&gt;t2&lt;/strong&gt; and &lt;strong&gt;tmerge&lt;/strong&gt; -- our target table. Looking at table data we have:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&amp;gt; select * from t1;
+---------------------+-----+------+------+------+
| pkdt                | pki | a    | b    | c    |
+---------------------+-----+------+------+------+
| 2012-01-01 00:00:00 |   1 |    4 |    5 |    6 |
| 2012-01-02 00:00:00 |   2 | NULL |    5 |    6 |
| 2012-01-04 00:00:00 |   4 |    4 | NULL | NULL |
| 2012-01-05 00:00:00 |   5 | NULL |    8 | NULL |
+---------------------+-----+------+------+------+

&amp;gt; select * from t2;
+---------------------+-----+------+------+------+
| pkdt                | pki | a    | b    | c    |
+---------------------+-----+------+------+------+
| 2012-01-01 00:00:00 |   1 |    4 | NULL |    6 |
| 2012-01-03 00:00:00 |   3 |    4 |    5 |    6 |
| 2012-01-04 00:00:00 |   4 |    4 |    5 |    6 |
| 2012-01-05 00:00:00 |   5 |    7 | NULL |    9 |
+---------------------+-----+------+------+------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can see a row with &lt;strong&gt;pki=2&lt;/strong&gt; appears in &lt;strong&gt;t1&lt;/strong&gt; but not in &lt;strong&gt;t2&lt;/strong&gt;; a row with &lt;strong&gt;pki=3&lt;/strong&gt; appears in &lt;strong&gt;t2&lt;/strong&gt; but not in &lt;strong&gt;t2&lt;/strong&gt;, and various &lt;strong&gt;NULL&lt;/strong&gt;s appear throughout the rows that are shared.&lt;/p&gt;
&lt;p&gt;To get the shared table, we throw in the data from &lt;strong&gt;t1&lt;/strong&gt; and &lt;strong&gt;t2&lt;/strong&gt; into &lt;strong&gt;tmerge&lt;/strong&gt;, in such way that a real value overwrites a &lt;strong&gt;NULL&lt;/strong&gt;, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;insert into tmerge select * from t1;

insert into tmerge select * from t2
on duplicate key update
  a = &lt;strong&gt;ifnull&lt;/strong&gt;(tmerge.a, &lt;strong&gt;values&lt;/strong&gt;(a)),
  b = &lt;strong&gt;ifnull&lt;/strong&gt;(tmerge.b, &lt;strong&gt;values&lt;/strong&gt;(b)),
  c = &lt;strong&gt;ifnull&lt;/strong&gt;(tmerge.c, &lt;strong&gt;values&lt;/strong&gt;(c))
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So even while I&#39;m inserting values to &lt;strong&gt;tmerge&lt;/strong&gt;, I&#39;m able to check for current value, compared to the value I wish to insert, and have time to make a decision. This is really cool! The result:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&amp;gt; select * from tmerge;
+---------------------+-----+------+------+------+
| pkdt                | pki | a    | b    | c    |
+---------------------+-----+------+------+------+
| 2012-01-01 00:00:00 |   1 |    4 |    5 |    6 |
| 2012-01-02 00:00:00 |   2 | NULL |    5 |    6 |
| 2012-01-03 00:00:00 |   3 |    4 |    5 |    6 |
| 2012-01-04 00:00:00 |   4 |    4 |    5 |    6 |
| 2012-01-05 00:00:00 |   5 |    7 |    8 |    9 |
+---------------------+-----+------+------+------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just what we wanted: all possible rows inside; real value takes over &lt;strong&gt;NULL&lt;/strong&gt; whenever possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hierarchical data in INFORMATION_SCHEMA and derivatives</title>
      <link>/blog/2013/01/08/hierarchical-data-in-information_schema-and-derivatives/</link>
      <pubDate>Tue, 08 Jan 2013 13:19:56 +0000</pubDate>
      
      <guid>/blog/2013/01/08/hierarchical-data-in-information_schema-and-derivatives/</guid>
      <description>&lt;p&gt;Just how often do you encounter hierarchical data? Consider a table with some parent-child relation, like the this classic &lt;strong&gt;employee&lt;/strong&gt; table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE employee (
  employee_id INT UNSIGNED PRIMARY KEY,
  employee_name VARCHAR(100),
  manager_id INT UNSIGNED,
  CONSTRAINT `employee_manager_fk` FOREIGN KEY (manager_id) REFERENCES employee (employee_id)
) engine=innodb
;
+-------------+---------------+------------+
| employee_id | employee_name | manager_id |
+-------------+---------------+------------+
|           1 | Rachel        |       NULL |
|           2 | John          |          1 |
|           3 | Stan          |          1 |
|           4 | Naomi         |          2 |
+-------------+---------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Questions like &lt;em&gt;&#34;What is the (nested) list of employees managed by Rachel?&#34;&lt;/em&gt; or &lt;em&gt;&#34;Get Naomi&#39;s managers chain of command&#34;&lt;/em&gt; are classical questions. There are sometimes dependencies: if John leaves, does that mean Naomi loses her job, or does she get promoted, or something else? If John and Stan are on sick leave, does Rachel have any reason to come to work?&lt;/p&gt;
&lt;p&gt;Hierarchical data is not limited to a single-table structure. Sometimes it takes a combination of a few tables (it&#39;s just a &lt;strong&gt;JOIN&lt;/strong&gt;) to make out the parent-child relation.&lt;/p&gt;
&lt;p&gt;Hierarchical data is difficult to manage with SQL. This is especially true for MySQL, which does not support the &lt;strong&gt;WITH&lt;/strong&gt; recursive query syntax.&lt;/p&gt;
&lt;h4&gt;Where can you find hierarchical data?&lt;/h4&gt;
&lt;p&gt;Even if you do not provide it by yourself, MySQL&#39;s &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; has some for you. Partly obvious, partly implicit, here are some examples:&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Foreign Keys&lt;/h4&gt;
&lt;p&gt;This is probably the most obvious hierarchical dataset in &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;. The &lt;strong&gt;KEY_COLUMN_USAGE&lt;/strong&gt; table lists the table dependencies based on foreign key constraints. It&#39;s a bit confusing, as it also lists &lt;strong&gt;UNIQUE&lt;/strong&gt; constraints, and the complete list of FKs are in &lt;strong&gt;REFERENTIAL_CONSTRAINTS&lt;/strong&gt; -- but the latter table does not list the dependencies. You typically want to join both tables to get the complete information.&lt;/p&gt;
&lt;p&gt;So, taking &lt;strong&gt;sakila&lt;/strong&gt;&#39;s DVD rental shop sample,  &lt;strong&gt;film_actor&lt;/strong&gt; table depends on &lt;strong&gt;film&lt;/strong&gt; as well as on &lt;strong&gt;actor&lt;/strong&gt; via foreign keys. &lt;strong&gt;film&lt;/strong&gt; can depend on the &lt;strong&gt;category&lt;/strong&gt; table, etc. The hierarchies can turn to be very complex, with multiple roots an very deep branches.&lt;/p&gt;
&lt;p&gt;Dependency questions are very clear when speaking of foreign keys: what happens when we delete some &lt;strong&gt;film&lt;/strong&gt; record? Does it hold that we also delete all references to that film on &lt;strong&gt;film_actor&lt;/strong&gt;? Or do we deny deletion of said film in such case?&lt;/p&gt;
&lt;h4&gt;Redundant Keys&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;KEY (col1, col2)&lt;/strong&gt; makes the &lt;strong&gt;KEY (col1)&lt;/strong&gt; redundant. The latter is not strictly required (though you may wish to keep it for covering index performance reason). The list of &lt;em&gt;dominant-redundant&lt;/em&gt; keys makes for hierarchical data. It is typically very shallow (keys can only be redundant within the scope of a single table -- how deep can you get with such small dataset?)&lt;/p&gt;
&lt;p&gt;There is no immediate reference in &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; as for redundant keys, but it can be inferred by self joining the &lt;strong&gt;STATISTICS&lt;/strong&gt; table onto itself. It is not immediate, since you need to do some aggregation and check for particular cases. For example, &lt;strong&gt;UNIQUE KEY (col1, col2)&lt;/strong&gt; is actually made redundant by &lt;strong&gt;UNIQUE KEY (col1)&lt;/strong&gt;, which is just the opposite from our previous example.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/common-schema&#34;&gt;common_schema&lt;/a&gt; provides with this implicit information now turned explicit, in the for of the &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/redundant_keys.html&#34;&gt;redundant_keys&lt;/a&gt; view: the &lt;strong&gt;redundant_index_name&lt;/strong&gt; and &lt;strong&gt;dominant_index_name&lt;/strong&gt; columns make for parent-child relationship.&lt;/p&gt;
&lt;p&gt;Dependency questions are a bit redundant here: the general objective is to &lt;em&gt;not have&lt;/em&gt; dependencies. So get rid of redundant keys - and do so wisely. There&#39;s a good discussion of index redundancies on &lt;strong&gt;redundant_keys&lt;/strong&gt;&#39;s &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/redundant_keys.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Locked transactions&lt;/h4&gt;
&lt;p&gt;A transaction is locked. It is locked because another transaction holds some locks needed by locked transaction. But this transaction in itself can obtain locks needed by yet other transactions. And so we can get a hierarchy of locked transaction. The &#34;parent&#34; is the one blocking the &#34;child&#34;.&lt;/p&gt;
&lt;p&gt;Combining InnoDB&#39;s &lt;strong&gt;INNODB_TRX&lt;/strong&gt; - &lt;strong&gt;INNODB_LOCK_WAITS&lt;/strong&gt; - &lt;strong&gt;INNODB_TRX&lt;/strong&gt; tables, we get this information. &lt;em&gt;common_schema&lt;/em&gt; provides with this inferred data in the form of &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/innodb_locked_transactions.html&#34;&gt;innodb_locked_transactions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hierarchies in locked-transactions could be deep, and they can most commonly be &lt;em&gt;wide&lt;/em&gt;. A single transaction can lock dozens of others.&lt;/p&gt;
&lt;p&gt;Dependency questions are &lt;em&gt;&#34;would killing this transaction release all other waiting transactions?&#34;&lt;/em&gt;; &lt;em&gt;&#34;What is &lt;/em&gt;the one&lt;em&gt; transaction I need to kill in order to release the bottleneck?&#34;&lt;/em&gt;; &lt;em&gt;&#34;Why are these transactions related in the first place? Can I remove this dependency?&#34;&lt;/em&gt;. etc.&lt;/p&gt;
&lt;h4&gt;Locks&lt;/h4&gt;
&lt;p&gt;You can look at the same dataset as above from a different angle. Instead of looking at transaction-lock-transaction, you can look at lock-transaction-lock. Which locks are causing other locks to be held? This is counter-intuitive to our understanding of how things work, but is valid nonetheless.&lt;/p&gt;
&lt;h4&gt;Views&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;VIEW&lt;/strong&gt; can query a table or another view. It can join multiple views. This hierarchy of view-reading-from-view can turn out to be complex; if not for the human mind then for the optimizer.&lt;/p&gt;
&lt;p&gt;Surprisingly, there is no data in &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;, other than the &lt;strong&gt;CREATE VIEW&lt;/strong&gt; clause, to help us out in resolving these dependencies. Even more surprising is MySQL&#39;s own inability to get clear conclusions itself. The view definition clause is parsed, re-parsed and re-evaluated whenever information on &#34;parent&#34; views is required. For example, try to &lt;strong&gt;DESCRIBE&lt;/strong&gt; a view. How does MySQL deduce the data types of columns? It dives in head first into the hierarchy, crawls and parses view definitions, till it resolves the answer. The &lt;a href=&#34;http://code.openark.org/forge/mycheckpoint&#34;&gt;mycheckpoint&lt;/a&gt; projects uses view hierarchies intensively. It draws powers from the hierarchy and produces some surprising data (&lt;a href=&#34;http://code.openark.org/forge/mycheckpoint/documentation/generating-google-charts&#34;&gt;charts&lt;/a&gt; from raw data, for example). But it also suffers from MySQL indirect inference of views. Checking up a deep-nested &lt;em&gt;mycehckpoint&lt;/em&gt; view in &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; makes for a heavyweight dive for MySQL into locks and table handles.&lt;/p&gt;
&lt;p&gt;Dependency questions are &lt;em&gt;&#34;what is the type of this column?&#34;&lt;/em&gt;, &lt;em&gt;&#34;are there any &lt;strong&gt;TEMPTABLE&lt;/strong&gt; views along the chain of execution? Or are all &lt;strong&gt;MERGE&lt;/strong&gt; views?&#34;&lt;/em&gt; and more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pop quiz: funny syntax</title>
      <link>/blog/2012/11/05/pop-quiz-funny-syntax/</link>
      <pubDate>Mon, 05 Nov 2012 20:22:15 +0000</pubDate>
      
      <guid>/blog/2012/11/05/pop-quiz-funny-syntax/</guid>
      <description>&lt;p&gt;The following questions are of little importance, yet I find them entertaining. I stumbled upon these while developing QueryScript.&lt;/p&gt;
&lt;p&gt;Can you guess the results of the following statements?&lt;/p&gt;
&lt;h4&gt;Pop quiz 1&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @x := 7;
SELECT ++@x;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is the computation result? What will be the value of &lt;strong&gt;@x&lt;/strong&gt;?&lt;/p&gt;
&lt;h4&gt;Pop quiz 2&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @ := 4;
SELECT @ + @&#39;&#39; + @``&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is the computation result?&lt;/p&gt;
&lt;h4&gt;Pop quiz 3&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @a := 2;
SELECT @a = @&#39;a&#39; = @`a`&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do we get &lt;strong&gt;TRUE&lt;/strong&gt; or &lt;strong&gt;FALSE&lt;/strong&gt;? When?&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Hints&lt;/h4&gt;
&lt;p&gt;Consider the following queries as hints to the above questions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT +++++-@x;
SELECT @ = @&#39;&#39;, @ = @``
SELECT (@a = @&#39;a&#39;) = @`a`&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Answers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pop quiz 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;++@x&lt;/strong&gt; is interpreted as &lt;strong&gt;+(+(@x))&lt;/strong&gt;, which is in turn evaluated as &lt;strong&gt;0+(0+(@x))&lt;/strong&gt;. No relation to &lt;strong&gt;C&lt;/strong&gt;&#39;s &lt;strong&gt;++&lt;/strong&gt; operator. &lt;strong&gt;@x&lt;/strong&gt; is unchanged.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pop quiz 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;&lt;strong&gt;@x&lt;/strong&gt; is the same as &lt;strong&gt;@&#39;x&#39;&lt;/strong&gt; and as &lt;strong&gt;@`x`&lt;/strong&gt;. What&#39;s funny is that one is allowed to create the empty-named user defined variable &lt;strong&gt;@&#39;&#39;&lt;/strong&gt;. Makes for a weird looking syntax, but nothing special about it. Computation result is &lt;strong&gt;12&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pop quiz 3&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;padding-left: 30px;&#34;&gt;We&#39;ve already established that &lt;strong&gt;@a&lt;/strong&gt;, &lt;strong&gt;@&#39;a&#39;&lt;/strong&gt; and &lt;strong&gt;@`a`&lt;/strong&gt; are the same, I just used this notation for adding pepper to the quiz. The real question is whether &lt;strong&gt;2 = 2 = 2&lt;/strong&gt; holds true.  It does not. There is no 3-way comparison. All comparisons are in pairs, which is why the expression evaluates as &lt;strong&gt;(2 = 2) = 2&lt;/strong&gt;, leading to &lt;strong&gt;1 = 2&lt;/strong&gt;, &lt;strong&gt;&#34;1&#34;&lt;/strong&gt; being the &lt;strong&gt;TRUE&lt;/strong&gt; value of &lt;strong&gt;(2 = 2)&lt;/strong&gt;. The only value of &lt;strong&gt;@a&lt;/strong&gt; for which the expression holds true is &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Three wishes for a new year</title>
      <link>/blog/2012/09/16/three-wishes-for-a-new-year-201/</link>
      <pubDate>Sun, 16 Sep 2012 06:20:59 +0000</pubDate>
      
      <guid>/blog/2012/09/16/three-wishes-for-a-new-year-201/</guid>
      <description>&lt;div&gt;
&lt;p&gt;Another new year by Jewish calendar. What do I wish for the following year?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;World peace&lt;/li&gt;
&lt;li&gt;Good health to all&lt;/li&gt;
&lt;li&gt;Get a decent, long waited for, implementation of &lt;a href=&#34;http://en.wikipedia.org/wiki/Window_function_%28SQL%29#Window_function&#34;&gt;Window Functions&lt;/a&gt; (aka Analytic Functions) for MySQL.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I mean, I like &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/group-by-functions.html#function_group-concat&#34;&gt;&lt;strong&gt;GROUP_CONCAT&lt;/strong&gt;&lt;/a&gt;, and the many hacks it provides: [&lt;a href=&#34;http://code.openark.org/blog/mysql/selecting-a-specific-non-aggregated-column-data-in-group-by&#34;&gt;1&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/unwalking-a-string-with-group_concat&#34;&gt;2&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/rotating-sql-graphs-horizontally&#34;&gt;3&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/sql-graphics&#34;&gt;4&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/sql-pie-chart&#34;&gt;5&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/sql-multi-line-chart&#34;&gt;6&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/checking-for-string-permutation&#34;&gt;7&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/sql-selecting-top-n-records-per-group&#34;&gt;8&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/another-use-for-top-n-records-per-group-query&#34;&gt;9&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/sql-selecting-top-n-records-per-group-another-solution&#34;&gt;10&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/generating-google-line-charts-with-sql-part-i&#34;&gt;11&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/how-common_schema-splits-tables-internals&#34;&gt;12&lt;/a&gt;]. But it makes for a poor substitution to Window Functions, and only solves a subset of issues.&lt;/p&gt;
&lt;p&gt;My wishes in previous two years [&lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year&#34;&gt;2010&lt;/a&gt;], [&lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year-2&#34;&gt;2011&lt;/a&gt;] have not come true. I&#39;m still willing to settle for two out of three.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SQL: selecting top N records per group, another solution</title>
      <link>/blog/2012/08/21/sql-selecting-top-n-records-per-group-another-solution/</link>
      <pubDate>Tue, 21 Aug 2012 06:49:43 +0000</pubDate>
      
      <guid>/blog/2012/08/21/sql-selecting-top-n-records-per-group-another-solution/</guid>
      <description>&lt;p&gt;A while back I presented &lt;a title=&#34;Permanent Link to SQL: selecting top N records per group&#34; href=&#34;http://code.openark.org/blog/mysql/sql-selecting-top-n-records-per-group&#34; rel=&#34;bookmark&#34;&gt;SQL: selecting top N records per group&lt;/a&gt;, a &#34;give me the top &lt;strong&gt;5&lt;/strong&gt; countries in each continent&#34; type of query, and which used an external &lt;em&gt;numbers&lt;/em&gt; table and a lot of tedious casting.&lt;/p&gt;
&lt;p&gt;Here&#39;s another solution I came up with (&lt;a href=&#34;#update&#34;&gt;*&lt;/a&gt;). Still using &lt;strong&gt;GROUP_CONCAT&lt;/strong&gt; (how else?), but no external table and no casting. The query outputs the largest &lt;strong&gt;5&lt;/strong&gt; countries (by surface area) per continent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  Continent,
  Name,
  SurfaceArea,
  Population
FROM
  world.Country,
  (
    SELECT 
      GROUP_CONCAT(top_codes_per_group) AS top_codes
    FROM
      (
        SELECT 
          SUBSTRING_INDEX(GROUP_CONCAT(&lt;strong&gt;Code ORDER BY SurfaceArea DESC&lt;/strong&gt;), &#39;,&#39;, &lt;strong&gt;5&lt;/strong&gt;) AS top_codes_per_group
        FROM
          world.Country
        GROUP BY
          Continent
      ) s_top_codes_per_group
  ) s_top_codes
WHERE
  FIND_IN_SET(Code, top_codes)
ORDER BY
  Continent,
  SurfaceArea DESC
;

+---------------+----------------------------------------------+-------------+------------+
| Continent     | Name                                         | SurfaceArea | Population |
+---------------+----------------------------------------------+-------------+------------+
| Asia          | China                                        |  9572900.00 | 1277558000 |
| Asia          | India                                        |  3287263.00 | 1013662000 |
| Asia          | Kazakstan                                    |  2724900.00 |   16223000 |
| Asia          | Saudi Arabia                                 |  2149690.00 |   21607000 |
| Asia          | Indonesia                                    |  1904569.00 |  212107000 |
| Europe        | Russian Federation                           | 17075400.00 |  146934000 |
| Europe        | Ukraine                                      |   603700.00 |   50456000 |
| Europe        | France                                       |   551500.00 |   59225700 |
| Europe        | Spain                                        |   505992.00 |   39441700 |
| Europe        | Sweden                                       |   449964.00 |    8861400 |
| North America | Canada                                       |  9970610.00 |   31147000 |
| North America | United States                                |  9363520.00 |  278357000 |
| North America | Greenland                                    |  2166090.00 |      56000 |
| North America | Mexico                                       |  1958201.00 |   98881000 |
| North America | Nicaragua                                    |   130000.00 |    5074000 |
| Africa        | Sudan                                        |  2505813.00 |   29490000 |
| Africa        | Algeria                                      |  2381741.00 |   31471000 |
| Africa        | Congo, The Democratic Republic of the        |  2344858.00 |   51654000 |
| Africa        | Libyan Arab Jamahiriya                       |  1759540.00 |    5605000 |
| Africa        | Chad                                         |  1284000.00 |    7651000 |
| Oceania       | Australia                                    |  7741220.00 |   18886000 |
| Oceania       | Papua New Guinea                             |   462840.00 |    4807000 |
| Oceania       | New Zealand                                  |   270534.00 |    3862000 |
| Oceania       | Solomon Islands                              |    28896.00 |     444000 |
| Oceania       | New Caledonia                                |    18575.00 |     214000 |
| Antarctica    | Antarctica                                   | 13120000.00 |          0 |
| Antarctica    | French Southern territories                  |     7780.00 |          0 |
| Antarctica    | South Georgia and the South Sandwich Islands |     3903.00 |          0 |
| Antarctica    | Heard Island and McDonald Islands            |      359.00 |          0 |
| Antarctica    | Bouvet Island                                |       59.00 |          0 |
| South America | Brazil                                       |  8547403.00 |  170115000 |
| South America | Argentina                                    |  2780400.00 |   37032000 |
| South America | Peru                                         |  1285216.00 |   25662000 |
| South America | Colombia                                     |  1138914.00 |   42321000 |
| South America | Bolivia                                      |  1098581.00 |    8329000 |
+---------------+----------------------------------------------+-------------+------------+
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In bold are the conditions by which we nominate our selected rows (condition is &lt;strong&gt;SurfaceArea DESC&lt;/strong&gt;, number of rows is &lt;strong&gt;5&lt;/strong&gt;, so 5 largest countries).&lt;/p&gt;
&lt;h4&gt;&lt;!--more--&gt;What&#39;s going on here?&lt;/h4&gt;
&lt;p&gt;So the inner &lt;strong&gt;s_top_codes_per_group&lt;/strong&gt; query produces the codes for largest countries per continent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;+---------------------+
| top_codes_per_group |
+---------------------+
| CHN,IND,KAZ,SAU,IDN |
| RUS,UKR,FRA,ESP,SWE |
| CAN,USA,GRL,MEX,NIC |
| SDN,DZA,COD,LBY,TCD |
| AUS,PNG,NZL,SLB,NCL |
| ATA,ATF,SGS,HMD,BVT |
| BRA,ARG,PER,COL,BOL |
+---------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The wrapping &lt;strong&gt;s_top_codes&lt;/strong&gt; query concatenates all the above to one long text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;+---------------------------------------------------------------------------------------------------------------------------------------------+
| top_codes                                                                                                                                   |
+---------------------------------------------------------------------------------------------------------------------------------------------+
| CHN,IND,KAZ,SAU,IDN,RUS,UKR,FRA,ESP,SWE,CAN,USA,GRL,MEX,NIC,SDN,DZA,COD,LBY,TCD,AUS,PNG,NZL,SLB,NCL,ATA,ATF,SGS,HMD,BVT,BRA,ARG,PER,COL,BOL |
+---------------------------------------------------------------------------------------------------------------------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the final query simply demands that &lt;strong&gt;Code&lt;/strong&gt; must be found within this string, by calling upon &lt;strong&gt;FIND_IN_SET(Code, top_codes)&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This solution works for &lt;strong&gt;PRIMARY KEY&lt;/strong&gt;s or otherwise &lt;strong&gt;UNIQUE KEY&lt;/strong&gt;s of all sorts (a &lt;strong&gt;CHAR(3)&lt;/strong&gt; in our example, but same for integers etc.)&lt;/li&gt;
&lt;li&gt;And you still have to have a sufficient &lt;strong&gt;group_concat_max_len&lt;/strong&gt; (see &lt;a title=&#34;Those oversized, undersized variables defaults&#34; href=&#34;http://code.openark.org/blog/mysql/those-oversized-undersized-variables-defaults&#34;&gt;this post&lt;/a&gt;). You &lt;em&gt;must&lt;/em&gt; have a large enough value to fit in the very long text you may be expecting in &lt;strong&gt;s_top_codes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Performance-wise there are full scans here, as well as string searching.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&#34;update&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;* UPDATE&lt;/h4&gt;
&lt;p&gt;I should pay closer attention. &lt;a href=&#34;http://www.xaprb.com/blog/2006/12/07/how-to-select-the-firstleastmax-row-per-group-in-sql/#comment-13284&#34;&gt;This comment&lt;/a&gt; had it &lt;strong&gt;5&lt;/strong&gt; years ago.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL joins: ON vs. USING vs. Theta-style</title>
      <link>/blog/2012/07/11/mysql-joins-on-vs-using-vs-theta-style/</link>
      <pubDate>Wed, 11 Jul 2012 06:54:20 +0000</pubDate>
      
      <guid>/blog/2012/07/11/mysql-joins-on-vs-using-vs-theta-style/</guid>
      <description>&lt;p&gt;What is the difference between the following three syntaxes?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM film JOIN film_actor ON (film.film_id = film_actor.film_id)
SELECT * FROM film JOIN film_actor USING (film_id)
SELECT * FROM film, film_actor WHERE film.film_id = film_actor.film_id&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The difference is mostly syntactic sugar, but with a couple interesting notes.&lt;/p&gt;
&lt;p&gt;To put names, the first two are called &lt;strong&gt;&#34;ANSI-style&#34;&lt;/strong&gt; while the third is called &lt;strong&gt;&#34;Theta-style&#34;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Theta style&lt;/h4&gt;
&lt;p&gt;On the &lt;strong&gt;FROM&lt;/strong&gt; clause, tables are listed as if with Cartesian products, and the &lt;strong&gt;WHERE&lt;/strong&gt; clause specifies how the join should take place.&lt;/p&gt;
&lt;p&gt;This is considered to be the &#34;old&#34; style. It is somewhat confusing to read. Consider the following query:&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; * &lt;strong&gt;FROM&lt;/strong&gt; film, film_actor &lt;strong&gt;WHERE&lt;/strong&gt; film.film_id = film_actor.film_id &lt;strong&gt;AND&lt;/strong&gt; actor_id = 17 &lt;strong&gt;AND&lt;/strong&gt; film.length &amp;gt; 120&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above lists films over &lt;strong&gt;120&lt;/strong&gt; minutes in length, in which actor &lt;strong&gt;#17&lt;/strong&gt; plays. Never mind the results; what about the query? Being just one part of the &lt;strong&gt;WHERE&lt;/strong&gt; clause, a one out of three elements in the &lt;strong&gt;AND&lt;/strong&gt; expression, the join equation gets lost. It is difficult to find and isolate the terms which make for table joins as opposed to terms which filter out rows. In the above example it is still relatively easy to point out. How about a query with &lt;strong&gt;5&lt;/strong&gt; tables and a &lt;strong&gt;20&lt;/strong&gt; terms &lt;strong&gt;WHERE&lt;/strong&gt; clause?&lt;/p&gt;
&lt;h4&gt;ANSI style: ON&lt;/h4&gt;
&lt;p&gt;With &lt;strong&gt;JOIN&lt;/strong&gt; ... &lt;strong&gt;ON&lt;/strong&gt;, one separates the join terms from the filtering terms. Rewriting the previous example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; * &lt;strong&gt;FROM&lt;/strong&gt; film &lt;strong&gt;JOIN&lt;/strong&gt; film_actor &lt;strong&gt;ON&lt;/strong&gt; (film.film_id = film_actor.film_id) &lt;strong&gt;WHERE&lt;/strong&gt; actor_id = 17 &lt;strong&gt;AND&lt;/strong&gt; film.length &amp;gt; 120&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is quite clear now what belongs to what.&lt;/p&gt;
&lt;p&gt;Note: the parenthesis are not strictly required in the &lt;strong&gt;ON&lt;/strong&gt; clause. I personally like to use them: it makes for an even greater distinction between query parts. SQL syntax is such a mess!&lt;/p&gt;
&lt;h4&gt;ANSI style: USING&lt;/h4&gt;
&lt;p&gt;Is the special case where we join tables on columns of the same name, we can make a shortcut and use &lt;strong&gt;USING&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;SELECT&lt;/strong&gt; * &lt;strong&gt;FROM&lt;/strong&gt; film &lt;strong&gt;JOIN&lt;/strong&gt; film_actor &lt;strong&gt;USING&lt;/strong&gt; (film_id) &lt;strong&gt;WHERE&lt;/strong&gt; actor_id = 17 &lt;strong&gt;AND&lt;/strong&gt; film.length &amp;gt; 120&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This time the parenthesis are required (I&#39;m not sure why the difference on that part).&lt;/p&gt;
&lt;p&gt;This is mainly a nicety, less words to type, and a resulting prettified query. But also note a couple differences:&lt;/p&gt;
&lt;h4&gt;USING vs. ON&lt;/h4&gt;
&lt;p&gt;The following is valid:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT film.title, film_id FROM film JOIN film_actor USING (film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the following is not:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT film.title, film_id FROM film JOIN film_actor ON (film.film_id = film_actor.film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120;
&lt;strong&gt;ERROR 1052 (23000): Column &#39;film_id&#39; in field list is ambiguous&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since &lt;strong&gt;USING&lt;/strong&gt; &#34;knows&#34; the film_id column is shared between both tables, it doesn&#39;t mind if we ask it without specifying an exact table. It would be the same value anyway!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ON&lt;/strong&gt; is not as smart and requires further clarifications: which table exactly do you want?&lt;/p&gt;
&lt;p&gt;And the above is actually the result of this interesting phenomena: when using &lt;strong&gt;USING&lt;/strong&gt;, the column only appears &lt;em&gt;once&lt;/em&gt; in the result set:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM film JOIN film_actor USING (film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120 LIMIT 1\G
*************************** 1. row ***************************
             &lt;strong&gt;film_id&lt;/strong&gt;: 96
               title: BREAKING HOME
         description: A Beautiful Display of a Secret Agent And a Monkey who must Battle a Sumo Wrestler in An Abandoned Mine Shaft
        release_year: 2006
         language_id: 1
original_language_id: NULL
     rental_duration: 4
         rental_rate: 2.99
              length: 169
    replacement_cost: 21.99
              rating: PG-13
    special_features: Trailers,Commentaries
         last_update: 2006-02-15 05:03:42
            actor_id: 17
         last_update: 2006-02-15 05:05:03&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But joining on &lt;strong&gt;ON&lt;/strong&gt;, we get this column &lt;em&gt;twice&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM film JOIN film_actor ON film.film_id = film_actor.film_id WHERE actor_id = 17 AND film.length &amp;gt; 120 LIMIT 1\G
*************************** 1. row ***************************
             &lt;strong&gt;film_id&lt;/strong&gt;: 96
               title: BREAKING HOME
         description: A Beautiful Display of a Secret Agent And a Monkey who must Battle a Sumo Wrestler in An Abandoned Mine Shaft
        release_year: 2006
         language_id: 1
original_language_id: NULL
     rental_duration: 4
         rental_rate: 2.99
              length: 169
    replacement_cost: 21.99
              rating: PG-13
    special_features: Trailers,Commentaries
         last_update: 2006-02-15 05:03:42
            actor_id: 17
             &lt;strong&gt;film_id&lt;/strong&gt;: 96
         last_update: 2006-02-15 05:05:03&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Behind the scenes&lt;/h4&gt;
&lt;p&gt;The news is that MySQL treats all in the exact same way. With the kind help of &lt;strong&gt;EXPLAIN EXTENDED&lt;/strong&gt;, we see that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;EXPLAIN EXTENDED SELECT film.title, film_id FROM film JOIN film_actor &lt;strong&gt;USING&lt;/strong&gt; (film_id) WHERE actor_id = 17 AND film.length &amp;gt; 120\G
*************************** 1. row ***************************
...
2 rows in set, 1 warning (0.00 sec)

root@mysql-5.1.51&amp;gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: select `sakila`.`film`.`title` AS `title`,`sakila`.`film`.`film_id` AS `film_id` 
         from `sakila`.`film` join `sakila`.`film_actor` 
         where (
                 &lt;strong&gt;(`sakila`.`film`.`film_id` = `sakila`.`film_actor`.`film_id`)&lt;/strong&gt; 
                 and (`sakila`.`film_actor`.`actor_id` = 17) 
                 and (`sakila`.`film`.`length` &amp;gt; 120)
               )&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;All queries are translated internally to &lt;em&gt;theta-style&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This post only discusses inner joins. With outer joins the situation is somewhat different. Read &lt;a href=&#34;http://www.mysqldiary.com/mysql-left-join/&#34;&gt;this post&lt;/a&gt; for more insight.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Auto caching tables</title>
      <link>/blog/2012/03/06/auto-caching-tables/</link>
      <pubDate>Tue, 06 Mar 2012 15:18:36 +0000</pubDate>
      
      <guid>/blog/2012/03/06/auto-caching-tables/</guid>
      <description>&lt;p&gt;Is there a way to create a caching table, some sort of a materialized view, such that &lt;em&gt;upon selecting&lt;/em&gt; from that table, its data is validated/invalidated?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint&lt;/em&gt;: yes.&lt;/p&gt;
&lt;p&gt;But to elaborate the point: say I have some table &lt;strong&gt;data_table&lt;/strong&gt;. Can I rewrite all my queries which access &lt;strong&gt;data_table&lt;/strong&gt; to read from some &lt;strong&gt;autocache_data_table&lt;/strong&gt;, but have nothing changed in the query itself? No caveats, no additional &lt;strong&gt;WHERE&lt;/strong&gt;s, and still have that &lt;strong&gt;autocache_data_table&lt;/strong&gt; provide with the correct data, dynamically updated by some rule &lt;em&gt;of our choice&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;And: no &lt;em&gt;crontab&lt;/em&gt;, no &lt;em&gt;event scheduler&lt;/em&gt;, and no funny triggers on &lt;strong&gt;data_table&lt;/strong&gt;? In such way that invalidation/revalidation occurs &lt;em&gt;upon &lt;strong&gt;SELECT&lt;/strong&gt;&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Well, yes.&lt;/p&gt;
&lt;p&gt;This post is long, but I suggest you read it through to understand the mechanism, it will be worthwhile.&lt;/p&gt;
&lt;h4&gt;Background&lt;/h4&gt;
&lt;p&gt;The following derives from my long research on how to provide better, faster and &lt;em&gt;safer&lt;/em&gt; access to &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; tables. It is however not limited to this exact scenario, and in this post I provide with a simple, general purpose example. I&#39;ll have more to share about &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; specific solutions shortly.&lt;/p&gt;
&lt;p&gt;I was looking for a server side solution which would not require query changes, apart from directing the query to other tables. Solution has to be supported by all standard MySQL installs; so: no plugins, no special rebuilds.&lt;!--more--&gt;&lt;/p&gt;
&lt;h4&gt;Sample data&lt;/h4&gt;
&lt;p&gt;I&#39;ll explain by walking through the solution. Let&#39;s begin with some sample table:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE sample_data (
  id INT UNSIGNED NOT NULL PRIMARY KEY,
  dt DATETIME,
  msg VARCHAR(128) CHARSET ascii
);

INSERT INTO sample_data VALUES (1, NOW(), &#39;sample txt&#39;);
INSERT INTO sample_data VALUES (2, NOW(), &#39;sample txt&#39;);
INSERT INTO sample_data VALUES (3, NOW(), &#39;sample txt&#39;);

SELECT * FROM sample_data;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this simplistic example, I wish to create a construct which looks exactly like &lt;strong&gt;sample_data&lt;/strong&gt;, but which caches data according to some heuristic. It will, in fact, cache the entire content of &lt;strong&gt;sample_data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That much is not a problem: just create another table to cache the data:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE TABLE cache_sample_data LIKE sample_data;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big question is: how do you make the table invalidate itself while &lt;strong&gt;SELECT&lt;/strong&gt;ing from it?&lt;/p&gt;
&lt;p&gt;Here&#39;s the deal. I&#39;ll ask for your patience while I draw the outline, and start with failed solutions. By the end, everything will work.&lt;/p&gt;
&lt;h4&gt;Failed attempt: purge rows from the table even while reading it&lt;/h4&gt;
&lt;p&gt;My idea is to create a stored function which purges the &lt;strong&gt;cache_sample_data&lt;/strong&gt; table, then fills in with fresh data, according to some heuristic. Something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DELIMITER $$

CREATE FUNCTION `revalidate_cache_sample_data`() RETURNS tinyint unsigned
    MODIFIES SQL DATA
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
  if(rand() &amp;gt; 0.1) then
    return 0; -- simplistic heuristic
  end if;

  DELETE FROM cache_sample_data;
  INSERT INTO cache_sample_data SELECT * FROM sample_data;
  RETURN 0;
END $$

DELIMITER ;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the function uses some heuristic. It&#39;s a funny &lt;strong&gt;RAND()&lt;/strong&gt; in our case; you will want to check up on time stamps, or some flags, what have you. But this is not the important part here, and I want to keep the focus on the main logic.&lt;/p&gt;
&lt;p&gt;Upon deciding the table needs refreshing, the function purges all rows, then copies everything from &lt;strong&gt;sample_data&lt;/strong&gt;. Sounds fair enough?&lt;/p&gt;
&lt;p&gt;Let&#39;s try and invoke it. Just write some query by hand:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT revalidate_cache_sample_data();
+--------------------------------+
| revalidate_cache_sample_data() |
+--------------------------------+
|                              &lt;strong&gt;0&lt;/strong&gt; |
+--------------------------------+

mysql&amp;gt; SELECT revalidate_cache_sample_data();
+--------------------------------+
| revalidate_cache_sample_data() |
+--------------------------------+
|                              &lt;strong&gt;0&lt;/strong&gt; |
+--------------------------------+

mysql&amp;gt; SELECT revalidate_cache_sample_data();
+--------------------------------+
| revalidate_cache_sample_data() |
+--------------------------------+
|                              &lt;strong&gt;1&lt;/strong&gt; |
+--------------------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;First two invocations - nothing. The third one indicated a revalidation of cache data. Let&#39;s verify:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT * FROM cache_sample_data;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK, seems like the function works.&lt;/p&gt;
&lt;p&gt;We now gather some courage, and try combining calling to this function even while SELECTing from the cache table, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  cache_sample_data.*
FROM
  cache_sample_data,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To explain what happens in the above query, consider its &lt;a href=&#34;http://code.openark.org/blog/mysql/slides-from-my-talk-programmatic-queries-things-you-can-code-with-sql&#34;&gt;programmatic nature&lt;/a&gt;: we create a derived table, populated by the function&#39;s result. That means the function is invoked in order to generate the derived table. The derived table itself must be materialized before the query begins execution, and so it is that we first invoke the function, then make the &lt;strong&gt;SELECT&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Don&#39;t open the champagne yet. While the above paragraph is correct, we are deceived: in this last invocation, the function did &lt;strong&gt;not&lt;/strong&gt; attempt a revalidation. The &lt;strong&gt;RAND()&lt;/strong&gt; function just didn&#39;t provide with the right value.&lt;/p&gt;
&lt;p&gt;Let&#39;s try again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  cache_sample_data.*
FROM
  cache_sample_data,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;
&lt;strong&gt;ERROR 1442 (HY000): Can&#39;t update table &#39;cache_sample_data&#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aha! Bad news. The MySQL manual says on &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/stored-program-restrictions.html&#34;&gt;Restrictions on Stored Programs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;A stored function or trigger cannot modify a table that is already being used (for reading or writing) by the statement that invoked the function or trigger.&lt;/blockquote&gt;
&lt;h4&gt;Anyone to the rescue?&lt;/h4&gt;
&lt;p&gt;I was quite upset. Can we not make this work? At sorrow times like these, one reflects back on words of wiser people. What would &lt;a href=&#34;http://rpbouman.blogspot.com/&#34;&gt;Roland Bouman&lt;/a&gt; say on this?&lt;/p&gt;
&lt;p&gt;Oh, yes; he would say: &lt;em&gt;&#34;we can use a &lt;strong&gt;FEDERATED&lt;/strong&gt; table which connect onto itself, thus bypass the above restriction&#34;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;strong&gt;FEDERATED&lt;/strong&gt; is by default disabled nowadays; I cannot rely on its existence. Besides, to use &lt;strong&gt;FEDERATED&lt;/strong&gt; one has to fill in passwords and stuff. Definitely not an out-of-the-box solution in this case.&lt;/p&gt;
&lt;p&gt;Few more days gone by. Decided the problem cannot be solved. And then it hit me.&lt;/p&gt;
&lt;h4&gt;MyISAM to the rescue&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;MyISAM&lt;/strong&gt;&lt;/em&gt;? Really?&lt;/p&gt;
&lt;p&gt;Yes, and not only &lt;strong&gt;MyISAM&lt;/strong&gt;, but also its cousin: it&#39;s long abandoned cousin, forgotten once &lt;strong&gt;views&lt;/strong&gt; and &lt;strong&gt;partitions&lt;/strong&gt; came into MySQL. &lt;strong&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/merge-storage-engine.html&#34;&gt;MERGE&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MERGE&lt;/strong&gt; reflects the data contained within &lt;strong&gt;MyISAM&lt;/strong&gt; tables. Perhaps the most common use for &lt;strong&gt;MERGE&lt;/strong&gt; is to work out partitioned-like table of records, with &lt;strong&gt;MyISAM&lt;/strong&gt; table-per month, and an overlooking &lt;strong&gt;MERGE&lt;/strong&gt; table dynamically adding and removing tables from its view.&lt;/p&gt;
&lt;p&gt;But I intend for &lt;strong&gt;MERGE&lt;/strong&gt; a different use: just be an identical reflection of &lt;strong&gt;cache_sample_data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So we must work out the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;ALTER TABLE &lt;strong&gt;cache_sample_data&lt;/strong&gt; ENGINE=&lt;strong&gt;MyISAM&lt;/strong&gt;;
CREATE TABLE &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt; LIKE cache_sample_data;
ALTER TABLE &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt; ENGINE=&lt;strong&gt;MERGE&lt;/strong&gt; &lt;strong&gt;UNION=(cache_sample_data)&lt;/strong&gt;;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I just want to verify the new table is setup correctly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT * FROM cache_sample_data_wrapper;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems fine.&lt;/p&gt;
&lt;p&gt;So the next step is what makes the difference: the two tables are &lt;em&gt;not the same&lt;/em&gt;. One &lt;em&gt;relies on the other&lt;/em&gt;, but they are distinct. Our function &lt;strong&gt;DELETE&lt;/strong&gt;s from and &lt;strong&gt;INSERT&lt;/strong&gt;s to &lt;strong&gt;cached_sample_data&lt;/strong&gt;, but it does &lt;em&gt;not affect, nor lock&lt;/em&gt;, &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We now rewrite our query to read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT
  cache_sample_data_wrapper.*
FROM
  &lt;strong&gt;cache_sample_data_wrapper&lt;/strong&gt;,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This query is perfectly valid. It works. To illustrate, I do:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;-- Try this a few times till RAND() is lucky:

&lt;strong&gt;TRUNCATE&lt;/strong&gt; cache_sample_data;

SELECT
  cache_sample_data_wrapper.*
FROM
  cache_sample_data_wrapper,
  (SELECT revalidate_cache_sample_data()) AS select_revalidate
;
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa! Where did all this data come from? Didn&#39;t we just &lt;strong&gt;TRUNCATE&lt;/strong&gt; the table?&lt;/p&gt;
&lt;p&gt;The query worked. The function re-populated &lt;strong&gt;cache_sample_data&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;The final touch&lt;/h4&gt;
&lt;p&gt;Isn&#39;t the above query just &lt;em&gt;beautiful&lt;/em&gt;? I suppose not many will share my opinion. What happened to my declaration that &lt;em&gt;&#34;the original query need not be changed, apart from querying a different table&#34;&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Yes, indeed. It&#39;s now time for the final touch. There&#39;s nothing amazing in this step, but we all know the way it is packaged is what makes the sale. We will now use &lt;em&gt;views&lt;/em&gt;. We use two of them since a view must not contain a &lt;em&gt;subquery&lt;/em&gt; in the &lt;strong&gt;FROM&lt;/strong&gt; clause. Here goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;CREATE OR REPLACE VIEW &lt;strong&gt;revalidate_cache_sample_data_view&lt;/strong&gt; AS
  SELECT revalidate_cache_sample_data()
;

CREATE OR REPLACE VIEW &lt;strong&gt;autocache_sample_data&lt;/strong&gt; AS
  SELECT
    cache_sample_data_wrapper.*
  FROM
    cache_sample_data_wrapper,
    revalidate_cache_sample_data_view
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, we can make a very simple query like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM &lt;strong&gt;autocache_sample_data&lt;/strong&gt;;
--
-- &lt;strong&gt;&lt;span style=&#34;color: #ff9900;&#34;&gt;Magic in work now!&lt;/span&gt;&lt;/strong&gt;
--
+----+---------------------+------------+
| id | dt                  | msg        |
+----+---------------------+------------+
|  1 | 2011-11-24 11:01:30 | sample txt |
|  2 | 2011-11-24 11:01:30 | sample txt |
|  3 | 2011-11-24 11:01:30 | sample txt |
+----+---------------------+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much as we would query the original &lt;strong&gt;sample_data&lt;/strong&gt; table.&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;So what have we got? A stored routine, a &lt;strong&gt;MyISAM&lt;/strong&gt; table, a &lt;strong&gt;MERGE&lt;/strong&gt; table and two views. Quite a lot of constructs just to cache a table! But a beautiful cache access: &lt;em&gt;plain old SQL queries&lt;/em&gt;. The flow looks like this:&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&#34;http://code.openark.org/blog/wp-content/uploads/2011/11/autocache_flow.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-4463&#34; title=&#34;autocache flow chart&#34; src=&#34;/blog/blog/assets/autocache_flow.png&#34; alt=&#34;&#34; width=&#34;835&#34; height=&#34;625&#34; /&gt;&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Our cache table is a &lt;strong&gt;MyISAM&lt;/strong&gt; table. It can get corrupted, which is bad. But not completely bad: it&#39;s nothing more than a cache; we can throw away its entire data, and revalidate. We can actually ask the function to revalidate (say, pass a parameter).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL/QueryScript use case: DELETE all but top N records per group</title>
      <link>/blog/2012/02/09/mysqlqueryscript-use-case-delete-all-but-top-n-records-per-group/</link>
      <pubDate>Thu, 09 Feb 2012 10:33:08 +0000</pubDate>
      
      <guid>/blog/2012/02/09/mysqlqueryscript-use-case-delete-all-but-top-n-records-per-group/</guid>
      <description>&lt;p&gt;Some administrative tasks can be simplified by using &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script.html&#34;&gt;common_schema/QueryScript&lt;/a&gt;. I&#39;m collecting a bunch of these for documentation. Here&#39;s one for example:&lt;/p&gt;
&lt;p&gt;The DBA/developer has the task of retaining only top &lt;strong&gt;3&lt;/strong&gt; most populated countries per continent. That is, she has to &lt;strong&gt;DELETE 4th, 5th, 6th&lt;/strong&gt;, ... most populated counties in each continent.&lt;/p&gt;
&lt;p&gt;Is it possible to work out with a single query? Yes. But the query is not pretty. In fact, it is quite complicated, and either involves unintuitive subqueries, or &lt;a href=&#34;http://code.openark.org/blog/mysql/sql-selecting-top-n-records-per-group&#34;&gt;unintuitive hacks&lt;/a&gt;. A normal DBA would not want to write, neither maintain this kind of query, unless top-notch-geek, which is fine.&lt;/p&gt;
&lt;p&gt;Since this is a one time job, we just need to get it done. And &lt;em&gt;common_schema&lt;/em&gt;/QueryScript provide with the intuitive solution: if we read our demand aloud, we realize we want to &lt;strong&gt;delete&lt;/strong&gt; &lt;strong&gt;4th, 5th, 6th&lt;/strong&gt;, ... populated countries &lt;strong&gt;for each&lt;/strong&gt; continent.&lt;/p&gt;
&lt;p&gt;I present a solution made available by QueryScript, and discuss the ways in which the code overcomes limitations, or simplifies complexity:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;var $num_countries_to_delete;
foreach($continent, $num_countries: SELECT continent, COUNT(*) FROM world.Country GROUP BY continent)
{
  if ($num_countries &amp;gt; 3)
  {
    set $num_countries_to_delete := $num_countries - 3;
    DELETE FROM world.Country WHERE Continent = $continent ORDER BY Population ASC LIMIT :$num_countries_to_delete;
  }
}&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Discussion&lt;/h4&gt;
&lt;p&gt;The first thing that should be apparent from the above is that this is a &lt;em&gt;programmatic&lt;/em&gt; solution. Queries are declarative, which is why complex ones sometimes look incomprehensible. The above is more straightforward.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;The next thing to realize, which is a disclosure issue of some sorts, is that the above code is fine for a one time, or maintenance execution; but you wouldn&#39;t want to be normally issuing this type of code against your database &lt;strong&gt;10,000&lt;/strong&gt; times a second.&lt;/p&gt;
&lt;p&gt;Now let&#39;s break down the code to fragments:&lt;/p&gt;
&lt;h4&gt;Discussion: variables&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;$num_countries_to_delete&lt;/strong&gt; is a script variable. It is local. It is reset to &lt;strong&gt;NULL&lt;/strong&gt; upon declaration and destroyed when its visibility ends. But the &lt;em&gt;real power&lt;/em&gt; comes later, when it is &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script_variables.html#expansion&#34;&gt;expanded&lt;/a&gt;. This is discussed last.&lt;/p&gt;
&lt;h4&gt;Discussion: iteration&lt;/h4&gt;
&lt;p&gt;How would you iterate the continents using a stored routine? I personally think the syntax for server side cursors is overwhelmingly verbose. Declare a cursor, declare a continue handler, declare variables to grab values, open the cursor, start a loop, iteratively fetch the cursor (assign row values onto variables), oh, check up on the continue handler (&lt;em&gt;programmatically&lt;/em&gt; exit the loop if it fails), close the cursor.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script_foreach.html&#34;&gt;foreach()&lt;/a&gt; loop statement was developed to simplify all the above. Hey: just name your query, and the list of variables which should be assigned to, and do your thing in the following statement.&lt;/p&gt;
&lt;h4&gt;Discussion: conditional branching&lt;/h4&gt;
&lt;p&gt;The standard SQL &lt;strong&gt;CASE&lt;/strong&gt; statement, and the additional &lt;strong&gt;IF()&lt;/strong&gt; statement are fine, and I use them a lot. But they are fine for &lt;strong&gt;SELECT&lt;/strong&gt; queries, and only allow you to &lt;em&gt;get&lt;/em&gt; data. At best, you may invoke a function based on some condition, which can actually modify data.&lt;/p&gt;
&lt;p&gt;With QueryScript it&#39;s as with your normal programming language: you can &lt;strong&gt;DELETE&lt;/strong&gt; if some condition holds true, &lt;strong&gt;INSERT&lt;/strong&gt; or &lt;strong&gt;SELECT&lt;/strong&gt; or &lt;strong&gt;ALTER&lt;/strong&gt; or whatever if false.&lt;/p&gt;
&lt;p&gt;In the above code there isn&#39;t too much news. The same can be done with stored routines. However the &lt;strong&gt;if&lt;/strong&gt; statement can also accept a query as a condition. One can ask: &lt;strong&gt;if (DELETE FROM ... WHERE...)&lt;/strong&gt;. The condition holds true only is the operation was successful (rows actually DELETEd, or INSERTed, or UPDATEed). This makes for a very tight integration between script and SQL.&lt;/p&gt;
&lt;h4&gt;Discussion: variables and variable expansion&lt;/h4&gt;
&lt;p&gt;Script variables behave just as normal MySQL user defined variables (in fact, current internal implementation of script variables is &lt;em&gt;by&lt;/em&gt; user defined variables). Which means the &lt;strong&gt;set&lt;/strong&gt; statement works for them just as normal.&lt;/p&gt;
&lt;p&gt;And here is where things become not-normal:&lt;/p&gt;
&lt;p&gt;Say we want to delete all but the 3 most populated countries in Europe. Wouldn&#39;t we like to issue a &lt;strong&gt;DELETE FROM Country WHERE Continent = &#39;Europe&#39; ORDER BY Population DESC LIMIT 3, 999999999&lt;/strong&gt;? (The 9999999999 to resemble &#34;infinite&#34;, in poor man&#39;s solution)&lt;/p&gt;
&lt;p&gt;But MySQL&#39;s &lt;strong&gt;DELETE&lt;/strong&gt; does not accept both limit &amp;amp; offset in the &lt;strong&gt;LIMIT&lt;/strong&gt; clause. Just the limit part. Which is why we&#39;re working the other way round: we find out the number of records we wish to purge and delete bottom up. But wait, here&#39;s another problem:&lt;/p&gt;
&lt;p&gt;In MySQL, the &lt;strong&gt;LIMIT&lt;/strong&gt; clause &lt;em&gt;must accept a constant&lt;/em&gt;. You can just &lt;strong&gt;DELETE FROM .... LIMIT @x&lt;/strong&gt;. This makes for a syntax error. Bummer!&lt;/p&gt;
&lt;p&gt;If we don&#39;t know ahead the number of records we wish to purge, how can we work both dynamically and correctly?&lt;/p&gt;
&lt;p&gt;Enter variable &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/query_script_variables.html#expansion&#34;&gt;expansion&lt;/a&gt;. In the statement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DELETE FROM world.Country WHERE Continent = $continent ORDER BY Population ASC LIMIT :$num_countries_to_delete;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;$num_countries_to_delete&lt;/strong&gt; variable is expanded, via &#34;&lt;strong&gt;:&lt;/strong&gt;&#34;. The &lt;strong&gt;:$num_countries_to_delete&lt;/strong&gt; token is replaced in-place with the value contained by &lt;strong&gt;$num_countries_to_delete&lt;/strong&gt;. MySQL never gets a variable in the &lt;strong&gt;LIMIT&lt;/strong&gt; clause: by the time the query reaches MySQL, theres a &lt;em&gt;constant&lt;/em&gt; in place, and none is the wiser. But as far as &lt;em&gt;we&#39;re&lt;/em&gt; concerned, we get a dynamic way of producing values to the &lt;strong&gt;LIMIT&lt;/strong&gt; clause.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LIMIT&lt;/strong&gt; is not the only clause which expects constants. How about &lt;strong&gt;KILL&lt;/strong&gt;? How about DDLs, such as &lt;strong&gt;CREATE TABLE&lt;/strong&gt;? With variable expansion you can dynamically inject values onto such clauses, statements and commands, and get your self a dynamic script.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;This small code sample exposes much of QueryScript&#39;s power. Throughout the months of development, I happened to use QueryScript code over and over on production, to realize how it can sometimes simplify very complex tasks into a mere 2-liner code. A code that any of my fellow programmers can understand, as well, without having to be SQL experts. And such which is executed within the server; no need for external languages, connectors, dependencies, packages etc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Syntax of the day: IS TRUE and IS FALSE</title>
      <link>/blog/2012/01/26/syntax-of-the-day-is-true-and-is-false/</link>
      <pubDate>Thu, 26 Jan 2012 06:09:23 +0000</pubDate>
      
      <guid>/blog/2012/01/26/syntax-of-the-day-is-true-and-is-false/</guid>
      <description>&lt;p&gt;What makes for a &lt;em&gt;true&lt;/em&gt; statement?&lt;/p&gt;
&lt;p&gt;We usually test statements using a WHERE clause:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT * FROM world.City WHERE Population &amp;gt; 1000000&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&#34;Population &amp;gt; 1000000&#34;&lt;/strong&gt; statement makes for a boolean expression. Using &lt;strong&gt;WHERE&lt;/strong&gt; is just one way of evaluating it. One can also test with &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/control-flow-functions.html#function_if&#34;&gt;&lt;strong&gt;IF()&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SET @val := 7;
SELECT IF(@val &amp;gt; 2, &#39;Yes&#39;, &#39;No&#39;)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;TRUE and FALSE&lt;/h4&gt;
&lt;p&gt;The two are keywords. They also map for the numerals &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;0&lt;/strong&gt;, as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT TRUE, FALSE;
+------+-------+
| TRUE | FALSE |
+------+-------+
|    1 |     0 |
+------+-------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like in the &lt;strong&gt;C&lt;/strong&gt; programming language, a nonzero value evaluates to a &lt;em&gt;true&lt;/em&gt; value. A zero evaluates to &lt;em&gt;false&lt;/em&gt;. A NULL evaluates to... well, NULL. But aside from 3-valued logic, what&#39;s important in our case is that it is &lt;em&gt;not true&lt;/em&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;However, simple value comparison is incorrect:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT @val, @val &amp;gt; 3, @val &amp;gt; 3 = TRUE as result;
+------+----------+--------+
| @val | @val &amp;gt; 3 | result |
+------+----------+--------+
|    7 |        1 |      1 |
+------+----------+--------+

mysql&amp;gt; SELECT @val, @val = TRUE as result;
+------+--------+
| @val | result |
+------+--------+
|    7 |      0 |
+------+--------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test for the truth value of an expression, the correct syntax is by using &lt;strong&gt;IS TRUE&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT @val, @val IS TRUE as result;
+------+--------+
| @val | result |
+------+--------+
|    7 |      1 |
+------+--------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Likewise, one may use &lt;strong&gt;IS FALSE&lt;/strong&gt; to test for falsehood. However, if you wish to note &lt;strong&gt;NULL&lt;/strong&gt; as a &lt;em&gt;false&lt;/em&gt; value this does not work:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT @empty, @empty IS TRUE, @empty IS FALSE;
+--------+----------------+-----------------+
| @empty | @empty IS TRUE | @empty IS FALSE |
+--------+----------------+-----------------+
| NULL   |              0 |               0 |
+--------+----------------+-----------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&#39;re unsure why, you should read more on three-valued logic in SQL. To solve the above, simply use &lt;strong&gt;IS NOT TRUE&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT @empty, @empty IS NOT TRUE;
+--------+--------------------+
| @empty | @empty IS NOT TRUE |
+--------+--------------------+
| NULL   |                  1 |
+--------+--------------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In summary, use &lt;strong&gt;IS TRUE&lt;/strong&gt; and &lt;strong&gt;IS NOT TRUE&lt;/strong&gt; so as to normalize truth values into a &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt; value range, &lt;strong&gt;C&lt;/strong&gt; style, including handling of &lt;strong&gt;NULL&lt;/strong&gt;s.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More MySQL foreach()</title>
      <link>/blog/2011/12/02/more-mysql-foreach/</link>
      <pubDate>Fri, 02 Dec 2011 15:55:32 +0000</pubDate>
      
      <guid>/blog/2011/12/02/more-mysql-foreach/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;http://code.openark.org/blog/mysql/mysql-foreach&#34;&gt;previous post&lt;/a&gt; I&#39;ve shown several generic use cases for &lt;a href=&#34;http://common-schema.googlecode.com/svn/trunk/common_schema/doc/html/foreach.html&#34;&gt;&lt;em&gt;foreach()&lt;/em&gt;&lt;/a&gt;, a new scripting functionality introduced in &lt;a href=&#34;http://code.google.com/p/common-schema/&#34; rel=&#34;nofollow&#34;&gt;common_schema&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part I present DBA&#39;s handy syntax for schema and table operations and maintenance.&lt;/p&gt;
&lt;p&gt;Confession: while I love &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;&#39;s power, I just &lt;em&gt;hate&lt;/em&gt; writing queries against it. It&#39;s just so much typing! Just getting the list of tables in a schema makes for this heavy duty query:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=&#39;sakila&#39; AND TABLE_TYPE=&#39;BASE TABLE&#39;;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;When a join is involved this really becomes a nightmare. I think it&#39;s cumbersome, and as result, many do not remember the names and meaning of columns, making for &lt;em&gt;&#34;oh, I need to read the manual all over again just to get that query right&#34;&lt;/em&gt;. Anyway, that&#39;s my opinion.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;SHOW TABLES&lt;/strong&gt; statement is easier to type, but cannot be integrated into a &lt;strong&gt;SELECT&lt;/strong&gt; query (though &lt;a href=&#34;http://code.openark.org/blog/mysql/reading-results-of-show-statements-on-server-side&#34;&gt;we have a partial solution&lt;/a&gt; for that, too), and besides, when filtering out the views, the &lt;strong&gt;SHOW&lt;/strong&gt; statement becomes almost as cumbersome as the one on &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Which is why &lt;em&gt;foreach()&lt;/em&gt; offers handy shortcuts to common iterations on schemata and tables, as follows:&lt;/p&gt;
&lt;h4&gt;Use case: iterate all databases&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;schema&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;CREATE TABLE ${schema}.event(event_id INT, msg VARCHAR(128))&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above we execute a query on each database. Hmmm, maybe not such a good idea to perform this operation on all databases? Let&#39;s filter them:&lt;/p&gt;
&lt;h4&gt;Use case: iterate databases by name match&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;schema like wordpress_%&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;ALTER TABLE ${schema}.wp_posts MODIFY COLUMN comment_author VARCHAR(96) NOT NULL&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above will only iterate my WordPress databases (I have several of these), performing an &lt;strong&gt;ALTER&lt;/strong&gt; on &lt;strong&gt;wp_posts&lt;/strong&gt; for each of those databases.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;I don&#39;t have to quote the &lt;em&gt;like&lt;/em&gt; expression, but I can, if I wish to.&lt;/p&gt;
&lt;p&gt;I can also use a regular expression match:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;schema ~ /^wordpress_[0-9]+$/&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;ALTER TABLE ${schema}.wp_posts MODIFY COLUMN comment_author VARCHAR(96) NOT NULL&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Use case: iterate tables in a specific schema&lt;/h4&gt;
&lt;p&gt;Time to upgrade our &lt;strong&gt;sakila&lt;/strong&gt; tables to InnoDB&#39;s compressed format. We use &lt;strong&gt;$()&lt;/strong&gt;, a synonym for &lt;em&gt;foreach()&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call $(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;table in sakila&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;ALTER TABLE ${schema}.${table} ENGINE=InnoDB ROW_FORMAT=COMPRESSED&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above will iterate on tables in &lt;strong&gt;sakila&lt;/strong&gt;. I say &lt;em&gt;tables&lt;/em&gt;, since it will avoid iterating views (there is still no specific syntax for views iteration). This is done on purpose, as my experience shows there is very little in common between tables and views when it comes to maintenance and operations.&lt;/p&gt;
&lt;h4&gt;Use case: iterate tables by name match&lt;/h4&gt;
&lt;p&gt;Here&#39;s a interesting scenario: you wish to work on all tables matching some name. The naive approach would be to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = &#39;wp_posts&#39; AND TABLE_TYPE = &#39;BASE TABLE&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Wait!&lt;/strong&gt;&lt;/em&gt; Are you aware this may bring your server down? This query will open all databases at once, opening all &lt;strong&gt;.frm&lt;/strong&gt; files (though thankfully not data files, since we only check for name and type).&lt;/p&gt;
&lt;p&gt;Here&#39;s a better approach:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;table like wp_posts&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;ALTER TABLE ${schema}.${table} ENGINE=InnoDB&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;(There&#39;s now FULLTEXT to InnoDB, so the above can make sense in the near future!)&lt;/p&gt;
&lt;p&gt;The good part is that &lt;em&gt;foreach()&lt;/em&gt; will look for matching tables &lt;em&gt;one database at a time&lt;/em&gt;. It will iterate the list of database, then look for matching tables per database, thereby optimizing the query on &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here, too, I can use regular expressions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call $(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;table ~ /^wp_.*$/&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;ALTER TABLE ${schema}.${table} ENGINE=InnoDB&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;This is work in the making, but, as someone who maintains a few productions servers, I&#39;ve already put it to work.&lt;/p&gt;
&lt;p&gt;I&#39;m hoping the syntax is easy to comprehend. I know that since I developed it it must be far more intuitive to myself than to others. I&#39;ve tried to keep close on common syntax and concepts from various programming languages.&lt;/p&gt;
&lt;p&gt;I would like to get as much feedback as possible. I have further ideas and thoughts on the direction &lt;a href=&#34;http://code.google.com/p/common-schema/&#34;&gt;common_schema&lt;/a&gt; is taking, but wish take it in small steps. Your feedback is appreciated!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL foreach()</title>
      <link>/blog/2011/12/02/mysql-foreach/</link>
      <pubDate>Fri, 02 Dec 2011 06:59:03 +0000</pubDate>
      
      <guid>/blog/2011/12/02/mysql-foreach/</guid>
      <description>&lt;p&gt;A new routine is now available in &lt;a href=&#34;http://code.google.com/p/common-schema/&#34; rel=&#34;nofollow&#34;&gt;common_schema&lt;/a&gt;, which makes for an easier execution syntax for some operations:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&lt;em&gt;collection_to_iterate_over&lt;/em&gt;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&lt;em&gt;queries_to_execute_per_iteration_step&lt;/em&gt;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To illustrate what it can do, consider:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;table in sakila&#39;&lt;/span&gt;, &lt;span style=&#34;color: #000080;&#34;&gt;&#39;ALTER TABLE &lt;strong&gt;${schema}&lt;/strong&gt;.&lt;strong&gt;${table}&lt;/strong&gt; ENGINE=InnoDB ROW_FORMAT=COMPACT&#39;&lt;/span&gt;);

call $(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;schema like shard_%&lt;/span&gt;&#39;, &lt;span style=&#34;color: #000080;&#34;&gt;&#39;CREATE TABLE &lt;strong&gt;${schema}&lt;/strong&gt;.messages (id INT)&#39;&lt;/span&gt;);

call $(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;2000:2009&#39;&lt;/span&gt;, &lt;span style=&#34;color: #000080;&#34;&gt;&#39;INSERT IGNORE INTO report (report_year) VALUES (&lt;strong&gt;${1}&lt;/strong&gt;)&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;$()&lt;/strong&gt; stands as a synonym to &lt;em&gt;foreach()&lt;/em&gt;. I suspect it should look familiar to web programmers.&lt;/p&gt;
&lt;p&gt;The idea for &lt;em&gt;foreach()&lt;/em&gt; was introduced by Giuseppe Maxia during a correspondence. At first I was skeptic: this isn&#39;t &lt;a href=&#34;http://api.jquery.com/jQuery.each/&#34;&gt;jQuery&lt;/a&gt;; this is SQL. Why would I want to use &lt;em&gt;foreach()&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Then Giuseppe provided some use cases, and as I started thinking about it, I found more and more cases where such a tool might considerably reduce scripting overhead and avoid requiring SQL-fu skills. In fact, I have been using it myself for the past few weeks&lt;/p&gt;
&lt;p&gt;I provide examples which I hope will convince the reader as for the simplicity of using such syntax. Showing off the types of input &lt;em&gt;foreach()&lt;/em&gt; accepts (query, table search, schema search, set of constants, single or double numbers range), and the types of queries it can execute (single, multiple, using placeholders).&lt;/p&gt;
&lt;p&gt;I stress that this is not a replacement for common queries (i.e. does &lt;em&gt;not&lt;/em&gt; come to replace your common &lt;strong&gt;SELECT&lt;/strong&gt;, &lt;strong&gt;UPDATE&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;), but more for working out administrative tasks. Nevertheless, the last example in this post does provide with an interesting insight on possible &#34;normal&#34; use.&lt;span id=&#34;more-4002&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;Use case: using values from query&lt;/h4&gt;
&lt;p&gt;Let&#39;s kill all queries running for over &lt;strong&gt;20&lt;/strong&gt; seconds:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;SELECT id FROM INFORMATION_SCHEMA.PROCESSLIST WHERE time &amp;gt; 20&#39;&lt;/span&gt;, &lt;span style=&#34;color: #000080;&#34;&gt;&#39;KILL QUERY &lt;strong&gt;${1}&lt;/strong&gt;&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The thing I like most about &lt;em&gt;foreach()&lt;/em&gt; is that it&#39;s self explanatory. Nevertheless, I note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;KILL&lt;/strong&gt; command is executed for each process running for more than &lt;strong&gt;20&lt;/strong&gt; seconds (I did round up corners, since I didn&#39;t check for sleeping processes, for simplicity).&lt;/li&gt;
&lt;li&gt;I also use the &lt;strong&gt;${1}&lt;/strong&gt; placeholder: much like in &lt;em&gt;awk&lt;/em&gt;, this will get the first column in the result set. In our case, it is the single column, &lt;strong&gt;id&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;I chose to invoke a single query/command per iteration step.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compare the above with another solution to the same problem, using &lt;a href=&#34;http://code.openark.org/blog/mysql/mysql-eval&#34;&gt;eval()&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call eval(&#39;SELECT CONCAT(\&#39;KILL QUERY \&#39;,id) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE TIME &amp;gt; 20&#39;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;They both get the same thing done. But &lt;em&gt;foreach()&lt;/em&gt; is just a bit more friendly to write (and read).&lt;/p&gt;
&lt;p&gt;Let&#39;s move to a more complicated example.&lt;/p&gt;
&lt;h4&gt;Use case: using multiple values from a query, invoking multiple commands&lt;/h4&gt;
&lt;p&gt;Let&#39;s kill some queries, as above, but also write down a log entry so that we know what happened:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(
  &lt;span style=&#34;color: #808000;&#34;&gt;&#39;SELECT id, user FROM INFORMATION_SCHEMA.PROCESSLIST WHERE time &amp;gt; 20&#39;&lt;/span&gt;,
  &lt;span style=&#34;color: #000080;&#34;&gt;&#39;KILL QUERY &lt;strong&gt;${1}&lt;/strong&gt;; INSERT INTO my_log VALUES (\&#39;have just killed query &lt;strong&gt;${1}&lt;/strong&gt;, executed by &lt;strong&gt;${2}&lt;/strong&gt;\&#39;);&#39;&lt;/span&gt;)
;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above, for each long running process, we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kill the process&#39; query. &lt;strong&gt;id&lt;/strong&gt; being the first column, is referenced by &lt;strong&gt;${1}&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;INSERT to my_log that said process has been killed. We note both &lt;strong&gt;id&lt;/strong&gt; and &lt;strong&gt;user&lt;/strong&gt; using placeholders &lt;strong&gt;${1}&lt;/strong&gt; and &lt;strong&gt;${2}&lt;/strong&gt;, respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s possible to invoke as many queries/commands per iteration step. It is possible to use placeholders &lt;strong&gt;${1}&lt;/strong&gt; through &lt;strong&gt;${9}&lt;/strong&gt;, as well as &lt;strong&gt;${NR}&lt;/strong&gt;, which works as in &lt;em&gt;awk&lt;/em&gt;: it is a row-counter, &lt;strong&gt;1&lt;/strong&gt;-based.&lt;/p&gt;
&lt;p&gt;This example can still be written with &lt;em&gt;eval()&lt;/em&gt;, but in much uglier form. I can&#39;t just first &lt;strong&gt;KILL&lt;/strong&gt; the processes, then log about them, since by the time I want to log, the queries will not be running; the commands &lt;em&gt;must be coupled&lt;/em&gt;. This is naturally done with &lt;em&gt;foreach()&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Use case: iterating constant values, invoking DDL&lt;/h4&gt;
&lt;p&gt;The commands invoked by &lt;em&gt;foreach()&lt;/em&gt; can take the form of DML (&lt;strong&gt;INSERT&lt;/strong&gt;/&lt;strong&gt;UPDATE&lt;/strong&gt;/...), DDL (&lt;strong&gt;CREATE&lt;/strong&gt;/&lt;strong&gt;ALTER&lt;/strong&gt;/...) or other (&lt;strong&gt;KILL&lt;/strong&gt;/&lt;strong&gt;SET&lt;/strong&gt;/...). The placeholders can be used anywhere within the text.&lt;/p&gt;
&lt;p&gt;Take an installation where different schemata have the same exact table structure. We want to refactor a table on all schemata:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call $(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;&lt;strong&gt;{USA, UK, Japan, NZ}&lt;/strong&gt;&#39;&lt;/span&gt;, &lt;span style=&#34;color: #000080;&#34;&gt;&#39;ALTER TABLE db_region_&lt;strong&gt;${1}&lt;/strong&gt;.customer ADD COLUMN personal_notes VARCHAR(4096) CHARSET utf8&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above translates to the following commands:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;ALTER TABLE &lt;strong&gt;db_region_USA&lt;/strong&gt;.customer ADD COLUMN personal_notes VARCHAR(4096) CHARSET utf8;
ALTER TABLE &lt;strong&gt;db_region_UK&lt;/strong&gt;.customer ADD COLUMN personal_notes VARCHAR(4096) CHARSET utf8;
ALTER TABLE &lt;strong&gt;db_region_Japan&lt;/strong&gt;.customer ADD COLUMN personal_notes VARCHAR(4096) CHARSET utf8;
ALTER TABLE &lt;strong&gt;db_region_NZ&lt;/strong&gt;.customer ADD COLUMN personal_notes VARCHAR(4096) CHARSET utf8;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above, we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide a list of constant values. These can be strings, numbers, whatever. They are space delimited.&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;${1}&lt;/strong&gt; place holder. We can also use &lt;strong&gt;${NR}&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use case: loop through number sequence&lt;/h4&gt;
&lt;p&gt;We wish to populate a table with values:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&#39;&lt;strong&gt;1970:2038&lt;/strong&gt;&#39;&lt;/span&gt;, &lt;span style=&#34;color: #003366;&#34;&gt;&#39;INSERT INTO test.test_dates (dt) VALUES (DATE(\&#39;&lt;strong&gt;${1}&lt;/strong&gt;-01-01\&#39;))&#39;&lt;/span&gt;);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above results with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; SELECT dt FROM test_dates;
+------------+
| dt&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |
+------------+
| 1970-01-01 |
| 1971-01-01 |
| 1972-01-01 |
| 1973-01-01 |
| 1974-01-01 |
...
| 2036-01-01 |
| 2037-01-01 |
| 2038-01-01 |
+------------+&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;With numbers range:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integers are assumed&lt;/li&gt;
&lt;li&gt;Range is indicated by low and high values, both inclusive&lt;/li&gt;
&lt;li&gt;Negatives allowed (e.g. &lt;strong&gt;&#39;-5:5&#39;&lt;/strong&gt;, resulting with &lt;strong&gt;11&lt;/strong&gt; steps)&lt;/li&gt;
&lt;li&gt;Placeholders &lt;strong&gt;${1}&lt;/strong&gt; and &lt;strong&gt;${NR}&lt;/strong&gt; are allowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use case: iterating through two dimensional numbers range:&lt;/h4&gt;
&lt;p&gt;We use &lt;strong&gt;3&lt;/strong&gt; template tables; we create &lt;strong&gt;15&lt;/strong&gt; schemata; in each we create &lt;strong&gt;3&lt;/strong&gt; tables based on the template tables:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(&lt;span style=&#34;color: #808000;&#34;&gt;&lt;strong&gt; &#39;1:15,1:3&#39;&lt;/strong&gt;&lt;/span&gt;,
  &lt;span style=&#34;color: #003366;&#34;&gt;&#39;CREATE DATABASE IF NOT EXISTS db_test_${1}; CREATE TABLE db_test_${1}.tbl_${2} LIKE db_template.my_table_${2};&#39;&lt;/span&gt;
);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of the number ranges has the same restrictions and properties as listed above (integers, inclusive, ascending)&lt;/li&gt;
&lt;li&gt;We can now use &lt;strong&gt;${1}&lt;/strong&gt; and &lt;strong&gt;${2}&lt;/strong&gt; placeholders, noting the first and second numbers range, respectively.&lt;/li&gt;
&lt;li&gt;We may also use &lt;strong&gt;${NR}&lt;/strong&gt;, which, in this case, will run &lt;strong&gt;1&lt;/strong&gt; through &lt;strong&gt;45&lt;/strong&gt; (&lt;strong&gt;15&lt;/strong&gt; times &lt;strong&gt;3&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;We use multiple queries per iteration step.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use case: overcoming MySQL limitations&lt;/h4&gt;
&lt;p&gt;MySQL does not support &lt;strong&gt;ORDER BY&lt;/strong&gt; &amp;amp; &lt;strong&gt;LIMIT&lt;/strong&gt; in multi-table &lt;strong&gt;UPDATE&lt;/strong&gt; and &lt;strong&gt;DELETE&lt;/strong&gt; statements (as noted &lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year&#34;&gt;last year&lt;/a&gt;). So we &lt;em&gt;cannot&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;DELETE FROM t1 USING t1 JOIN t2 ON (...) JOIN t3 ON (..) WHERE x = 7 ORDER BY ts LIMIT 100;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, we &lt;em&gt;can&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;call foreach(
  &lt;span style=&#34;color: #808000;&#34;&gt;&#39;SELECT t1.id FROM t1 JOIN t2 ON (...) JOIN t3 ON (..) WHERE x = 7 ORDER BY ts LIMIT 100&#39;&lt;/span&gt;,
  &lt;span style=&#34;color: #003366;&#34;&gt;&#39;DELETE FROM t1 WHERE id = ${1}&#39;&lt;/span&gt;
);&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, it will do a lot of single row &lt;strong&gt;DELETE&lt;/strong&gt;s. There are further MySQL limitations which complicate things if I want to overcome this. Perhaps at a later blog post.&lt;/p&gt;
&lt;h4&gt;Acknowledgements&lt;/h4&gt;
&lt;p&gt;I hit a weird &lt;a href=&#34;http://bugs.mysql.com/bug.php?id=62406&#34;&gt;bug&lt;/a&gt; which prevented me from releasing this earlier on. Actually it&#39;s a duplicate of &lt;a href=&#34;http://bugs.mysql.com/bug.php?id=12257&#34;&gt;this bug&lt;/a&gt;, which makes it &lt;strong&gt;6&lt;/strong&gt; years old. Hurray.&lt;/p&gt;
&lt;p&gt;To the rescue came &lt;a href=&#34;http://rpbouman.blogspot.com/&#34;&gt;Roland Bouman&lt;/a&gt;, who suggested an idea so crazy even I was skeptic: to parse and modify the original query so as to rename column names according to my scheme. And of course he made it happen, along with some additional very useful stuff. It&#39;s really a &lt;em&gt;super-ultra-meta-meta-sql-fu&lt;/em&gt; magic he does there.&lt;/p&gt;
&lt;p&gt;So, thanks, Roland, for joining the ride, and thanks, Giuseppe, for testing and helping out to shape this functionality. It&#39;s great fun working with other people on open-source -- a new experience for me.&lt;/p&gt;
&lt;h4&gt;Continued&lt;/h4&gt;
&lt;p&gt;In this post I&#39;ve covered the general-purpose iterations. There are also more specific types of iterations with &lt;em&gt;foreach()&lt;/em&gt;. &lt;a href=&#34;http://code.openark.org/blog/mysql/more-mysql-foreach&#34;&gt;Continued next&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>