<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operations on code.openark.org</title>
    <link>/blog/tags/operations/</link>
    <description>Recent content in Operations on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 28 Sep 2016 14:22:14 +0000</lastBuildDate>
    <atom:link href="/blog/tags/operations/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Three wishes for a new year</title>
      <link>/blog/Three-wishes-for-a-new-year/Three-wishes-for-a-new-year/</link>
      <pubDate>Wed, 28 Sep 2016 14:22:14 +0000</pubDate>
      
      <guid>/blog/Three-wishes-for-a-new-year/Three-wishes-for-a-new-year/</guid>
      <description>&lt;p&gt;(Almost) another new year by Jewish calendar. What do I wish for the following year?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;World peace&lt;/li&gt;
&lt;li&gt;Good health to all&lt;/li&gt;
&lt;li&gt;Relaxed GTID constraints&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;m still not using GTID, and still see operational issues with working with GTID. As a latest example, our new schema migration solution, gh-ost, allows us to test migrations in production, on replicas. The GTID catch? &lt;code&gt;gh-ost&lt;/code&gt;&amp;nbsp;has to write something to the binary log. Thus, it &#34;corrupts&#34; the replica with a bogus GTID entry that will never be met in another server, thus making said replica unsafe to promote. We can work around this, but...&lt;/p&gt;
&lt;p&gt;I understand the idea and need for the &lt;code&gt;Executed GTID Set&lt;/code&gt;. It will&amp;nbsp;certainly come in handy with multi-writer InnoDB Cluster. However for most use cases GTID poses a burden. The reason is that our topologies are imperfect, and we as humans are imperfect, and operations are most certainly imperfect. We may wish to operate on a replica: test something, by intention or mistake. We may wish to use a subchain as the seed for a new cluster split. We may wish to be able to write to downstream replicas. We may use a 3rd party tool that issues a &lt;code&gt;flush tables with read lock&lt;/code&gt;&amp;nbsp;without disabling &lt;code&gt;sql_log_bin&lt;/code&gt;. Things just happen.&lt;/p&gt;
&lt;p&gt;For that, I would like to suggest GTID control levels, such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Strict&lt;/em&gt;: same as Oracle&#39;s existing&amp;nbsp;implementation. Executed sets, purged sets, whatnot.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last executed&lt;/em&gt;: a mode where the only thing that counts is the last executed GTID value. If I repoint replica,&amp;nbsp;all it needs to check is &#34;hey this is my last executed GTID entry, give me the coordinates of yours. And, no, I don&#39;t care about comparing executed and purged sets, I will trust you and keep running from that point on&#34;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Declarative&lt;/em&gt;: GTIDs are generated, are visible in each and every binary log entry, but are completely ignored.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I realize Oracle MySQL GTID is out for some over 3 years now, but I&#39;m sorry - I still have reservations and see&amp;nbsp;use cases where I fear it will not serve me right.&lt;/p&gt;
&lt;p&gt;How about my previous years wishes? World peace and good health never came through, however:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My &lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year-2015&#34;&gt;2015 wish&lt;/a&gt; for &#34;decent, operations friendly built in online table refactoring&#34; was unmet, however &lt;code&gt;gh-ost&lt;/code&gt;&amp;nbsp;is a thing now and exceeds my expectations. No, really. Please come see &lt;a href=&#34;https://www.percona.com/live/plam16/sessions/introducing-gh-ost-triggerless-painless-trusted-online-schema-migrations&#34;&gt;Tom &amp;amp; myself present gh-ost&lt;/a&gt; and how it changed our migration paradigm.&lt;/li&gt;
&lt;li&gt;My &lt;a href=&#34;http://code.openark.org/blog/mysql/three-wishes-for-a-new-year-201&#34;&gt;2012 wish&lt;/a&gt; for &#34;decent, long waited for, implementation of &lt;a href=&#34;http://en.wikipedia.org/wiki/Window_function_%28SQL%29#Window_function&#34;&gt;Window Functions&lt;/a&gt; (aka Analytic Functions) for MySQL&#34; was met by&amp;nbsp;MariaDB&#39;s &lt;a href=&#34;https://mariadb.com/kb/en/mariadb/window-functions/&#34;&gt;window functions&lt;/a&gt;.&lt;br&gt;
Not strictly Window Functions, but Oracle MySQL 8.0 will &lt;a href=&#34;http://mysqlserverteam.com/mysql-8-0-labs-recursive-common-table-expressions-in-mysql-ctes/&#34;&gt;support CTE&lt;/a&gt; (hierarchial/recursive), worth a mention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you in Amsterdam!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing gh-ost: triggerless online schema migrations</title>
      <link>/blog/2016/08/01/introducing-gh-ost-triggerless-online-schema-migrations/</link>
      <pubDate>Mon, 01 Aug 2016 19:19:00 +0000</pubDate>
      
      <guid>/blog/2016/08/01/introducing-gh-ost-triggerless-online-schema-migrations/</guid>
      <description>&lt;p&gt;I&#39;m thoroughly happy to introduce &lt;a href=&#34;https://github.com/github/gh-ost&#34;&gt;&lt;strong&gt;gh-ost&lt;/strong&gt;&lt;/a&gt;: triggerless, controllable, auditable, testable, trusted online schema change tool &lt;a href=&#34;http://githubengineering.com/gh-ost-github-s-online-migration-tool-for-mysql/&#34;&gt;released today by GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gh-ost&lt;/em&gt; now powers our production schema migrations. We hit some serious limitations using &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html&#34;&gt;pt-online-schema-change&lt;/a&gt; on our large volume, high traffic tables, to the effect of driving our database to a near grinding halt or even to the extent of causing outages. With &lt;em&gt;gh-ost&lt;/em&gt;, we are now able to migrate our busiest tables at any time, peak hours and heavy workloads included, without causing impact to our service.&lt;/p&gt;
&lt;p&gt;gh-ost supports testing in production. It goes a long way to build trust, both in integrity and in control. Are your databases just too busy and you cannot run existing online-schema-change tools? Have you suffered outages due to migrations? Are you tired of babysitting migrations that run up to 3:00am? Tired of being the only one tailing logs? Please, take a look at &lt;em&gt;gh-ost&lt;/em&gt;. I believe it changes online migration paradigm.&lt;/p&gt;
&lt;p&gt;For a more thorough overview, please read the &lt;a href=&#34;http://githubengineering.com/gh-ost-github-s-online-migration-tool-for-mysql/&#34;&gt;announcement&lt;/a&gt; on the GitHub Engineering Blog, and proceed to the &lt;a href=&#34;https://github.com/github/gh-ost/blob/master/README.md&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gh-ost&lt;/em&gt; is open sourced under the MIT license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solving the non-atomic table swap, Take III: making it atomic</title>
      <link>/blog/2016/07/07/solving-the-non-atomic-table-swap-take-iii-making-it-atomic/</link>
      <pubDate>Thu, 07 Jul 2016 14:54:25 +0000</pubDate>
      
      <guid>/blog/2016/07/07/solving-the-non-atomic-table-swap-take-iii-making-it-atomic/</guid>
      <description>&lt;p&gt;With the unintended impression of becoming live blogging, we now follow up on &lt;a title=&#34;Link to Solving the non-atomic table swap, Take II&#34; href=&#34;http://code.openark.org/blog/mysql/solving-the-non-atomic-table-swap-take-ii&#34; rel=&#34;bookmark&#34;&gt;Solving the non-atomic table swap, Take II&lt;/a&gt; and &lt;a title=&#34;Link to Solving the Facebook-OSC non-atomic table swap problem&#34; href=&#34;http://code.openark.org/blog/mysql/solving-the-facebook-osc-non-atomic-table-swap-problem&#34; rel=&#34;bookmark&#34;&gt;Solving the Facebook-OSC non-atomic table swap problem&lt;/a&gt; with a safe, blocking, &lt;em&gt;atomic&lt;/em&gt; solution&lt;/p&gt;
&lt;h3&gt;Why yet another iteration?&lt;/h3&gt;
&lt;p&gt;The solution presented in &lt;a title=&#34;Link to Solving the non-atomic table swap, Take II&#34; href=&#34;http://code.openark.org/blog/mysql/solving-the-non-atomic-table-swap-take-ii&#34; rel=&#34;bookmark&#34;&gt;Solving the non-atomic table swap, Take II&lt;/a&gt; was good, in that it was safe. No data corruption. Optimistic: if no connection is killed throughout the process, then completely blocking.&lt;/p&gt;
&lt;p&gt;Two outstanding issues remained:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If something did go wrong, the solution reverted to a table-outage&lt;/li&gt;
&lt;li&gt;On replicas, the table swap is non atomic, non blocking. There&#39;s table-outage scenario on replica.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As it turns out, there&#39;s a simpler solution which overcomes both the above. As with math and physics, the simpler solution is often the preferred one. But it took those previous iterations to gather a few ideas together. So, anyway:&lt;/p&gt;
&lt;h3&gt;Safe, locking, atomic, asynchronous table swap&lt;/h3&gt;
&lt;p&gt;Do read the aforementioned previous posts; the quick-quick recap is: we want to be able to &lt;strong&gt;LOCK&lt;/strong&gt; a table &lt;strong&gt;tbl&lt;/strong&gt;, then do some stuff, then swap it out and put some &lt;strong&gt;ghost&lt;/strong&gt; table in its place. MySQL does not allow us to &lt;strong&gt;rename tbl to tbl_old, ghost to tbl&lt;/strong&gt; if we have locks on &lt;strong&gt;tbl&lt;/strong&gt; in that session.&lt;/p&gt;
&lt;p&gt;The solution we offer is now based on two connections only (as opposed to three, in the &lt;em&gt;optimistic&lt;/em&gt; approach). &#34;Our&#34; connections will be C10, C20. The &#34;normal&#34; app connections are C1..C9, C11..C19, C21..C29.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connections C1..C9 operate on &lt;strong&gt;tbl&lt;/strong&gt; with normal DML: &lt;strong&gt;INSERT, UPDATE, DELETE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Connection C10: &lt;strong&gt;CREATE TABLE tbl_old (id int primary key) COMMENT=&#39;magic-be-here&#39;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Connection C10: &lt;strong&gt;LOCK TABLES tbl WRITE, tbl_old WRITE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Connections C11..C19, newly incoming, issue queries on &lt;strong&gt;tbl&lt;/strong&gt; but are blocked due to the &lt;strong&gt;LOCK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Connection C20: &lt;strong&gt;RENAME TABLE tbl TO tbl_old, ghost TO tbl&lt;/strong&gt;&lt;br /&gt;
This is blocked due to the &lt;strong&gt;LOCK&lt;/strong&gt;, &lt;em&gt;but&lt;/em&gt; gets prioritized on top connections C11..C19 and on top C1..C9 or any other connection that attempts DML on &lt;strong&gt;tbl&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Connections C21..C29, newly incoming, issue queries on &lt;strong&gt;tbl&lt;/strong&gt; but are blocked due to the &lt;strong&gt;LOCK&lt;/strong&gt; and due to the &lt;strong&gt;RENAME&lt;/strong&gt;, waiting in queue&lt;/li&gt;
&lt;li&gt;Connection C10: checks that C20&#39;s &lt;strong&gt;RENAME&lt;/strong&gt; is applied (looks for the blocked &lt;strong&gt;RENAME&lt;/strong&gt; in processlist)&lt;/li&gt;
&lt;li&gt;Connection 10: &lt;strong&gt;DROP TABLE tbl_old&lt;/strong&gt;&lt;br /&gt;
Nothing happens yet; &lt;strong&gt;tbl&lt;/strong&gt; is still locked. All other connections still blocked.&lt;/li&gt;
&lt;li&gt;Connection 10: &lt;strong&gt;UNLOCK TABLES&lt;br /&gt;
BAM!&lt;/strong&gt; The &lt;strong&gt;RENAME&lt;/strong&gt; is first to execute, &lt;strong&gt;ghost&lt;/strong&gt; table is swapped in place of &lt;strong&gt;tbl&lt;/strong&gt;, then C1..C9, C11..C19, C21..C29 all get to operate on the new and shiny &lt;strong&gt;tbl&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some notes&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We create &lt;strong&gt;tbl_old&lt;/strong&gt; as a blocker for a premature swap&lt;/li&gt;
&lt;li&gt;It is allowed for a connection to &lt;strong&gt;DROP&lt;/strong&gt; a table it has under a &lt;strong&gt;WRITE LOCK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A blocked &lt;strong&gt;RENAME&lt;/strong&gt; is always prioritized over a blocked &lt;strong&gt;INSERT/UPDATE/DELETE&lt;/strong&gt;, no matter who came first&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What happens on failures?&lt;/h3&gt;
&lt;p&gt;Much fun. Just works; no rollback required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If C10 errors on the &lt;strong&gt;CREATE&lt;/strong&gt; we do not proceed.&lt;/li&gt;
&lt;li&gt;If C10 errors on the &lt;strong&gt;LOCK&lt;/strong&gt; statement, we do not proceed. The table is not locked. App continues to operate as normal.&lt;/li&gt;
&lt;li&gt;If C10 dies just as C20 is about to issue the &lt;strong&gt;RENAME&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The lock is released, the queries C1..C9, C11..C19 immediately operate on &lt;strong&gt;tbl&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;C20&#39;s &lt;strong&gt;RENAME&lt;/strong&gt; immediately fails because &lt;strong&gt;tbl_old&lt;/strong&gt; exists.&lt;br /&gt;
The entire operation is failed, but nothing terrible happens; some queries were blocked for some time is all. We will need to retry everything&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If C10 dies while C20 is blocked on &lt;strong&gt;RENAME&lt;/strong&gt;: Mostly similar to the above. Lock released, then C20 fails the &lt;strong&gt;RENAME&lt;/strong&gt; (because &lt;strong&gt;tbl_old&lt;/strong&gt; exists), then all queries resume normal operation&lt;/li&gt;
&lt;li&gt;If C20 dies before C10 drops the table, we catch the error and let C10 proceed as planned: &lt;strong&gt;DROP, UNLOCK&lt;/strong&gt;. Nothing terrible happens, some queries were blocked for some time. We will need to retry&lt;/li&gt;
&lt;li&gt;If C20 dies just after C10 &lt;strong&gt;DROP&lt;/strong&gt;s the table but before the unlock, same as above.&lt;/li&gt;
&lt;li&gt;If both C10 and C20 die, no problem: &lt;strong&gt;LOCK&lt;/strong&gt; is cleared; &lt;strong&gt;RENAME&lt;/strong&gt; lock is cleared. C1..C9, C11..C19, C21..C29 are free to operate on &lt;strong&gt;tbl&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No matter what happens, at the end of operation we look for the &lt;strong&gt;ghost&lt;/strong&gt; table. Is it still there? Then we know the operation failed, &#34;atomically&#34;. Is it not there? Then it has been renamed to &lt;strong&gt;tbl&lt;/strong&gt;, and the operation worked atomically.&lt;/p&gt;
&lt;p&gt;A side note on failure is the matter of cleaning up the magic &lt;strong&gt;tbl_old&lt;/strong&gt;. Here this is a matter of taste. Maybe just let it live and avoid recreating it, or you can drop it if you like.&lt;/p&gt;
&lt;h3&gt;Impact on app&lt;/h3&gt;
&lt;p&gt;App connections are guaranteed to be blocked, either until &lt;strong&gt;ghost&lt;/strong&gt; is swapped in, or until operation fails. In the former, they proceed to operate on the new table. In the latter, they proceed to operate on the original table.&lt;/p&gt;
&lt;h3&gt;Impact on replication&lt;/h3&gt;
&lt;p&gt;Replication only sees the &lt;strong&gt;RENAME&lt;/strong&gt;. There is no &lt;strong&gt;LOCK&lt;/strong&gt; in the binary logs. Thus, replication sees an atomic two-table swap. There is no table-outage.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This solution satisfies all we wanted to achieve. We&#39;re unlikely to give this another iteration. Well, if some yet-more-elegant solution comes along I&#39;ll be tempted, for the beauty of it, but the solution offered in this post is simple-enough, safe, atomic, replication friendly, and should make everyone happy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solving the non-atomic table swap, Take II</title>
      <link>/blog/2016/06/20/solving-the-non-atomic-table-swap-take-ii/</link>
      <pubDate>Mon, 20 Jun 2016 11:26:47 +0000</pubDate>
      
      <guid>/blog/2016/06/20/solving-the-non-atomic-table-swap-take-ii/</guid>
      <description>&lt;p&gt;Following up and improving on &lt;a title=&#34;Link to Solving the Facebook-OSC non-atomic table swap problem&#34; href=&#34;http://code.openark.org/blog/mysql/solving-the-facebook-osc-non-atomic-table-swap-problem&#34; rel=&#34;bookmark&#34;&gt;Solving the Facebook-OSC non-atomic table swap problem&lt;/a&gt;, we present a better, safe solution.&lt;/p&gt;
&lt;h3&gt;Quick, quickest recap:&lt;/h3&gt;
&lt;p&gt;We are working on a triggerless online schema migration solution. It is based on an asynchronous approach, similarly to the &lt;a href=&#34;https://www.facebook.com/notes/mysql-at-facebook/online-schema-change-for-mysql/430801045932/&#34;&gt;FB osc&lt;/a&gt; and as opposed to the synchronous solution as used by &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html&#34;&gt;pt-online-schema-change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We asynchronously synchronize (is that even a valid statement?) between some table &lt;strong&gt;tbl&lt;/strong&gt; and a ghost table &lt;strong&gt;ghost&lt;/strong&gt;, and at some time we want to cut-over: swap the two; kick out &lt;strong&gt;tbl&lt;/strong&gt; and put &lt;strong&gt;ghost&lt;/strong&gt; in its place and under its name.&lt;/p&gt;
&lt;p&gt;However, we cannot use the single statement &lt;strong&gt;rename tbl to tbl_old, ghost to tbl&lt;/strong&gt;, because we use the asynchronous approach, where at the time we lock &lt;strong&gt;tbl&lt;/strong&gt; for writes, we still have some events we need to process and apply onto &lt;strong&gt;ghost&lt;/strong&gt; before swapping the two.&lt;/p&gt;
&lt;p&gt;And MySQL does not allow a &lt;strong&gt;lock tables tbl write; ... ; &lt;/strong&gt;&lt;strong&gt;rename tbl to tbl_old, ghost to tbl&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a title=&#34;Link to Solving the Facebook-OSC non-atomic table swap problem&#34; href=&#34;http://code.openark.org/blog/mysql/solving-the-facebook-osc-non-atomic-table-swap-problem&#34; rel=&#34;bookmark&#34;&gt;Solving the Facebook-OSC non-atomic table swap problem&lt;/a&gt; we suggested a way that works, unless when it doesn&#39;t work. Read the caveat at the end of the post. Premature death of a connection that participates in the algorithm causes a chain reaction that leads to the premature execution of the &lt;strong&gt;rename&lt;/strong&gt; statement, potentially before we&#39;ve applied those remaining events. This leads to data inconsistency between the old table and the new table, and is unacceptable.&lt;/p&gt;
&lt;p&gt;To that effect, we were more inclined to go with the Facebook solution, which makes a two-step: &lt;strong&gt;lock tables tbl write; alter table tbl rename to tbl_old; ... ; alter table ghost rename to tbl;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This two-step solution is guaranteed not to have data inconsistency. Alas, it also implies an outage. There&#39;s a brief moment, in between the two &lt;strong&gt;rename&lt;/strong&gt;s, and during that time where we apply those last changes, where the table &lt;strong&gt;tbl&lt;/strong&gt; is simply not there.&lt;/p&gt;
&lt;p&gt;Not all applications will fail gracefully on such a scenario.&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;UDF&lt;/h3&gt;
&lt;p&gt;We looked at a solution based on UDFs, where we would create global wait conditions, that are not connection based.&lt;/p&gt;
&lt;p&gt;We don&#39;t like UDFs. You need to compile them for every new version. Puppetizing their setup is not fun. We wouldn&#39;t like maintaining this. We wouldn&#39;t like doing the operations for this. Neither would the community.&lt;/p&gt;
&lt;p&gt;We want to make this a community solution. Can we do without UDF?&lt;/p&gt;
&lt;h3&gt;Rewriting MySQL&lt;/h3&gt;
&lt;p&gt;We wish to avoid forking our own version of MySQL. It&#39;s not what we do and it&#39;s a pain.&lt;/p&gt;
&lt;h3&gt;A pure MySQL solution?&lt;/h3&gt;
&lt;p&gt;We found a solution to embrace; it is &lt;em&gt;optimistic&lt;/em&gt;, and &lt;em&gt;safe&lt;/em&gt;. hat &lt;em&gt;optimistic&lt;/em&gt; means is explained further on, but let&#39;s discuss &lt;em&gt;safe&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;The previous solution we came up with as &lt;em&gt;unsafe&lt;/em&gt; because breakage of a single component in the algorithm would lead to inconsistent data. The algorithm itself was fine, as long as no one would break it from the outside. This is the concern: what if some crazy cronjob that cleans up connections (kills idle connections, kills long running transactions) or some unfortunate user command kills one of the connections involved in the cut-over phase? This is not something that would happen every day, but can we protect against it? Our priority is to keep our data intact.&lt;/p&gt;
&lt;p&gt;The solution allows breakage. Even in the face of death of connections, data is not lost/corrupted, and at worst -- causes a FB-like, recoverable outage scenario.&lt;/p&gt;
&lt;h3&gt;A step towards the solution, a flawed one&lt;/h3&gt;
&lt;p&gt;I wish to illustrate something that looks like it would work, but in fact has a hidden flaw. We will later improve on that solution.&lt;/p&gt;
&lt;p&gt;Let&#39;s assume we have &lt;strong&gt;tbl&lt;/strong&gt;, &lt;strong&gt;ghost&lt;/strong&gt; tables. We execute the following by multiple connections; we call them C1, C2, C3, ...:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C1: &lt;strong&gt;lock tables tbl write;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;C2, C3, ..., C17: normal app connections, issuing &lt;strong&gt;insert, delete, update&lt;/strong&gt; on &lt;strong&gt;tbl&lt;/strong&gt;. Because of the lock, they are naturally blocked.&lt;/li&gt;
&lt;li&gt;We apply those last event we need to apply onto &lt;strong&gt;ghost&lt;/strong&gt;. No new events are coming our way because &lt;strong&gt;tbl&lt;/strong&gt; is blocked.&lt;/li&gt;
&lt;li&gt;C18: &lt;strong&gt;rename table tbl to tbl_old, ghost to tbl; &lt;/strong&gt;(blocked as well)&lt;/li&gt;
&lt;li&gt;C1: &lt;strong&gt;unlock tables&lt;/strong&gt;&lt;strong&gt;; &lt;/strong&gt;(everything gets released)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s consider the above, and see why it is flawed. But first, why it would typically work in the first place.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connections C2, ..., C17 came first, and C18 came later. Nevertheless MySQL prioritizes C18 and moves it up the queue of waiting queries on &lt;strong&gt;tbl&lt;/strong&gt;. When we &lt;strong&gt;unlock&lt;/strong&gt;, C18 is the first to execute.&lt;/li&gt;
&lt;li&gt;We only issue the &lt;strong&gt;rename&lt;/strong&gt; once we&#39;re satisfied we&#39;ve applied those changes. We only &lt;strong&gt;unlock&lt;/strong&gt; once we&#39;re satisfied that the &lt;strong&gt;rename&lt;/strong&gt; has been executed.&lt;/li&gt;
&lt;li&gt;If for some reason C1 disconnects before we issue the &lt;strong&gt;rename&lt;/strong&gt; - no problem, we just retry from scratch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What&#39;s the flaw?&lt;/h4&gt;
&lt;p&gt;We &lt;strong&gt;rename&lt;/strong&gt; when C1 holds the &lt;strong&gt;lock&lt;/strong&gt;. We check with C1 that it is alive and kicking. Yep, it&#39;s connected and holding the lock. Are you sure? Yep, I&#39;m good! Really really sure? Yep! OK then, let&#39;s &lt;strong&gt;rename!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&#34;Oh darn&#34;, says C1, &#34;now that you went ahead to &lt;strong&gt;rename&lt;/strong&gt;, but just before you actually sent the request, I decided to take time off and terminate&#34;. Or, more realistically, some job would kill C1.&lt;/p&gt;
&lt;p&gt;What happens now? The &lt;strong&gt;rename&lt;/strong&gt; is not there yet. All those queries get released, and are immediately applied onto &lt;strong&gt;tbl&lt;/strong&gt;, and &lt;em&gt;then&lt;/em&gt; the &lt;strong&gt;rename&lt;/strong&gt; applies, kicks all those changes into oblivion, and puts &lt;strong&gt;ghost&lt;/strong&gt; in place, where it immediately receives further writes.&lt;/p&gt;
&lt;p&gt;Those blocking queries were committed but never to be seen again.&lt;/p&gt;
&lt;p&gt;So here&#39;s another way to look at the problem: the &lt;strong&gt;rename&lt;/strong&gt; made it through even though the connection C1 died just prior to that, whereas we would have loved the &lt;strong&gt;rename&lt;/strong&gt; to abort upon such case.&lt;/p&gt;
&lt;p&gt;Is there a way in MySQL to cause an operation to &lt;strong&gt;fail or block&lt;/strong&gt; when another connection dies? It&#39;s the other way around! Connections hold locks, and those get released when they die!&lt;/p&gt;
&lt;p&gt;But there&#39;s a way...&lt;/p&gt;
&lt;h3&gt;Three step, safe, optimistic solution&lt;/h3&gt;
&lt;p&gt;Here are the steps to a safe solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C1: &lt;strong&gt;lock tables tbl write;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;C2, C3, ..., C17: normal app connections, issuing &lt;strong&gt;insert, delete, update&lt;/strong&gt; on &lt;strong&gt;tbl&lt;/strong&gt;. Because of the lock, they are naturally blocked.&lt;/li&gt;
&lt;li&gt;We apply those last event we need to apply onto &lt;strong&gt;ghost&lt;/strong&gt;. No new events are coming our way because &lt;strong&gt;tbl&lt;/strong&gt; is blocked.&lt;/li&gt;
&lt;li&gt;C18: checking that C1 is still alive, then &lt;strong&gt;rename table tbl to tbl_old&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;C19: checking to see that C18&#39;s &lt;strong&gt;rename&lt;/strong&gt; is in place (via &lt;strong&gt;show processlist&lt;/strong&gt;), &lt;strong&gt;and&lt;/strong&gt; that C1 is still alive; then issues: &lt;strong&gt;rename table ghost to tbl&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(meanwhile more queries approach &lt;strong&gt;tbl&lt;/strong&gt;, it doesn&#39;t matter, they all get deprioritized, same as C2...C17)&lt;/li&gt;
&lt;li&gt;C1: &lt;strong&gt;unlock tables&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What just happened? Let&#39;s first explain some stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C18&#39;s &lt;strong&gt;rename&lt;/strong&gt; gets prioritized over the DMLs, even though it came later. That is how MySQL prioritizes queries on metadata-locked tables.&lt;/li&gt;
&lt;li&gt;C18 checks C1 is still alive, but as before, there&#39;s always the chance C1 will die just at the wrong time -- we&#39;re going to address that.&lt;/li&gt;
&lt;li&gt;C19 is interested to see that C18 began execution, but potentially C18 will crash by the time C19 actually issues its own &lt;strong&gt;rename&lt;/strong&gt; -- we&#39;re going to address that&lt;/li&gt;
&lt;li&gt;C19&#39;s query sounds weird. At that time &lt;strong&gt;tbl&lt;/strong&gt; still exists. You&#39;d expect it to fail immediately -- but it does not. It&#39;s valid. This is because &lt;strong&gt;tbl&lt;/strong&gt;&#39;s metadata lock is in use.&lt;/li&gt;
&lt;li&gt;C19 gets prioritized over all the DMLs, but is known to be behind C18. The two stay in same order of arrival. So, C18 is known to execute before C19.&lt;/li&gt;
&lt;li&gt;When C1 unlocks, C18 executes first.&lt;/li&gt;
&lt;li&gt;Metadata lock is still in place on &lt;strong&gt;tbl&lt;/strong&gt; even though it doesn&#39;t actually exist, because of C19.&lt;/li&gt;
&lt;li&gt;C19 operates next.&lt;/li&gt;
&lt;li&gt;Finally all the DMLs execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What happens on failures?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If C1 dies just as C18 is about to issue the &lt;strong&gt;rename&lt;/strong&gt;, we get an outage: &lt;strong&gt;tbl&lt;/strong&gt; is renamed to &lt;strong&gt;tbl_old&lt;/strong&gt;, and the queries get released and complain the table is just not there.
&lt;ul&gt;
&lt;li&gt;C19 will not initiate because it is executed &lt;strong&gt;after&lt;/strong&gt; C18 and checks that C1 is alive -- which turns to be untrue.&lt;/li&gt;
&lt;li&gt;So we &lt;strong&gt;know&lt;/strong&gt; we have outage, and we quickly &lt;strong&gt;rename tbl_old to tbl;&lt;/strong&gt; and go drink coffee, then begin it all again.&lt;/li&gt;
&lt;li&gt;The outage is unfortunate, but does not put our data in danger.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If C1 happens to die just as C19 is about to issue its &lt;strong&gt;rename&lt;/strong&gt;, there&#39;s no data integrity: at this point we&#39;ve already asserted the tables are in sync. As C1 dies, C18 will immediately rename &lt;strong&gt;tbl&lt;/strong&gt; to &lt;strong&gt;tbl_old&lt;/strong&gt;. An outage will occur, but not for long, because C19 will next issue &lt;strong&gt;rename ghost to tbl&lt;/strong&gt;, and close the gap. We suffered a minor outage, but no rollback. We roll forward.&lt;/li&gt;
&lt;li&gt;If C18 happens to die just as C19 is about to issue its &lt;strong&gt;rename&lt;/strong&gt;, nothing bad happens: C19 is still blocking for as long as C1 is running. We find out C18 died, and release C1. C19 attempts to rename &lt;strong&gt;ghost&lt;/strong&gt; onto &lt;strong&gt;tbl&lt;/strong&gt;, but &lt;strong&gt;tbl&lt;/strong&gt; exists and the query fails. The metadata lock is released and all the queries resume operation on the original &lt;strong&gt;tbl&lt;/strong&gt;. The operation failed but without error. We will need to try the entire cycle again.&lt;/li&gt;
&lt;li&gt;If both C1 and C18 fail at the time C19 is about to begin its &lt;strong&gt;rename&lt;/strong&gt;, same as above.&lt;/li&gt;
&lt;li&gt;If C18 fails as C19 is already in place, same as above.&lt;/li&gt;
&lt;li&gt;If C1 fails as C19 is already in place, it&#39;s as good as having it issue the &lt;strong&gt;unlock tables&lt;/strong&gt;. We&#39;re happy.&lt;/li&gt;
&lt;li&gt;If C19 fails at any given point, we suffer outage. We revert by &lt;code&gt;rename tbl_old to tbl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This solution relies on the notion that if a previous connection failed, we would not be able to &lt;strong&gt;rename ghost to tbl&lt;/strong&gt; because the table would still be there. That&#39;s what we were looking for; but instead of looking at locks, which get released when a connection terminates, we used a persistent entity: a table.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The algorithm above is &lt;strong&gt;optimistic&lt;/strong&gt;: if no connections get weirdly killed, it&#39;s a valid locking solution, and queries &amp;amp; app are unaware that anything happened (granted, app will notice write latency). If connections do get weirdly killed, we get table-outage at worst case -- an outage that is already considered to be a valid solution anyhow. The algorithm will not allow data corruption.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New features I&#39;d like to see in MySQL 5.8</title>
      <link>/blog/2015/10/07/new-features-id-like-to-see-in-mysql-5-8/</link>
      <pubDate>Wed, 07 Oct 2015 10:02:16 +0000</pubDate>
      
      <guid>/blog/2015/10/07/new-features-id-like-to-see-in-mysql-5-8/</guid>
      <description>&lt;p&gt;Following up on Morgan Tocker&#39;s &lt;a href=&#34;http://www.tocker.ca/2015/09/14/what-would-you-like-to-see-in-mysql-5-8.html&#34;&gt;What would you like to see in MySQL 5.8?&lt;/a&gt;, having attended and participated at the &lt;a href=&#34;https://www.percona.com/live/europe-amsterdam-2015/sessions/mysql-58-dreaming-and-brainstorming&#34;&gt;brainstorming at Percona Live Amsterdam&lt;/a&gt;, and publishing this post while failing to comply with any of Morgan&#39;s suggested media, these are the features I would like to see in MySQL &lt;strong&gt;5.8&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamicly enable/disable &lt;strong&gt;log-bin&lt;/strong&gt; and &lt;strong&gt;log-slave-updates&lt;/strong&gt;&lt;br /&gt;
Today, when changing chef/puppet role of a server from a simple slave to an intermediate master and vice versa, a MySQL restart is required. This is a very big pain which makes replication automation complex, not to mention warmup times.&lt;/li&gt;
&lt;li&gt;&#34;&lt;strong&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man1/nice.1.html&#34;&gt;nice&lt;/a&gt;&lt;/strong&gt;&#34;.&lt;br /&gt;
I want to be able to execute a query that is &lt;em&gt;nice, i.e&lt;/em&gt; has lower priority; will not consume all resources; will stall/throttle so as to allow other queries to complete. Luis asked and I said this could be on a per statement basis, e.g. add a &lt;strong&gt;SQL_NICE&lt;/strong&gt; query hint. But I&#39;m unsure that would be the correct behavior. It also makes sense to do so on a per connection basis (perhaps provide connection attributed to hint &lt;em&gt;niceness&lt;/em&gt;?).&lt;/li&gt;
&lt;li&gt;Online-&lt;em&gt;ier&lt;/em&gt; &lt;strong&gt;ALTER TABLE&lt;/strong&gt;. I would in particular want it to apply the &lt;em&gt;nice&lt;/em&gt; feature, above. Otherwise throttle by user defined metrics.&lt;/li&gt;
&lt;li&gt;Online-&lt;em&gt;ier&lt;/em&gt; &lt;strong&gt;ALTER TABLE&lt;/strong&gt; in replication stream.  Can the slaves run the &lt;strong&gt;ALTER&lt;/strong&gt; statement in parallel?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Re-Group Commit&lt;/strong&gt;: in MTS, and when intermediate masters involved, copy+paste the group commit as applied on master as working downstream. I suspect this is easily achievable. The result: same parallelism for replicating slaves in all levels, whether they replicate directly from master or from 2nd, 3rd tier intermediate masters. Today parallelism decreases as we go downstream.&lt;/li&gt;
&lt;li&gt;Global user-defined-variables. I want to be able to define arbitrary (global) variables that I can later query via &lt;strong&gt;SELECT @@global.arbitrary&lt;/strong&gt;. This would be similar to HTML &lt;strong&gt;5&lt;/strong&gt;&#39;s &lt;strong&gt;&#34;data-*&#34;&lt;/strong&gt; attributes. I often wish I could tell &amp;amp; ask MySQL my puppet role; or the server status (is it live? Is it offline? Does it belong to a specific pool? etc.). Similar to &lt;strong&gt;&#34;loose-*&#34;&lt;/strong&gt; syntax, this could be a &lt;strong&gt;&#34;data-*&#34;&lt;/strong&gt; or &lt;strong&gt;&#34;user-*&#34;&lt;/strong&gt; name prefix system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will follow up on new &lt;em&gt;statements&lt;/em&gt; I would like to see in MySQL &lt;strong&gt;5.8&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The brainstorming session at PerconaLive, I should note, was pure joy, and apart from getting two nice furry dolphins I enjoyed the engagement, the diversity of ideas, and the fact Oracle engineers (Mark in particular) were very busy taking notes or otherwise openly discussing the viability of some requested features.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>