<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on code.openark.org</title>
    <link>/blog/tags/github/</link>
    <description>Recent content in Github on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 01 Aug 2016 19:19:00 +0000</lastBuildDate>
    <atom:link href="/blog/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introducing gh-ost: triggerless online schema migrations</title>
      <link>/blog/2016/08/01/introducing-gh-ost-triggerless-online-schema-migrations/</link>
      <pubDate>Mon, 01 Aug 2016 19:19:00 +0000</pubDate>
      
      <guid>/blog/2016/08/01/introducing-gh-ost-triggerless-online-schema-migrations/</guid>
      <description>&lt;p&gt;I&#39;m thoroughly happy to introduce &lt;a href=&#34;https://github.com/github/gh-ost&#34;&gt;&lt;strong&gt;gh-ost&lt;/strong&gt;&lt;/a&gt;: triggerless, controllable, auditable, testable, trusted online schema change tool &lt;a href=&#34;http://githubengineering.com/gh-ost-github-s-online-migration-tool-for-mysql/&#34;&gt;released today by GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gh-ost&lt;/em&gt; now powers our production schema migrations. We hit some serious limitations using &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html&#34;&gt;pt-online-schema-change&lt;/a&gt; on our large volume, high traffic tables, to the effect of driving our database to a near grinding halt or even to the extent of causing outages. With &lt;em&gt;gh-ost&lt;/em&gt;, we are now able to migrate our busiest tables at any time, peak hours and heavy workloads included, without causing impact to our service.&lt;/p&gt;
&lt;p&gt;gh-ost supports testing in production. It goes a long way to build trust, both in integrity and in control. Are your databases just too busy and you cannot run existing online-schema-change tools? Have you suffered outages due to migrations? Are you tired of babysitting migrations that run up to 3:00am? Tired of being the only one tailing logs? Please, take a look at &lt;em&gt;gh-ost&lt;/em&gt;. I believe it changes online migration paradigm.&lt;/p&gt;
&lt;p&gt;For a more thorough overview, please read the &lt;a href=&#34;http://githubengineering.com/gh-ost-github-s-online-migration-tool-for-mysql/&#34;&gt;announcement&lt;/a&gt; on the GitHub Engineering Blog, and proceed to the &lt;a href=&#34;https://github.com/github/gh-ost/blob/master/README.md&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gh-ost&lt;/em&gt; is open sourced under the MIT license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Orchestrator progress</title>
      <link>/blog/2015/12/23/orchestrator-progress/</link>
      <pubDate>Wed, 23 Dec 2015 18:01:59 +0000</pubDate>
      
      <guid>/blog/2015/12/23/orchestrator-progress/</guid>
      <description>&lt;p&gt;This comes mostly to reassure, having moved into GitHub: &lt;a href=&#34;https://github.com/outbrain/orchestrator&#34;&gt;orchestrator&lt;/a&gt; development continues.&lt;/p&gt;
&lt;p&gt;I will have the privilege of working on this open source solution in GitHub. There are a few directions we can take orchestrator to, and we will be looking into the possibilities. We will continue to strengthen the crash recovery process, and in fact I&#39;ve got a couple ideas on drastically shortening Pseudo-GTID recovery time as well as other debts. We will look into yet other directions, which we will share. My new and distinguished team will co-work on/with orchestrator and will no doubt provide useful and actionable input.&lt;/p&gt;
&lt;p&gt;Orchestrator continues to be open for pull requests, with a temporal latency in response time (it&#39;s the Holidays, mostly).&lt;/p&gt;
&lt;p&gt;Some Go(lang) limitations (namely the import path, I&#39;ll blog more about it) will most probably imply some changes to the code, which will be well communicated to existing collaborators.&lt;/p&gt;
&lt;p&gt;Most of all, we will keep orchestrator a generic solution, while keeping focus on what we think is most important - and there&#39;s some interesting vision here. Time will reveal as we make progress.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Joining GitHub</title>
      <link>/blog/2015/11/30/joining-github/</link>
      <pubDate>Mon, 30 Nov 2015 17:26:24 +0000</pubDate>
      
      <guid>/blog/2015/11/30/joining-github/</guid>
      <description>&lt;p&gt;Today was my last day at &lt;strong&gt;Booking.com&lt;/strong&gt;, and shortly I will be joining the team at &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;d like to thank the many kind, friendly &amp;amp; smart people I&#39;ve worked with at Booking.com!&lt;/p&gt;
&lt;p&gt;The challenges at Booking.com are big. There is such a diversity within the technology stack; even within the database range. A solution that &lt;em&gt;works&lt;/em&gt; on all the various Booking.com production environments is something to value. Indeed, the Booking.com Production environment it is an amazing playground for developers, offering high volume, large numbers, and differing workloads to tackle. Your code just gets hammered down and you get very quick feedback on whether you did it right or wrong.&lt;/p&gt;
&lt;p&gt;I was happy to have worked on serious reliability and operational topics, and to have made a meaningful contribution.&lt;/p&gt;
&lt;p&gt;Joining GitHub, I&#39;m to be a systems engineer in a great team (friends included), building great products, in and around the database zone, delivering open source, pretty much expecting to do awesome stuff! That, and the swag.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Forking Golang repositories on GitHub and managing the import path</title>
      <link>/blog/2015/11/23/forking-golang-repositories-on-github-and-managing-the-import-path/</link>
      <pubDate>Mon, 23 Nov 2015 14:22:34 +0000</pubDate>
      
      <guid>/blog/2015/11/23/forking-golang-repositories-on-github-and-managing-the-import-path/</guid>
      <description>&lt;p&gt;Problem: there&#39;s an awesome Golang project on GitHub which you want to fork. You want to develop &amp;amp; collaborate on that fork, but the golang import path, in your source code, still references the original path, breaking everything.&lt;/p&gt;
&lt;p&gt;A couple solutions offered below. First, though, let&#39;s get some names.&lt;/p&gt;
&lt;h3&gt;A sample case, the problem at hand&lt;/h3&gt;
&lt;p&gt;There&#39;s an awesome tool on &lt;strong&gt;&lt;em&gt;http://github.com/awsome-org/tool&lt;/em&gt;&lt;/strong&gt;. You successfully fork it onto &lt;strong&gt;&lt;em&gt;http://github.com/awesome-you/tool&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You want to collaborate on &lt;strong&gt;&lt;em&gt;http://github.com/awesome-you/tool&lt;/em&gt;&lt;/strong&gt;; you wish to pull, commit &amp;amp; push. Maybe you want to send pull requests to the origin.&lt;/p&gt;
&lt;p&gt;The following is commonly found throughout &lt;strong&gt;.go&lt;/strong&gt; files in the repository:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;import (
    &#34;github.com/awesome-org/tool/config&#34;
    &#34;github.com/awesome-org/tool/driver&#34;
    &#34;github.com/awesome-org/tool/net&#34;
    &#34;github.com/awesome-org/tool/util&#34;
)&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;go get http://github.com/awesome-you/tool&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;golang&lt;/em&gt; creates your &lt;strong&gt;$GOPATH/src/github.com/awesome-you/tool/&lt;/strong&gt;, which is awesome. However, as you resolve dependencies via&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;cd $GOPATH/src/github.com/awesome-you/tool/ ; go get ./...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;golang&lt;/em&gt; digs into the source code, finds references to &lt;strong&gt;github.com/awesome-org/tool/config&lt;/strong&gt;, &lt;strong&gt;github.com/awesome-org/tool/driver&lt;/strong&gt; etc, and fetches &lt;em&gt;those&lt;/em&gt; from &lt;strong&gt;http://github.com/awsome-org/tool&lt;/strong&gt; and onto &lt;strong&gt;$GOPATH/src/github.com/awesome-org/tool/&lt;/strong&gt;, which is not awesome. You actually have two copies of the code, one from your fork, one from the origin, and your own fork will be largely ignored as it mostly points back to the origin.&lt;/p&gt;
&lt;h3&gt;A bad solution&lt;/h3&gt;
&lt;p&gt;The dirty, bad solution would be for you to go over the source code and replace &lt;strong&gt;&#34;github.com/awesome-org/tool&#34;&lt;/strong&gt; entries with &lt;strong&gt;&#34;github.com/awesome-you/tool&#34;&lt;/strong&gt;. It is bad for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will not be able to further pull changes from upstream&lt;/li&gt;
&lt;li&gt;You will not be able to pull-request and push your own changes upstream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!--more--&gt;When I say &#34;You will not be able&#34; I mean &#34;in a reasonable, developer-friendly manner&#34;. The code will be incompatible with upstream and you have effectively detached your code. You will need to keep editing and re-editing those entries anytime you wish to pull/push upstream.&lt;/p&gt;
&lt;h3&gt;Solution #1: add remote&lt;/h3&gt;
&lt;p&gt;Described in &lt;a href=&#34;http://blog.campoy.cat/2014/03/github-and-go-forking-pull-requests-and.html&#34;&gt;GitHub and Go: forking, pull requests, and go-getting&lt;/a&gt;, follow these procedures:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;go get http://github.com/awesome-org/tool
git remote add &lt;strong&gt;awesome-you-fork&lt;/strong&gt; http://github.com/awesome-you/tool&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You&#39;re adding your repository as &lt;a href=&#34;http://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes&#34;&gt;remote&lt;/a&gt;. You will from now on need to explicitly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;git pull --rebase &lt;strong&gt;awesome-you-fork&lt;/strong&gt;
git push &lt;strong&gt;awesome-you-fork&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you forget to add the &lt;strong&gt;&#34;awesome-you-fork&#34;&lt;/strong&gt; argument, you are pulling and pushing from upstream.&lt;/p&gt;
&lt;h3&gt;Solution #2: cheat &#34;go get&#34;, DIY&lt;/h3&gt;
&lt;p&gt;The problem began with the &lt;strong&gt;go get&lt;/strong&gt; command, which copied the URI path onto &lt;strong&gt;$GOPATH/src&lt;/strong&gt;. However &lt;strong&gt;go get&lt;/strong&gt; implicitly issues a git clone, and we can do the same ourselves. We will dirty our hands just once, and then benefit from an ambiguous-less environment.&lt;/p&gt;
&lt;p&gt;We will now create our git repository in the name of &lt;strong&gt;awesome-org&lt;/strong&gt; but with the contents of &lt;strong&gt;awesome-you&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;cd $GOPATH
mkdir -p {src,bin,pkg}
mkdir -p &lt;strong&gt;src/github.com/awesome-org/&lt;/strong&gt;
cd src/github.com/awesome-org/
git clone git@github.com:&lt;strong&gt;awesome-you/tool.git&lt;/strong&gt; # OR: git clone https://github.com/&lt;strong&gt;awesome-you/tool.git&lt;/strong&gt;
cd tool/
go get ./...&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;mkdir -p {src,bin,pkg}&lt;/strong&gt; is there just in case you do not have anything setup in your &lt;strong&gt;$GOPATH&lt;/strong&gt;. We then create the repository path under the name of &lt;strong&gt;awesome-org&lt;/strong&gt;, but once inside clone from &lt;strong&gt;awesome-you&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The source code&#39;s import path fits your directory layout now, but as you push/pull you are only speaking to your own &lt;strong&gt;awesome-you&lt;/strong&gt; repository.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>