<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysqldump on code.openark.org</title>
    <link>/blog/tags/mysqldump/</link>
    <description>Recent content in Mysqldump on code.openark.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 06 Jul 2011 08:41:00 +0000</lastBuildDate>
    <atom:link href="/blog/tags/mysqldump/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Useful sed / awk liners for MySQL</title>
      <link>/blog/mysql/useful-sed-awk-liners-for-mysql/</link>
      <pubDate>Wed, 06 Jul 2011 08:41:00 +0000</pubDate>
      
      <guid>/blog/mysql/useful-sed-awk-liners-for-mysql/</guid>
      <description>&lt;p&gt;Listing some useful &lt;strong&gt;sed&lt;/strong&gt; / &lt;strong&gt;awk&lt;/strong&gt; liners to use with MySQL. I use these on occasion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sed&lt;/strong&gt;, &lt;strong&gt;awk&lt;/strong&gt; &amp;amp; &lt;strong&gt;grep&lt;/strong&gt; have many overlapping features. Some simple tasks can be performed by either. For example, stripping empty lines can be performed by either:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;grep&lt;/strong&gt; &#39;.&#39;
&lt;strong&gt;awk&lt;/strong&gt; &#39;/./&#39;
&lt;strong&gt;sed&lt;/strong&gt; &#39;/./!d&#39;
&lt;strong&gt;grep&lt;/strong&gt; -v &#39;^$&#39;
&lt;strong&gt;awk&lt;/strong&gt; &#39;!/^$/&#39;
&lt;strong&gt;sed&lt;/strong&gt; &#39;/^$/d&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s a matter of taste &amp;amp; convention which tool and variation to use. So for any script I suggest, there may be many variations, possibly cleaner, shorter; feel free to comment.&lt;/p&gt;
&lt;h4&gt;mysqldump&lt;/h4&gt;
&lt;p&gt;The output of &lt;em&gt;mysqldump&lt;/em&gt; is in particular useful when one wishes to make transformation on data or metadata.&lt;span id=&#34;more-3685&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert MyISAM tables to InnoDB:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysqldump | sed -e &#39;s/^) ENGINE=MyISAM/) ENGINE=InnoDB/&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve had several occasion when people said this type of conversion assumes no &lt;strong&gt;&#39;ENGINE=MyISAM&#39;&lt;/strong&gt; snippet exists within row data. This is not so. The &lt;strong&gt;&#39;^) ENGINE=MyISAM/&#39;&lt;/strong&gt; pattern strictly requires that this text is outside row data. No row data begins with a &lt;strong&gt;&#39;)&#39;&lt;/strong&gt;. This is a safe conversion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert InnoDB to InnoDB plugin, compressed tables:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysqldump | sed -e &#39;s/^) ENGINE=InnoDB/) ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8/&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slice out a specific database (assumes existence of the &lt;strong&gt;USE&lt;/strong&gt; statement):&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;sed -n &#34;/^USE \`employees\`/,/^USE \`/p&#34;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slice out a specific table:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;sed -n &#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Combine the above two statements to slice a specific table from a specific database:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;sed -n &#34;/^USE \`employees\`/,/^USE \`/p&#34; | sed -n &#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;See also &lt;a rel=&#34;bookmark&#34; href=&#34;http://code.openark.org/blog/mysql/on-restoring-a-single-table-from-mysqldump&#34;&gt;On restoring a single table from mysqldump&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;my.cnf&lt;/h4&gt;
&lt;p&gt;Some &lt;em&gt;my.cnf&lt;/em&gt; files are just a mess to read. Here&#39;s some normalizing scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strip a &lt;em&gt;my.cnf&lt;/em&gt; file from comments, remove blank lines, normalize spaces:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | sed &#39;/^#/d&#39; | sed &#39;/^$/d&#39; | sed -e &#39;s/[ \t]\+//g&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Same, but only present &lt;strong&gt;[mysqld]&lt;/strong&gt; section parameters:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | sed -n &#39;/^\[mysqld\]/,/^\[/p&#39; | sed &#39;/^\[/d&#39; | sed &#39;/^#/d&#39; | sed &#39;/^$/d&#39; | sed -e &#39;s/[ \t]\+//g&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Only present &lt;strong&gt;[mysqld]&lt;/strong&gt; section parameters, tab delimited (this is useful in exporting and comparing instance parameters):&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | sed -n &#39;/^\[mysqld\]/,/^\[/p&#39; | sed &#39;/^\[/d&#39; | sed &#39;/^#/d&#39; | sed &#39;/^$/d&#39; | sed -e &#39;s/[ \t]\+//g&#39; | sed -e &#39;s/=/\t/&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Multi-word parameters in &lt;em&gt;my.cnf&lt;/em&gt; can be written with either hyphens or underscores. &lt;strong&gt;innodb_file_per_&lt;/strong&gt;table is the same as &lt;strong&gt;innodb-file-per-table&lt;/strong&gt;, as well as &lt;strong&gt;innodb_file-per_table&lt;/strong&gt;. The following normalizes the parameter names to using underscores only, keeping from changing values (e.g. &lt;strong&gt;&#39;mysql-bin&#39; &lt;/strong&gt;parameter value should not change). It isn&#39;t pretty!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat my.sandbox.cnf | awk -F &#34;=&#34; &#39;NF &amp;lt; 2 {print} sub(&#34;=&#34;, &#34;=~placeholder~=&#34;) {print}&#39; | awk -F &#34;=~placeholder~=&#34; &#39;NF &amp;lt; 2 {gsub(&#34;-&#34;, &#34;_&#34;, $0); print} NF==2 {gsub(&#34;-&#34;, &#34;_&#34;, $1); print $1 &#34;=&#34; $2}&#39;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;_mcePaste&#34; class=&#34;mcePaste&#34; style=&#34;position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;&#34;&gt;grep &#34;.&#34;&lt;br&gt;
awk &#39;/./&#39;&lt;br&gt;
sed &#39;/./!d&#39;&lt;br&gt;
grep -v &#39;^$&#39;&lt;br&gt;
awk &#39;!/^$/&#39;&lt;br&gt;
sed &#39;/^$/d&#39;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Upgrading to Barracuda &amp; getting rid of huge ibdata1 file</title>
      <link>/blog/mysql/upgrading-to-barracuda-getting-rid-of-huge-ibdata1-file/</link>
      <pubDate>Tue, 15 Feb 2011 10:01:15 +0000</pubDate>
      
      <guid>/blog/mysql/upgrading-to-barracuda-getting-rid-of-huge-ibdata1-file/</guid>
      <description>&lt;p&gt;Some of this is old stuff, but more people are now converting to InnoDB plugin, so as to enjoy table compression, performance boosts. Same holds for people converting to Percona&#39;s XtraDB. InnoDB plugin requires &lt;strong&gt;innodb_file_per_table&lt;/strong&gt;. No more shared tablespace file.&lt;/p&gt;
&lt;p&gt;So your &lt;strong&gt;ibdata1&lt;/strong&gt; file is some &lt;strong&gt;150GB&lt;/strong&gt;, and it won&#39;t reduce. Really, it won&#39;t reduce. You set &lt;strong&gt;innodb_file_per_table=1&lt;/strong&gt;, do &lt;strong&gt;ALTER TABLE t ENGINE=InnoDB&lt;/strong&gt; (optionally &lt;strong&gt;ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8&lt;/strong&gt;), and you get all your tables in file-per-table &lt;strong&gt;.ibd&lt;/strong&gt; files.&lt;/p&gt;
&lt;p&gt;But the original &lt;strong&gt;ibdata1&lt;/strong&gt; file is still there. It has to be there, don&#39;t delete it! It contains more than your old data.&lt;/p&gt;
&lt;p&gt;InnoDB tablespace files never reduce in size, it&#39;s an old-time annoyance. The only way to go round it, if you need the space, is to completely drop them and start afresh. That&#39;s one of the things so nice about file-per-table: an &lt;strong&gt;ALTER TABLE&lt;/strong&gt; actually creates a new tablespace file and drops the original one.&lt;/p&gt;
&lt;h4&gt;The procedure&lt;/h4&gt;
&lt;p&gt;The procedure is somewhat painful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dump everything logically (either use &lt;em&gt;mysqldump&lt;/em&gt;, &lt;a href=&#34;http://www.maatkit.org/doc/mk-parallel-dump.html&#34;&gt;mk-parallel-dump&lt;/a&gt;, or do it your own way)&lt;/li&gt;
&lt;li&gt;Erase your data (literally, delete everything under your &lt;strong&gt;datadir&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Generate a new empty database&lt;/li&gt;
&lt;li&gt;Load your dumped data.&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Using replication&lt;/h4&gt;
&lt;p&gt;Replication makes this less painful. Set up a slave, have it follow up on the master.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stop your slave.&lt;/li&gt;
&lt;li&gt;Make sure to backup the replication position (e.g. write &lt;strong&gt;SHOW SLAVE STATUS&lt;/strong&gt; on a safe location, or copy &lt;strong&gt;master.info&lt;/strong&gt; file).&lt;/li&gt;
&lt;li&gt;Work out the dump-erase-generate-load steps on the slave.&lt;/li&gt;
&lt;li&gt;Reattach the slave to the master using saved data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this to succeed you must keep enough binary logs on the master for the entire dump-load period, which could be lengthy.&lt;/p&gt;
&lt;h4&gt;Upgrading to barracuda&lt;/h4&gt;
&lt;p&gt;If you wish to upgrade your InnoDB tables to &lt;em&gt;Barracuda&lt;/em&gt; format, my advice is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow the steps above to generate a file-per-table working slave&lt;/li&gt;
&lt;li&gt;Stop the slave&lt;/li&gt;
&lt;li&gt;Configure &lt;strong&gt;skip_slave_start&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Restart MySQL&lt;/li&gt;
&lt;li&gt;One by one do the &lt;strong&gt;ALTER TABLE&lt;/strong&gt; into &lt;em&gt;Barracuda&lt;/em&gt; format (&lt;strong&gt;ROW_FORMAT=COMPACT&lt;/strong&gt; or &lt;strong&gt;ROW_FORMAT=COMPRESSED&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that if you&#39;re about to do table compression, the &lt;strong&gt;ALTER&lt;/strong&gt; statements become &lt;em&gt;considerably&lt;/em&gt; slower the better the compression is.&lt;/p&gt;
&lt;p&gt;If your dataset is very large, and you can&#39;t keep so many binary logs, you may wish to break step &lt;strong&gt;5&lt;/strong&gt; above into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALTER a large table&lt;/li&gt;
&lt;li&gt;Restart MySQL&lt;/li&gt;
&lt;li&gt;Start slave, wait for it to catch up&lt;/li&gt;
&lt;li&gt;Restart MySQL again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and do the same for all large tables.&lt;/p&gt;
&lt;h4&gt;Why all these restarts?&lt;/h4&gt;
&lt;p&gt;I&#39;ve been upgrading to Barracuda for a long time now. I have clearly noticed that &lt;strong&gt;ALTER&lt;/strong&gt; into a &lt;strong&gt;COMPRESSED&lt;/strong&gt; format works considerably slower after the slave has done some &#34;real work&#34;. This in particular relates to the last &#34;renaming table&#34; stage. There was a bug with earlier InnoDB plugin versions which made this stage hang. It was solved. But it still takes some time for this last, weird stage, where the new replacement table is complete, and it&#39;s actually been renamed in place of the old table, and the old table renamed into something like &#34;#sql-12345.ibd&#34;, and all that needs to be done is have it dropped, and... Well, it takes time.&lt;/p&gt;
&lt;p&gt;My observation is it works faster on a freshly started server. Which is why I take the bother to restart MySQL before each large table conversion.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An argument for using mysqldump</title>
      <link>/blog/mysql/an-argument-for-using-mysqldump/</link>
      <pubDate>Tue, 09 Nov 2010 06:29:54 +0000</pubDate>
      
      <guid>/blog/mysql/an-argument-for-using-mysqldump/</guid>
      <description>&lt;p&gt;I fully agree with Morgan&#39;s &lt;a href=&#34;http://www.mysqlperformanceblog.com/2010/11/08/an-argument-for-not-using-mysqldump-in-production/&#34;&gt;An argument for not using mysqldump&lt;/a&gt;. This post does not come to contradict it, but rather shed a positive light on &lt;em&gt;mysqldump&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I usually prefer an LVM snapshot based backup, or using XtraBackup. And, with databases as large as dozens of GB and above, I consider &lt;em&gt;mysqldump&lt;/em&gt; to be a poor alternative. Poor in runtime, poor in overhead while taking the backup.&lt;/p&gt;
&lt;p&gt;However once in a while I get to be reminded that &lt;em&gt;mysqldump just works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As a recent example, I had a server which was killed after an ALTER TABLE statement hanged forever (table already ALTERed, but old scheme never dropped). The old table data still hanged around the file system, but was not recognized by InnoDB. Trying out DISCARD TABLESPACE did not do the job, and eventually file was dropped.&lt;/p&gt;
&lt;p&gt;So far, reasonable. InnoDB would complain about some table it never recognized in the first place, but all would work. That is, until backup was concerned. With &lt;em&gt;innobackup&lt;/em&gt; or XtraBackup the restore would fail on some internal problem. LVM would work, but would only copy+paste the problem: &lt;em&gt;innobackup&lt;/em&gt; would never again be able to be used on this database.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;It turned out a &lt;strong&gt;120GB&lt;/strong&gt; InnoDB compressed data (roughly &lt;strong&gt;250GB&lt;/strong&gt; uncompressed) would dump in &lt;strong&gt;--single-transaction&lt;/strong&gt; in a matter of &lt;strong&gt;4&lt;/strong&gt; hours and would restore in a matter of some &lt;strong&gt;20&lt;/strong&gt; hours. A whole lot more than the &lt;strong&gt;3&lt;/strong&gt; hours total it would take for an LVM backup for that database. But the data would load well; no missing tablespaces.&lt;/p&gt;
&lt;p&gt;I&#39;ve had similar incidents in the past. Not to mention the issue of compressing shared tablespace file.&lt;/p&gt;
&lt;p&gt;There&#39;s something about being able to say &#34;&lt;em&gt;I&#39;m not sure how long this is going to take; maybe a day or two. But in the end, we will have problems P1, P2 &amp;amp; P3 resolved&lt;/em&gt;&#34;.&lt;/p&gt;
&lt;p&gt;I like the &lt;em&gt;clean state&lt;/em&gt; you get from a &lt;em&gt;mysqldump&lt;/em&gt; restore.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On restoring a single table from mysqldump</title>
      <link>/blog/mysql/on-restoring-a-single-table-from-mysqldump/</link>
      <pubDate>Tue, 01 Dec 2009 10:25:00 +0000</pubDate>
      
      <guid>/blog/mysql/on-restoring-a-single-table-from-mysqldump/</guid>
      <description>&lt;p&gt;Following &lt;a href=&#34;http://everythingmysql.ning.com/profiles/blogs/restore-one-table-from-an-all&#34;&gt;Restore one table from an ALL database dump&lt;/a&gt; and &lt;a href=&#34;http://gtowey.blogspot.com/2009/11/restore-single-table-from-mysqldump.html&#34;&gt;Restore a Single Table From mysqldump&lt;/a&gt;, I would like to add my own thoughts and comments on the subject.&lt;/p&gt;
&lt;p&gt;I also wish to note performance issues with the two suggested solutions, and offer improvements.&lt;/p&gt;
&lt;h4&gt;Problem relevance&lt;/h4&gt;
&lt;p&gt;While the problem is interesting, I just want to note that it is relevant in very specific database dimensions. Too small - and it doesn&#39;t matter how you solve it (e.g. just open vi/emacs and copy+paste). Too big - and it would not be worthwhile to restore from &lt;em&gt;mysqldump&lt;/em&gt; anyway. I would suggest that the problem is interesting in the whereabouts of a few dozen GB worth of data.&lt;/p&gt;
&lt;h4&gt;Problem recap&lt;/h4&gt;
&lt;p&gt;Given a dump file (generated by mysqldump), how do you restore a single table, without making any changes to other tables?&lt;/p&gt;
&lt;p&gt;Let&#39;s review the two referenced solutions. I&#39;ll be using the &lt;a href=&#34;http://dev.mysql.com/doc/employee/en/employee.html&#34;&gt;employees db&lt;/a&gt; on &lt;a href=&#34;https://launchpad.net/mysql-sandbox&#34;&gt;mysql-sandbox&lt;/a&gt; for testing. I&#39;ll choose a very small table to restore: &lt;strong&gt;departments&lt;/strong&gt; (only a few rows in this table).&lt;/p&gt;
&lt;h4&gt;Security based solution&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://everythingmysql.ning.com/profiles/blogs/restore-one-table-from-an-all&#34;&gt;&lt;strong&gt;Chris&lt;/strong&gt;&lt;/a&gt; offers to create a special purpose account, which will only have write (CREATE, INSERT, etc.) privileges on the particular table to restore. Cool hack! But, I&#39;m afraid, not too efficient, for two reasons:&lt;span id=&#34;more-1630&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MySQL needs to process all irrelevant queries (ALTER, INSERT, ...) only to disallow them due to access violation errors.&lt;/li&gt;
&lt;li&gt;Assuming restore is from remote host, we overload the network with all said irrelevant queries.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just how inefficient? Let&#39;s time it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;mysql&amp;gt; grant usage on *.* to &#39;restoreuser&#39;@&#39;localhost&#39;;
mysql&amp;gt; grant select on *.* to &#39;restoreuser&#39;@&#39;localhost&#39;;
mysql&amp;gt; grant all on employees.departments to &#39;restoreuser&#39;@&#39;localhost&#39;;

$ time mysql --user=restoreuser --socket=/tmp/mysql_sandbox21701.sock --force employees &amp;lt; /tmp/employees.sql
...
ERROR 1142 (42000) at line 343: INSERT command denied to user &#39;restoreuser&#39;@&#39;localhost&#39; for table &#39;titles&#39;
ERROR 1142 (42000) at line 344: ALTER command denied to user &#39;restoreuser&#39;@&#39;localhost&#39; for table &#39;titles&#39;
...
(lot&#39;s of these messages)
...

real&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;0m31.945s&lt;/strong&gt;
user&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m6.328s
sys&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.508s&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, at about &lt;strong&gt;30&lt;/strong&gt; seconds to restore a 9 rows table.&lt;/p&gt;
&lt;h4&gt;Text filtering based solution.&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://gtowey.blogspot.com/2009/11/restore-single-table-from-mysqldump.html&#34;&gt;&lt;strong&gt;gtowey&lt;/strong&gt;&lt;/a&gt; offers parsing the dump file beforehand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, parse with &lt;em&gt;grep&lt;/em&gt;, to detect rows where tables are referenced within dump file&lt;/li&gt;
&lt;li&gt;Second, parse with &lt;em&gt;sed&lt;/em&gt;, extracting relevant rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s time this one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;$ time grep -n &#39;Table structure&#39; /tmp/employees.sql
23:-- Table structure for table `departments`
48:-- Table structure for table `dept_emp`
89:-- Table structure for table `dept_manager`
117:-- Table structure for table `employees`
161:-- Table structure for table `salaries`
301:-- Table structure for table `titles`

real&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;0m0.397s&lt;/strong&gt;
user&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.232s
sys&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.164s

$ time sed -n 23,48p /tmp/employees.sql | ./use employees

real&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;0m0.562s&lt;/strong&gt;
user&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.380s
sys&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.176s&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much faster: about &lt;strong&gt;1&lt;/strong&gt; second, compared to &lt;strong&gt;30&lt;/strong&gt; seconds from above.&lt;/p&gt;
&lt;p&gt;Nevertheless, I find two issues here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A correctness problem: this solution somewhat assumes that there&#39;s only a single table with desired name. I say &#34;somewhat&#34; since it leaves this for the user.&lt;/li&gt;
&lt;li&gt;An efficiency problem: it reads the dump file &lt;em&gt;twice&lt;/em&gt;. First parsing it with &lt;em&gt;grep&lt;/em&gt;, then with &lt;em&gt;sed&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;A third solution&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;sed&lt;/em&gt; is much stronger than presented. In fact, the inquiry made by &lt;em&gt;grep&lt;/em&gt; in gtowey&#39;s solution can be easily handled by &lt;em&gt;sed&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;$ time sed -n &#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34; /tmp/employees.sql | ./use employees

real&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;0m0.573s&lt;/strong&gt;
user&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.416s
sys&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0m0.152s&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the &lt;strong&gt;&#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34;&lt;/strong&gt; part tells &lt;em&gt;sed&lt;/em&gt; to only print those rows starting from the &lt;strong&gt;departments&lt;/strong&gt; table structure, and ending in the next table structure (this is for clarity: had department been the last table, there would not be a next table, but we could nevertheless solve this using other anchors).&lt;/p&gt;
&lt;p&gt;And, we only do it in &lt;strong&gt;0.57&lt;/strong&gt; seconds: about half the time of previous attempt.&lt;/p&gt;
&lt;p&gt;Now, just to be more correct, we only wish to consider the &lt;strong&gt;employees.department&lt;/strong&gt; table. So, &lt;em&gt;assuming&lt;/em&gt; there&#39;s more than one database dumped (and, by consequence, &lt;strong&gt;USE&lt;/strong&gt; statements in the dump-file), we use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;cat /tmp/employees.sql | sed -n &#34;/^USE \`employees\`/,/^USE \`/p&#34; | sed -n &#34;/^-- Table structure for table \`departments\`/,/^-- Table structure for table/p&#34; | ./use employees&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Further notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;All tests used warmed-up caches.&lt;/li&gt;
&lt;li&gt;The sharp eyed readers would notice that &lt;strong&gt;departments&lt;/strong&gt; is the first table in the dump file. Would that give an unfair advantage to the parsing-based restore methods? The answer is no. I&#39;ve created an &lt;strong&gt;xdepartments&lt;/strong&gt; table, to be located at the end of the dump. The difference in time is neglectful and inconclusive; we&#39;re still at ~0.58-0.59 seconds. The effect will be more visible on really large dumps; but then, so would the security-based effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;strong&gt;UPDATE&lt;/strong&gt;: see also following similar post: &lt;a href=&#34;http://blog.tsheets.com/2008/tips-tricks/extract-a-single-table-from-a-mysqldump-file.html&#34;&gt;Extract a Single Table from a mysqldump File&lt;/a&gt;]&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Classic-Shell-Scripting-Arnold-Robbins/dp/0596005954/ref=sr_1_1&#34;&gt;&lt;img class=&#34;alignright&#34; title=&#34;classic-shell-scripting&#34; src=&#34;http://code.openark.org/blog/wp-content/uploads/2009/12/classic-shell-scripting.png&#34; alt=&#34;classic-shell-scripting&#34; width=&#34;144&#34; height=&#34;189&#34; scale=&#34;0&#34;&gt;&lt;/a&gt;Its is always best to test on large datasets, to get a feel on performance.&lt;/p&gt;
&lt;p&gt;It&#39;s best to save MySQL the trouble of parsing &amp;amp; ignoring statements. Scripting utilities like &lt;em&gt;sed&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt; &amp;amp; &lt;em&gt;grep&lt;/em&gt; have been around for ages, and are well optimized. They excel at text processing.&lt;/p&gt;
&lt;p&gt;I&#39;ve used &lt;em&gt;sed&lt;/em&gt; many times in transforming dump outputs; for example, in converting MyISAM to InnoDB tables; to convert Antelope InnoDB tables to Barracuda format, etc. grep &amp;amp; awk are also very useful.&lt;/p&gt;
&lt;p&gt;May I recommend, at this point, reading &lt;a href=&#34;http://www.amazon.com/Classic-Shell-Scripting-Arnold-Robbins/dp/0596005954/ref=sr_1_1&#34;&gt;Classic Shell Scripting&lt;/a&gt;, a very easy to follow book, which lists the most popular command line utilities like &lt;em&gt;grep&lt;/em&gt;, &lt;em&gt;sed&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt;, &lt;em&gt;sort&lt;/em&gt;, (countless more) and shell scripting in general. While most of these utilities are well known, the book excels in providing suprisingly practical, simple solution to common tasks.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reasons to use innodb_file_per_table</title>
      <link>/blog/mysql/reasons-to-use-innodb_file_per_table/</link>
      <pubDate>Thu, 21 May 2009 05:40:42 +0000</pubDate>
      
      <guid>/blog/mysql/reasons-to-use-innodb_file_per_table/</guid>
      <description>&lt;p&gt;When working with InnoDB, you have two ways for managing the tablespace storage:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Throw everything in one big file (optionally split).&lt;/li&gt;
&lt;li&gt;Have one file per table.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will discuss the advantages and disadvantages of the two options, and will strive to convince that &lt;strong&gt;innodb_file_per_table&lt;/strong&gt; is preferable.&lt;/p&gt;
&lt;h4&gt;A single tablespace&lt;/h4&gt;
&lt;p&gt;Having everything in one big file means all tables and indexes, from &lt;em&gt;all schemes&lt;/em&gt;, are &#39;mixed&#39; together in that file.&lt;/p&gt;
&lt;p&gt;This allows for the following nice property: free space can be shared between different tables and different schemes. Thus, if I purge many rows from my &lt;strong&gt;log&lt;/strong&gt; table, the now unused space can be occupied by new rows of any other table.&lt;/p&gt;
&lt;p&gt;This same nice property also translates to a not so nice one: data can be greatly fragmented across the tablespace.&lt;/p&gt;
&lt;p&gt;An annoying property of InnoDB&#39;s tablespaces is that they never shrink. So after purging those rows from the &lt;strong&gt;log&lt;/strong&gt; table, the tablespace file (usually &lt;strong&gt;ibdata1&lt;/strong&gt;) still keeps the same storage. It does not release storage to the file system.&lt;/p&gt;
&lt;p&gt;I&#39;ve seen more than once how certain tables are left unwatched, growing until disk space reaches 90% and SMS notifications start beeping all around.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s little to do in this case. Well, one can always purge the rows. Sure, the space would be reused by InnoDB. But having a file which consumes some 80-90% of disk space is a performance catastrophe. It means the disk needle needs to move large distances. Overall disk performance runs very low.&lt;/p&gt;
&lt;p&gt;The best way to solve this is to setup a new slave (after purging of the rows), and dump the data into that slave.&lt;/p&gt;
&lt;h4&gt;InnoDB Hot Backup&lt;/h4&gt;
&lt;p&gt;The funny thing is, the &lt;strong&gt;ibbackup&lt;/strong&gt; utility will copy the tablespace file as it is. If it was 120GB, of which only 30GB are used, you still get a 120GB backed up and restored.&lt;/p&gt;
&lt;h4&gt;mysqldump, mk-parallel-dump&lt;/h4&gt;
&lt;p&gt;mysqldump would be your best choice if you only had the original machine to work with. Assuming you&#39;re only using InnoDB, a dump with &lt;strong&gt;--single-transaction&lt;/strong&gt; will do the job. Or you can utilize &lt;a title=&#34;Maatkit: mk-parallel-dump&#34; href=&#34;http://www.maatkit.org/&#34;&gt;mk-parallel-dump&lt;/a&gt; to speed things up (depending on your dump method and accessibility needs, mind the locking).&lt;/p&gt;
&lt;h4&gt;innodb_file_per_table&lt;/h4&gt;
&lt;p&gt;With this parameter set, a &lt;strong&gt;.ibd&lt;/strong&gt; file is created per table. What we get is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tablespace is not shared among different tables, and certainly not among different schemes.&lt;/li&gt;
&lt;li&gt;Each file is considered a tablespace of its own.&lt;/li&gt;
&lt;li&gt;Again, tablespace never reduces in size.&lt;/li&gt;
&lt;li&gt;It is possible to regain space per tablespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wait. The last two seem conflicting, don&#39;t they? Let&#39;s explain.&lt;/p&gt;
&lt;p&gt;In our &lt;strong&gt;log&lt;/strong&gt; table example, we purge many rows (up to 90GB of data is removed). The &lt;strong&gt;.ibd&lt;/strong&gt; file does not shrink. But we &lt;em&gt;can&lt;/em&gt; do:&lt;/p&gt;
&lt;blockquote&gt;ALTER TABLE log ENGINE=InnoDB&lt;/blockquote&gt;
&lt;p&gt;What will happen is that a new, temporary file is created, into which the table is rebuilt. Only existing data is added to the new table. Once comlete, the original table is removed, and the new table renamed as the original table.&lt;/p&gt;
&lt;p&gt;Sure, this takes a long time, during which the table is completely locked: no writes and no reads allowed. But still - it allows us to regain disk space.&lt;/p&gt;
&lt;p&gt;With the new InnoDB plugin, disk space is also regained when execuing a &lt;strong&gt;TRUNCATE TABLE log&lt;/strong&gt; statement.&lt;/p&gt;
&lt;p&gt;Fragmentation is not as bad as in a single tablespace: the data is limited within the boundaries of a smaller file.&lt;/p&gt;
&lt;h4&gt;Monitoring&lt;/h4&gt;
&lt;p&gt;One other nice thing about &lt;strong&gt;innodb_file_per_table&lt;/strong&gt; is that it is possible to monitor table size on the file system level. You don&#39;t need access to MySQL, to use SHOW TABLE STATUS or to query the INFORMATION_SCHEMA. You can just look up the top 10 largest files under your MySQL data directory (and subdirectories), and monitor their size. You can see which table grows fastest.&lt;/p&gt;
&lt;h4&gt;Backup&lt;/h4&gt;
&lt;p&gt;Last, it is not yet possible to backup single InnoDB tables by copying the &lt;strong&gt;.ibd&lt;/strong&gt; files. But hopefully work will be done in this direction.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parameters to use on mysqldump</title>
      <link>/blog/mysql/parameters-to-use-on-mysqldump/</link>
      <pubDate>Mon, 13 Oct 2008 09:03:50 +0000</pubDate>
      
      <guid>/blog/mysql/parameters-to-use-on-mysqldump/</guid>
      <description>&lt;p&gt;mysqldump is commonly used for making a MySQL database backup or for setting up a replication.&lt;/p&gt;
&lt;p&gt;As in all mysql binaries, there are quite a few parameters to mysqldump. Some are just niceties but some flags are a must. Of course, choosing the parameters to use greatly depends on your requirements, database setup, network capacity etc.&lt;/p&gt;
&lt;p&gt;Here is my usual setup for mysqldump. The parameters below apply for an InnoDB based schema (no MyISAM, Memory tables). Parameters can be specified on the command line, or under the &lt;code&gt;[mysqld]&lt;/code&gt; scope in the MySQL configuration file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;&lt;code&gt;mysqldump -u dump_user -p -h db_host --routines --master-data --single-transaction  --skip-add-locks --skip-lock-tables --default-character-set=utf8 --compress my_db&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s review these parameters and see their effect:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--user&lt;/code&gt;: This is the user which initiates the dump. Depending on other parameters, the user may need to have quite a few privileges, such as &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;RELOAD&lt;/code&gt;, &lt;code&gt;FILE&lt;/code&gt;, &lt;code&gt;REPLICATION CLIENT&lt;/code&gt; etc. Since I do not usually allow for remote root access into mysql, I create a temporary user solely for the purpose of the dump (many times it&#39;s a one-time action), for the specific machine from which the dump is run, and provide this user with all necessary permissions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--host&lt;/code&gt;: I try not to dump from the same machine on which MySQL is running. If I do, I prefer to dump into a different disk from that on which the data and log files reside. The dump itself may create a heavy load on the machine (setting locks, performing lots of non cached IO operations). Since the target of the dump is mostly to create a backup on another machine, or set up replication on another machine, the dump has better not run from the MySQL machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--routines&lt;/code&gt;: It is really an annoyance to have to remember this flag. In contrast to --triggers, which is by default TRUE, the &lt;code&gt;--routines&lt;/code&gt; parameter is by default FALSE, which means if you forget it - you don&#39;t get the stored functions and procedures in your schema.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--master-data&lt;/code&gt;: I always enable binary logs on the MySQL nodes I work on. While binary logs may lead to more IO operations (writing binary logs make for more disk writes, obviously, but also disable some InnoDB optimizations), may consume more disk space (once I&#39;ve worked with a company which had such a burst of traffic, that the binary logs to completely filled their disk in less than one day). If binary logs are enabled, the &lt;code&gt;--master-data&lt;/code&gt; parameter allows for easy replication setup: the dump includes the &lt;code&gt;CHANGE MASTER TO MASTER_LOG_FILE=&#39;...&#39;, MASTER_LOG_POS=...&lt;/code&gt; statement, so no need to do stuff like &lt;code&gt;SHOW MASTER STATUS&lt;/code&gt; on the dumped node. Optionally, you can set &lt;code&gt;--master-data=2&lt;/code&gt; to have the statement commented.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--single-transaction&lt;/code&gt; &lt;code&gt;--skip-add-locks&lt;/code&gt; &lt;code&gt;--skip-lock-tables&lt;/code&gt;: When working with transactional-only storage engines (InnoDB is the most popular choice, but new engines are coming: Falcon, PBXT, Transactional-Maria, SolidDB and more), these parameters allow for a non-interruptive backup, which does not place read locks on all tables. It is possible to keep on reading and writing to the database while mysqldump is running with single transaction. Running in this mode does have its penalty: more IO operations (due to MVCC&#39;s duplication of data while many transactions access the same data for Read/Write). The server is likely to perform more slowly during the dump time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-character-set=utf8&lt;/code&gt;: I&#39;ve seen so many MySQL installations in which world-wide textual data was stored in the Latin1 charset than I can remember. Many developers, who are testing using standard English data, are not even aware of the issues arrising from changing the data later on to utf8. But even those who are, are usually unaware of the necessity to configure the character set on a per connection basis, or for their specific clients (JDBC or PHP connectors, etc). mysqldump is no different, and if you have non-latin text in your tables, always remember to set this option.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--compress&lt;/code&gt;: when dumping to another machine, especially a remote one, using this option to GZIP the data between the MySQL server and the mysqldump client. This will make for more CPU operations, but CPU is usually cheap nowdays, and the compression may well save you hours of network transfer time.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>